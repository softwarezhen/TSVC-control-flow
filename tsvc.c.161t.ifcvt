
;; Function s161 (s161, funcdef_no=22, decl_uid=3511, cgraph_uid=23, symbol_order=22)

Creating dr for *_3
analyze_innermost: success.
	base_address: b_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_55
analyze_innermost: success.
	base_address: d_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: c_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_10
analyze_innermost: success.
	base_address: e_30(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_30(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_57
analyze_innermost: success.
	base_address: a_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_57
analyze_innermost: success.
	base_address: a_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_21
analyze_innermost: success.
	base_address: c_28(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_28(D)
	Access function 0: {4B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[5]-------------
----------[6]-------------
----------[8]-------------
-------------------------
_15 = *_57;
-------------------------
_18 = _15 + pretmp_56;
-------------------------
_19 = (sizetype) _58;
-------------------------
_20 = _19 * 4;
-------------------------
_21 = c_28(D) + _20;
-------------------------
_22 = _18 + pretmp_56;
-------------------------
*_21 = _22;
-------------------------
_5 = c_28(D) + _2;
-------------------------
_6 = *_5;
-------------------------
_9 = _6 + pretmp_56;
-------------------------
_10 = e_30(D) + _2;
-------------------------
_11 = *_10;
-------------------------
_13 = _9 + _11;
-------------------------
*_57 = _13;
-------------------------
i_39 = PHI <0(2), _58(8)>
-------------------------
.MEM_40 = PHI <.MEM_26(D)(2), .MEM_24(8)>
-------------------------
ivtmp_52 = PHI <65535(2), ivtmp_51(8)>
-------------------------
.MEM_24 = PHI <.MEM_32(5), .MEM_33(4)>
Applying if-conversion

Updating SSA:
creating PHI node in block #7 for .MEM_24
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_39;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = b_27(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _55 = d_29(D) + _2;
Updating SSA information for statement pretmp_56 = *_55;
Updating SSA information for statement _57 = a_31(D) + _2;
Updating SSA information for statement _58 = i_39 + 1;
Updating SSA information for statement if (_4 < 0)
Registering new PHI nodes in block #5
Updating SSA information for statement _5 = c_28(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _9 = _6 + pretmp_56;
Updating SSA information for statement _10 = e_30(D) + _2;
Updating SSA information for statement _11 = *_10;
Updating SSA information for statement _13 = _9 + _11;
Updating SSA information for statement *_57 = _13;
Registering new PHI nodes in block #4
Updating SSA information for statement _15 = *_57;
Updating SSA information for statement _18 = _15 + pretmp_56;
Updating SSA information for statement _19 = (sizetype) _58;
Updating SSA information for statement _20 = _19 * 4;
Updating SSA information for statement _21 = c_28(D) + _20;
Updating SSA information for statement _22 = _18 + pretmp_56;
Updating SSA information for statement *_21 = _22;
Registering new PHI nodes in block #6
Updating SSA information for statement ivtmp_51 = ivtmp_52 - 1;
Updating SSA information for statement if (ivtmp_51 != 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _46 = (long unsigned int) i_39;
Updating SSA information for statement _38 = _1 * 4;
Updating SSA information for statement _37 = b_27(D) + _2;
Updating SSA information for statement _25 = *_3;
Updating SSA information for statement _23 = d_29(D) + _2;
Updating SSA information for statement pretmp_45 = *_55;
Updating SSA information for statement _36 = a_31(D) + _2;
Updating SSA information for statement _41 = i_39 + 1;
Updating SSA information for statement if (_4 < 0)
Registering new PHI nodes in block #10
Updating SSA information for statement _44 = c_28(D) + _2;
Updating SSA information for statement _43 = *_5;
Updating SSA information for statement _42 = _6 + pretmp_56;
Updating SSA information for statement _7 = e_30(D) + _2;
Updating SSA information for statement _8 = *_10;
Updating SSA information for statement _12 = _9 + _11;
Updating SSA information for statement *_57 = _13;
Registering new PHI nodes in block #11
Updating SSA information for statement _14 = *_57;
Updating SSA information for statement _16 = _15 + pretmp_56;
Updating SSA information for statement _17 = (sizetype) _58;
Updating SSA information for statement _35 = _19 * 4;
Updating SSA information for statement _54 = c_28(D) + _20;
Updating SSA information for statement _34 = _18 + pretmp_56;
Updating SSA information for statement *_21 = _22;
Registering new PHI nodes in block #12
Updating SSA information for statement ivtmp_61 = ivtmp_52 - 1;
Updating SSA information for statement if (ivtmp_51 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #7
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_7 -> { _10 }
_8 -> { _11 }
_12 -> { _13 }
_14 -> { _15 }
_16 -> { _18 }
_17 -> { _19 }
_23 -> { _55 }
_25 -> { _4 }
_34 -> { _22 }
_35 -> { _20 }
_36 -> { _57 }
_37 -> { _3 }
_38 -> { _2 }
_41 -> { _58 }
_42 -> { _9 }
_43 -> { _6 }
_44 -> { _5 }
pretmp_45 -> { pretmp_56 }
_46 -> { _1 }
ivtmp_47 -> { ivtmp_52 }
.MEM_48 -> { .MEM_40 }
i_49 -> { i_39 }
.MEM_53 -> { .MEM_32 }
_54 -> { _21 }
.MEM_59 -> { .MEM_33 }
.MEM_60 -> { .MEM_24 }
ivtmp_61 -> { ivtmp_51 }
.MEM_62 -> { .MEM_24 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 6
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 8 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_39;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = b_27(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _55 = d_29(D) + _2;
Setting value number of _55 to _55 (changed)
Making available beyond BB3 _55 for value _55
Value numbering stmt = pretmp_56 = *_55;
Setting value number of pretmp_56 to pretmp_56 (changed)
Making available beyond BB3 pretmp_56 for value pretmp_56
Value numbering stmt = _57 = a_31(D) + _2;
Setting value number of _57 to _57 (changed)
Making available beyond BB3 _57 for value _57
Value numbering stmt = _58 = i_39 + 1;
Setting value number of _58 to _58 (changed)
Making available beyond BB3 _58 for value _58
Value numbering stmt = _15 = *_57;
Setting value number of _15 to _15 (changed)
Making available beyond BB3 _15 for value _15
Value numbering stmt = _18 = _15 + pretmp_56;
Setting value number of _18 to _18 (changed)
Making available beyond BB3 _18 for value _18
Value numbering stmt = _19 = (sizetype) _58;
Setting value number of _19 to _19 (changed)
Making available beyond BB3 _19 for value _19
Value numbering stmt = _20 = _19 * 4;
Setting value number of _20 to _20 (changed)
Making available beyond BB3 _20 for value _20
Value numbering stmt = _21 = c_28(D) + _20;
Setting value number of _21 to _21 (changed)
Making available beyond BB3 _21 for value _21
Value numbering stmt = _22 = _18 + pretmp_56;
Setting value number of _22 to _22 (changed)
Making available beyond BB3 _22 for value _22
Value numbering stmt = _63 = _4 < 0;
Setting value number of _63 to _63 (changed)
Making available beyond BB3 _63 for value _63
Value numbering stmt = .MASK_STORE (_21, 32B, _63, _22);
Setting value number of .MEM_33 to .MEM_33 (changed)
Value numbering stmt = _5 = c_28(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _64 = _4 < 0;
Setting value number of _64 to _63 (changed)
Replaced _4 < 0 with _63 in all uses of _64 = _4 < 0;
Value numbering stmt = _65 = _4 >= 0;
Setting value number of _65 to _65 (changed)
Making available beyond BB3 _65 for value _65
Value numbering stmt = _6 = .MASK_LOAD (_5, 32B, _65);
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _9 = _6 + pretmp_56;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = e_30(D) + _2;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = _11 = .MASK_LOAD (_10, 32B, _65);
Setting value number of _11 to _11 (changed)
Making available beyond BB3 _11 for value _11
Value numbering stmt = _13 = _9 + _11;
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = .MASK_STORE (_57, 32B, _65, _13);
Setting value number of .MEM_32 to .MEM_32 (changed)
Value numbering stmt = ivtmp_51 = ivtmp_52 - 1;
Setting value number of ivtmp_51 to ivtmp_51 (changed)
Making available beyond BB3 ivtmp_51 for value ivtmp_51
Value numbering stmt = if (ivtmp_51 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 33 values available at 23 locations and 33 lattice elements
Removing dead stmt _64 = _4 < 0;
Merging blocks 2 and 14
fix_loop_structure: fixing up loops for function
s161 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int * _10;
  int _11;
  int _12;
  int _13;
  int _14;
  int _15;
  int _16;
  sizetype _17;
  int _18;
  sizetype _19;
  sizetype _20;
  int * _21;
  int _22;
  int * _23;
  int _25;
  int _34;
  sizetype _35;
  int * _36;
  int * _37;
  long unsigned int _38;
  int _41;
  int _42;
  int _43;
  int * _44;
  int pretmp_45;
  long unsigned int _46;
  unsigned int ivtmp_47;
  _Bool _50;
  unsigned int ivtmp_51;
  unsigned int ivtmp_52;
  int * _54;
  int * _55;
  int pretmp_56;
  int * _57;
  int _58;
  unsigned int ivtmp_61;
  _Bool _63;
  _Bool _65;

  <bb 2> [local count: 10737414]:
  _50 = .LOOP_VECTORIZED (1, 2);
  if (_50 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_39 = PHI <_58(8), 0(15)>
  # ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
  _1 = (long unsigned int) i_39;
  _2 = _1 * 4;
  _3 = b_27(D) + _2;
  _4 = *_3;
  _55 = d_29(D) + _2;
  pretmp_56 = *_55;
  _57 = a_31(D) + _2;
  _58 = i_39 + 1;
  _15 = *_57;
  _18 = _15 + pretmp_56;
  _19 = (sizetype) _58;
  _20 = _19 * 4;
  _21 = c_28(D) + _20;
  _22 = _18 + pretmp_56;
  _63 = _4 < 0;
  .MASK_STORE (_21, 32B, _63, _22);
  _5 = c_28(D) + _2;
  _65 = _4 >= 0;
  _6 = .MASK_LOAD (_5, 32B, _65);
  _9 = _6 + pretmp_56;
  _10 = e_30(D) + _2;
  _11 = .MASK_LOAD (_10, 32B, _65);
  _13 = _9 + _11;
  .MASK_STORE (_57, 32B, _65, _13);
  ivtmp_51 = ivtmp_52 - 1;
  if (ivtmp_51 != 0)
    goto <bb 8>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 8> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 1063004408]:
  # i_49 = PHI <_41(13), 0(16)>
  # ivtmp_47 = PHI <ivtmp_61(13), 65535(16)>
  _46 = (long unsigned int) i_49;
  _38 = _46 * 4;
  _37 = b_27(D) + _38;
  _25 = *_37;
  _23 = d_29(D) + _38;
  pretmp_45 = *_23;
  _36 = a_31(D) + _38;
  _41 = i_49 + 1;
  if (_25 < 0)
    goto <bb 11>; [41.00%]
  else
    goto <bb 10>; [59.00%]

  <bb 11> [local count: 435831803]:
  _14 = *_36;
  _16 = _14 + pretmp_45;
  _17 = (sizetype) _41;
  _35 = _17 * 4;
  _54 = c_28(D) + _35;
  _34 = _16 + pretmp_45;
  *_54 = _34;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 627172605]:
  _44 = c_28(D) + _38;
  _43 = *_44;
  _42 = _43 + pretmp_45;
  _7 = e_30(D) + _38;
  _8 = *_7;
  _12 = _42 + _8;
  *_36 = _12;

  <bb 12> [local count: 1063004410]:
  ivtmp_61 = ivtmp_47 - 1;
  if (ivtmp_61 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 13> [local count: 1052266997]:
  goto <bb 9>; [100.00%]

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s1161 (s1161, funcdef_no=23, decl_uid=3529, cgraph_uid=24, symbol_order=23)

Creating dr for *_3
analyze_innermost: success.
	base_address: c_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_47
analyze_innermost: success.
	base_address: d_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_8
analyze_innermost: success.
	base_address: e_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_49
analyze_innermost: success.
	base_address: a_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_49
analyze_innermost: success.
	base_address: a_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_17
analyze_innermost: success.
	base_address: b_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_28(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[5]-------------
----------[6]-------------
----------[8]-------------
-------------------------
_13 = *_49;
-------------------------
_16 = _13 + pretmp_48;
-------------------------
_17 = b_28(D) + _2;
-------------------------
_18 = _16 + pretmp_48;
-------------------------
*_17 = _18;
-------------------------
_7 = _4 + pretmp_48;
-------------------------
_8 = e_25(D) + _2;
-------------------------
_9 = *_8;
-------------------------
_11 = _7 + _9;
-------------------------
*_49 = _11;
-------------------------
i_35 = PHI <0(2), i_30(8)>
-------------------------
.MEM_36 = PHI <.MEM_22(D)(2), .MEM_20(8)>
-------------------------
ivtmp_46 = PHI <65535(2), ivtmp_45(8)>
-------------------------
.MEM_20 = PHI <.MEM_27(5), .MEM_29(4)>
Applying if-conversion

Updating SSA:
creating PHI node in block #7 for .MEM_20
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_35;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = c_23(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _47 = d_24(D) + _2;
Updating SSA information for statement pretmp_48 = *_47;
Updating SSA information for statement _49 = a_26(D) + _2;
Updating SSA information for statement if (_4 < 0)
Registering new PHI nodes in block #5
Updating SSA information for statement _7 = _4 + pretmp_48;
Updating SSA information for statement _8 = e_25(D) + _2;
Updating SSA information for statement _9 = *_8;
Updating SSA information for statement _11 = _7 + _9;
Updating SSA information for statement *_49 = _11;
Registering new PHI nodes in block #4
Updating SSA information for statement _13 = *_49;
Updating SSA information for statement _16 = _13 + pretmp_48;
Updating SSA information for statement _17 = b_28(D) + _2;
Updating SSA information for statement _18 = _16 + pretmp_48;
Updating SSA information for statement *_17 = _18;
Registering new PHI nodes in block #6
Updating SSA information for statement i_30 = i_35 + 1;
Updating SSA information for statement ivtmp_45 = ivtmp_46 - 1;
Updating SSA information for statement if (ivtmp_45 != 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _34 = (long unsigned int) i_35;
Updating SSA information for statement _33 = _1 * 4;
Updating SSA information for statement _21 = c_23(D) + _2;
Updating SSA information for statement _19 = *_3;
Updating SSA information for statement _40 = d_24(D) + _2;
Updating SSA information for statement pretmp_31 = *_47;
Updating SSA information for statement _32 = a_26(D) + _2;
Updating SSA information for statement if (_4 < 0)
Registering new PHI nodes in block #10
Updating SSA information for statement _39 = _4 + pretmp_48;
Updating SSA information for statement _38 = e_25(D) + _2;
Updating SSA information for statement _37 = *_8;
Updating SSA information for statement _5 = _7 + _9;
Updating SSA information for statement *_49 = _11;
Registering new PHI nodes in block #11
Updating SSA information for statement _10 = *_49;
Updating SSA information for statement _12 = _13 + pretmp_48;
Updating SSA information for statement _14 = b_28(D) + _2;
Updating SSA information for statement _15 = _16 + pretmp_48;
Updating SSA information for statement *_17 = _18;
Registering new PHI nodes in block #12
Updating SSA information for statement i_52 = i_35 + 1;
Updating SSA information for statement ivtmp_53 = ivtmp_46 - 1;
Updating SSA information for statement if (ivtmp_45 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #7
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_5 -> { _11 }
.MEM_6 -> { .MEM_27 }
_10 -> { _13 }
_12 -> { _16 }
_14 -> { _17 }
_15 -> { _18 }
_19 -> { _4 }
_21 -> { _3 }
pretmp_31 -> { pretmp_48 }
_32 -> { _49 }
_33 -> { _2 }
_34 -> { _1 }
_37 -> { _9 }
_38 -> { _8 }
_39 -> { _7 }
_40 -> { _47 }
ivtmp_41 -> { ivtmp_46 }
.MEM_42 -> { .MEM_36 }
i_43 -> { i_35 }
.MEM_50 -> { .MEM_29 }
.MEM_51 -> { .MEM_20 }
i_52 -> { i_30 }
ivtmp_53 -> { ivtmp_45 }
.MEM_54 -> { .MEM_20 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 6
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 8 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_35;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = c_23(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _47 = d_24(D) + _2;
Setting value number of _47 to _47 (changed)
Making available beyond BB3 _47 for value _47
Value numbering stmt = pretmp_48 = *_47;
Setting value number of pretmp_48 to pretmp_48 (changed)
Making available beyond BB3 pretmp_48 for value pretmp_48
Value numbering stmt = _49 = a_26(D) + _2;
Setting value number of _49 to _49 (changed)
Making available beyond BB3 _49 for value _49
Value numbering stmt = _13 = *_49;
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = _16 = _13 + pretmp_48;
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = _17 = b_28(D) + _2;
Setting value number of _17 to _17 (changed)
Making available beyond BB3 _17 for value _17
Value numbering stmt = _18 = _16 + pretmp_48;
Setting value number of _18 to _18 (changed)
Making available beyond BB3 _18 for value _18
Value numbering stmt = _55 = _4 < 0;
Setting value number of _55 to _55 (changed)
Making available beyond BB3 _55 for value _55
Value numbering stmt = .MASK_STORE (_17, 32B, _55, _18);
Setting value number of .MEM_29 to .MEM_29 (changed)
Value numbering stmt = _7 = _4 + pretmp_48;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _8 = e_25(D) + _2;
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _56 = _4 < 0;
Setting value number of _56 to _55 (changed)
Replaced _4 < 0 with _55 in all uses of _56 = _4 < 0;
Value numbering stmt = _57 = _4 >= 0;
Setting value number of _57 to _57 (changed)
Making available beyond BB3 _57 for value _57
Value numbering stmt = _9 = .MASK_LOAD (_8, 32B, _57);
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _11 = _7 + _9;
Setting value number of _11 to _11 (changed)
Making available beyond BB3 _11 for value _11
Value numbering stmt = .MASK_STORE (_49, 32B, _57, _11);
Setting value number of .MEM_27 to .MEM_27 (changed)
Value numbering stmt = i_30 = i_35 + 1;
Setting value number of i_30 to i_30 (changed)
Making available beyond BB3 i_30 for value i_30
Value numbering stmt = ivtmp_45 = ivtmp_46 - 1;
Setting value number of ivtmp_45 to ivtmp_45 (changed)
Making available beyond BB3 ivtmp_45 for value ivtmp_45
Value numbering stmt = if (ivtmp_45 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 29 values available at 19 locations and 29 lattice elements
Removing dead stmt _56 = _4 < 0;
Merging blocks 2 and 14
fix_loop_structure: fixing up loops for function
s1161 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int _5;
  int _7;
  int * _8;
  int _9;
  int _10;
  int _11;
  int _12;
  int _13;
  int * _14;
  int _15;
  int _16;
  int * _17;
  int _18;
  int _19;
  int * _21;
  int pretmp_31;
  int * _32;
  long unsigned int _33;
  long unsigned int _34;
  int _37;
  int * _38;
  int _39;
  int * _40;
  unsigned int ivtmp_41;
  _Bool _44;
  unsigned int ivtmp_45;
  unsigned int ivtmp_46;
  int * _47;
  int pretmp_48;
  int * _49;
  unsigned int ivtmp_53;
  _Bool _55;
  _Bool _57;

  <bb 2> [local count: 10737414]:
  _44 = .LOOP_VECTORIZED (1, 2);
  if (_44 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_35 = PHI <i_30(8), 0(15)>
  # ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
  _1 = (long unsigned int) i_35;
  _2 = _1 * 4;
  _3 = c_23(D) + _2;
  _4 = *_3;
  _47 = d_24(D) + _2;
  pretmp_48 = *_47;
  _49 = a_26(D) + _2;
  _13 = *_49;
  _16 = _13 + pretmp_48;
  _17 = b_28(D) + _2;
  _18 = _16 + pretmp_48;
  _55 = _4 < 0;
  .MASK_STORE (_17, 32B, _55, _18);
  _7 = _4 + pretmp_48;
  _8 = e_25(D) + _2;
  _57 = _4 >= 0;
  _9 = .MASK_LOAD (_8, 32B, _57);
  _11 = _7 + _9;
  .MASK_STORE (_49, 32B, _57, _11);
  i_30 = i_35 + 1;
  ivtmp_45 = ivtmp_46 - 1;
  if (ivtmp_45 != 0)
    goto <bb 8>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 8> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 1063004408]:
  # i_43 = PHI <i_52(13), 0(16)>
  # ivtmp_41 = PHI <ivtmp_53(13), 65535(16)>
  _34 = (long unsigned int) i_43;
  _33 = _34 * 4;
  _21 = c_23(D) + _33;
  _19 = *_21;
  _40 = d_24(D) + _33;
  pretmp_31 = *_40;
  _32 = a_26(D) + _33;
  if (_19 < 0)
    goto <bb 11>; [41.00%]
  else
    goto <bb 10>; [59.00%]

  <bb 11> [local count: 435831803]:
  _10 = *_32;
  _12 = _10 + pretmp_31;
  _14 = b_28(D) + _33;
  _15 = _12 + pretmp_31;
  *_14 = _15;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 627172605]:
  _39 = _19 + pretmp_31;
  _38 = e_25(D) + _33;
  _37 = *_38;
  _5 = _39 + _37;
  *_32 = _5;

  <bb 12> [local count: 1063004410]:
  i_52 = i_43 + 1;
  ivtmp_53 = ivtmp_41 - 1;
  if (ivtmp_53 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 13> [local count: 1052266997]:
  goto <bb 9>; [100.00%]

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s162 (s162, funcdef_no=24, decl_uid=3547, cgraph_uid=25, symbol_order=24)

s162 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int _7;
  int * _8;
  int _9;
  int _10;
  unsigned int ivtmp_31;
  unsigned int ivtmp_38;

  <bb 2> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_23 = PHI <0(2), i_18(5)>
  # ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
  _1 = (long unsigned int) i_23;
  _2 = _1 * 4;
  _3 = a_14(D) + _2;
  _4 = *_3;
  _5 = b_15(D) + _2;
  _6 = *_5;
  _7 = _4 + _6;
  _8 = c_16(D) + _2;
  _9 = *_8;
  _10 = _7 + _9;
  *_3 = _10;
  i_18 = i_23 + 1;
  ivtmp_31 = ivtmp_38 - 1;
  if (ivtmp_31 != 0)
    goto <bb 5>; [98.99%]
  else
    goto <bb 4>; [1.01%]

  <bb 5> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 4> [local count: 10737416]:
  return;

}



;; Function s271 (s271, funcdef_no=25, decl_uid=3565, cgraph_uid=26, symbol_order=25)

Creating dr for *_3
analyze_innermost: success.
	base_address: b_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_15(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_17(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[8]-------------
----------[5]-------------
----------[7]-------------
-------------------------
_5 = a_16(D) + _2;
-------------------------
_6 = *_5;
-------------------------
_7 = c_17(D) + _2;
-------------------------
_8 = *_7;
-------------------------
_9 = _4 + _8;
-------------------------
_10 = _6 + _9;
-------------------------
*_5 = _10;
-------------------------
i_25 = PHI <0(2), i_19(7)>
-------------------------
.MEM_26 = PHI <.MEM_14(D)(2), .MEM_12(7)>
-------------------------
ivtmp_30 = PHI <65536(2), ivtmp_29(7)>
-------------------------
.MEM_12 = PHI <.MEM_18(4), .MEM_26(8)>
Applying if-conversion

Updating SSA:
creating PHI node in block #6 for .MEM_12
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_25;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = b_15(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement if (_4 > 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #4
Updating SSA information for statement _5 = a_16(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _7 = c_17(D) + _2;
Updating SSA information for statement _8 = *_7;
Updating SSA information for statement _9 = _4 + _8;
Updating SSA information for statement _10 = _6 + _9;
Updating SSA information for statement *_5 = _10;
Registering new PHI nodes in block #5
Updating SSA information for statement i_19 = i_25 + 1;
Updating SSA information for statement ivtmp_29 = ivtmp_30 - 1;
Updating SSA information for statement if (ivtmp_29 != 0)
Registering new PHI nodes in block #7
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _11 = (long unsigned int) i_25;
Updating SSA information for statement _23 = _1 * 4;
Updating SSA information for statement _22 = b_15(D) + _2;
Updating SSA information for statement _21 = *_3;
Updating SSA information for statement if (_4 > 0)
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Updating SSA information for statement _20 = a_16(D) + _2;
Updating SSA information for statement _31 = *_5;
Updating SSA information for statement _32 = c_17(D) + _2;
Updating SSA information for statement _33 = *_7;
Updating SSA information for statement _34 = _4 + _8;
Updating SSA information for statement _35 = _6 + _9;
Updating SSA information for statement *_5 = _10;
Registering new PHI nodes in block #12
Updating SSA information for statement i_38 = i_25 + 1;
Updating SSA information for statement ivtmp_39 = ivtmp_30 - 1;
Updating SSA information for statement if (ivtmp_29 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #6
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_11 -> { _1 }
ivtmp_13 -> { ivtmp_30 }
_20 -> { _5 }
_21 -> { _4 }
_22 -> { _3 }
_23 -> { _2 }
.MEM_24 -> { .MEM_26 }
i_27 -> { i_25 }
_31 -> { _6 }
_32 -> { _7 }
_33 -> { _8 }
_34 -> { _9 }
_35 -> { _10 }
.MEM_36 -> { .MEM_18 }
.MEM_37 -> { .MEM_12 }
i_38 -> { i_19 }
ivtmp_39 -> { ivtmp_29 }
.MEM_40 -> { .MEM_12 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 8
;; basic block 8, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 5
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 7 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_25;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = b_15(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = a_16(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _41 = _4 > 0;
Setting value number of _41 to _41 (changed)
Making available beyond BB3 _41 for value _41
Value numbering stmt = _6 = .MASK_LOAD (_5, 32B, _41);
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _7 = c_17(D) + _2;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _8 = .MASK_LOAD (_7, 32B, _41);
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = _4 + _8;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = _6 + _9;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = .MASK_STORE (_5, 32B, _41, _10);
Setting value number of .MEM_18 to .MEM_18 (changed)
Value numbering stmt = i_19 = i_25 + 1;
Setting value number of i_19 to i_19 (changed)
Making available beyond BB3 i_19 for value i_19
Value numbering stmt = ivtmp_29 = ivtmp_30 - 1;
Setting value number of ivtmp_29 to ivtmp_29 (changed)
Making available beyond BB3 ivtmp_29 for value ivtmp_29
Value numbering stmt = if (ivtmp_29 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 19 values available at 13 locations and 19 lattice elements
Merging blocks 2 and 14
Removing basic block 10
;; basic block 10, loop depth 1
;;  pred:      
;;  succ:       12


fix_loop_structure: fixing up loops for function
s271 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  long unsigned int _11;
  unsigned int ivtmp_13;
  int * _20;
  int _21;
  int * _22;
  long unsigned int _23;
  _Bool _28;
  unsigned int ivtmp_29;
  unsigned int ivtmp_30;
  int _31;
  int * _32;
  int _33;
  int _34;
  int _35;
  unsigned int ivtmp_39;
  _Bool _41;

  <bb 2> [local count: 10737414]:
  _28 = .LOOP_VECTORIZED (1, 2);
  if (_28 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_25 = PHI <i_19(7), 0(15)>
  # ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
  _1 = (long unsigned int) i_25;
  _2 = _1 * 4;
  _3 = b_15(D) + _2;
  _4 = *_3;
  _5 = a_16(D) + _2;
  _41 = _4 > 0;
  _6 = .MASK_LOAD (_5, 32B, _41);
  _7 = c_17(D) + _2;
  _8 = .MASK_LOAD (_7, 32B, _41);
  _9 = _4 + _8;
  _10 = _6 + _9;
  .MASK_STORE (_5, 32B, _41, _10);
  i_19 = i_25 + 1;
  ivtmp_29 = ivtmp_30 - 1;
  if (ivtmp_29 != 0)
    goto <bb 7>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 7> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 1063004408]:
  # i_27 = PHI <i_38(13), 0(16)>
  # ivtmp_13 = PHI <ivtmp_39(13), 65536(16)>
  _11 = (long unsigned int) i_27;
  _23 = _11 * 4;
  _22 = b_15(D) + _23;
  _21 = *_22;
  if (_21 > 0)
    goto <bb 11>; [59.00%]
  else
    goto <bb 12>; [41.00%]

  <bb 11> [local count: 627172605]:
  _20 = a_16(D) + _23;
  _31 = *_20;
  _32 = c_17(D) + _23;
  _33 = *_32;
  _34 = _21 + _33;
  _35 = _31 + _34;
  *_20 = _35;

  <bb 12> [local count: 1063004410]:
  i_38 = i_27 + 1;
  ivtmp_39 = ivtmp_13 - 1;
  if (ivtmp_39 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 13> [local count: 1052266997]:
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s272 (s272, funcdef_no=26, decl_uid=3583, cgraph_uid=27, symbol_order=26)

Creating dr for *_3
analyze_innermost: success.
	base_address: e_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_9
analyze_innermost: success.
	base_address: d_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_13
analyze_innermost: success.
	base_address: b_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_13
analyze_innermost: success.
	base_address: b_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_27(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[8]-------------
----------[5]-------------
----------[7]-------------
-------------------------
_5 = a_23(D) + _2;
-------------------------
_6 = *_5;
-------------------------
_7 = c_24(D) + _2;
-------------------------
_8 = *_7;
-------------------------
_9 = d_25(D) + _2;
-------------------------
_10 = *_9;
-------------------------
_11 = _8 + _10;
-------------------------
_12 = _6 + _11;
-------------------------
*_5 = _12;
-------------------------
_13 = b_27(D) + _2;
-------------------------
_14 = *_13;
-------------------------
_15 = *_7;
-------------------------
_16 = _15 * 2;
-------------------------
_17 = _14 + _16;
-------------------------
*_13 = _17;
-------------------------
i_36 = PHI <0(2), i_29(7)>
-------------------------
.MEM_37 = PHI <.MEM_21(D)(2), .MEM_19(7)>
-------------------------
ivtmp_40 = PHI <65536(2), ivtmp_39(7)>
-------------------------
.MEM_19 = PHI <.MEM_28(4), .MEM_37(8)>
Applying if-conversion

Updating SSA:
creating PHI node in block #6 for .MEM_19
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_36;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = e_22(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement if (_4 > 499)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #4
Updating SSA information for statement _5 = a_23(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _7 = c_24(D) + _2;
Updating SSA information for statement _8 = *_7;
Updating SSA information for statement _9 = d_25(D) + _2;
Updating SSA information for statement _10 = *_9;
Updating SSA information for statement _11 = _8 + _10;
Updating SSA information for statement _12 = _6 + _11;
Updating SSA information for statement *_5 = _12;
Updating SSA information for statement _13 = b_27(D) + _2;
Updating SSA information for statement _14 = *_13;
Updating SSA information for statement _15 = *_7;
Updating SSA information for statement _16 = _15 * 2;
Updating SSA information for statement _17 = _14 + _16;
Updating SSA information for statement *_13 = _17;
Registering new PHI nodes in block #5
Updating SSA information for statement i_29 = i_36 + 1;
Updating SSA information for statement ivtmp_39 = ivtmp_40 - 1;
Updating SSA information for statement if (ivtmp_39 != 0)
Registering new PHI nodes in block #7
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _18 = (long unsigned int) i_36;
Updating SSA information for statement _34 = _1 * 4;
Updating SSA information for statement _32 = e_22(D) + _2;
Updating SSA information for statement _31 = *_3;
Updating SSA information for statement if (_4 > 499)
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Updating SSA information for statement _30 = a_23(D) + _2;
Updating SSA information for statement _41 = *_5;
Updating SSA information for statement _42 = c_24(D) + _2;
Updating SSA information for statement _43 = *_7;
Updating SSA information for statement _44 = d_25(D) + _2;
Updating SSA information for statement _45 = *_9;
Updating SSA information for statement _46 = _8 + _10;
Updating SSA information for statement _47 = _6 + _11;
Updating SSA information for statement *_5 = _12;
Updating SSA information for statement _49 = b_27(D) + _2;
Updating SSA information for statement _50 = *_13;
Updating SSA information for statement _51 = *_7;
Updating SSA information for statement _52 = _15 * 2;
Updating SSA information for statement _53 = _14 + _16;
Updating SSA information for statement *_13 = _17;
Registering new PHI nodes in block #12
Updating SSA information for statement i_56 = i_36 + 1;
Updating SSA information for statement ivtmp_57 = ivtmp_40 - 1;
Updating SSA information for statement if (ivtmp_39 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #6
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_18 -> { _1 }
ivtmp_20 -> { ivtmp_40 }
_30 -> { _5 }
_31 -> { _4 }
_32 -> { _3 }
.MEM_33 -> { .MEM_37 }
_34 -> { _2 }
i_35 -> { i_36 }
_41 -> { _6 }
_42 -> { _7 }
_43 -> { _8 }
_44 -> { _9 }
_45 -> { _10 }
_46 -> { _11 }
_47 -> { _12 }
.MEM_48 -> { .MEM_26 }
_49 -> { _13 }
_50 -> { _14 }
_51 -> { _15 }
_52 -> { _16 }
_53 -> { _17 }
.MEM_54 -> { .MEM_28 }
.MEM_55 -> { .MEM_19 }
i_56 -> { i_29 }
ivtmp_57 -> { ivtmp_39 }
.MEM_58 -> { .MEM_19 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 8
;; basic block 8, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 5
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 7 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_36;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = e_22(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = a_23(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _59 = _4 > 499;
Setting value number of _59 to _59 (changed)
Making available beyond BB3 _59 for value _59
Value numbering stmt = _6 = .MASK_LOAD (_5, 32B, _59);
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _7 = c_24(D) + _2;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _8 = .MASK_LOAD (_7, 32B, _59);
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = d_25(D) + _2;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = .MASK_LOAD (_9, 32B, _59);
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = _11 = _8 + _10;
Setting value number of _11 to _11 (changed)
Making available beyond BB3 _11 for value _11
Value numbering stmt = _12 = _6 + _11;
Setting value number of _12 to _12 (changed)
Making available beyond BB3 _12 for value _12
Value numbering stmt = .MASK_STORE (_5, 32B, _59, _12);
Setting value number of .MEM_26 to .MEM_26 (changed)
Value numbering stmt = _13 = b_27(D) + _2;
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = _14 = .MASK_LOAD (_13, 32B, _59);
Setting value number of _14 to _14 (changed)
Making available beyond BB3 _14 for value _14
Value numbering stmt = _15 = .MASK_LOAD (_7, 32B, _59);
Setting value number of _15 to _15 (changed)
Making available beyond BB3 _15 for value _15
Value numbering stmt = _16 = _15 * 2;
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = _17 = _14 + _16;
Setting value number of _17 to _17 (changed)
Making available beyond BB3 _17 for value _17
Value numbering stmt = .MASK_STORE (_13, 32B, _59, _17);
Setting value number of .MEM_28 to .MEM_28 (changed)
Value numbering stmt = i_29 = i_36 + 1;
Setting value number of i_29 to i_29 (changed)
Making available beyond BB3 i_29 for value i_29
Value numbering stmt = ivtmp_39 = ivtmp_40 - 1;
Setting value number of ivtmp_39 to ivtmp_39 (changed)
Making available beyond BB3 ivtmp_39 for value ivtmp_39
Value numbering stmt = if (ivtmp_39 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 29 values available at 20 locations and 29 lattice elements
Merging blocks 2 and 14
Removing basic block 10
;; basic block 10, loop depth 1
;;  pred:      
;;  succ:       12


fix_loop_structure: fixing up loops for function
s272 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int * _9;
  int _10;
  int _11;
  int _12;
  int * _13;
  int _14;
  int _15;
  int _16;
  int _17;
  long unsigned int _18;
  unsigned int ivtmp_20;
  int * _30;
  int _31;
  int * _32;
  long unsigned int _34;
  _Bool _38;
  unsigned int ivtmp_39;
  unsigned int ivtmp_40;
  int _41;
  int * _42;
  int _43;
  int * _44;
  int _45;
  int _46;
  int _47;
  int * _49;
  int _50;
  int _51;
  int _52;
  int _53;
  unsigned int ivtmp_57;
  _Bool _59;

  <bb 2> [local count: 10737416]:
  _38 = .LOOP_VECTORIZED (1, 2);
  if (_38 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_36 = PHI <i_29(7), 0(15)>
  # ivtmp_40 = PHI <ivtmp_39(7), 65536(15)>
  _1 = (long unsigned int) i_36;
  _2 = _1 * 4;
  _3 = e_22(D) + _2;
  _4 = *_3;
  _5 = a_23(D) + _2;
  _59 = _4 > 499;
  _6 = .MASK_LOAD (_5, 32B, _59);
  _7 = c_24(D) + _2;
  _8 = .MASK_LOAD (_7, 32B, _59);
  _9 = d_25(D) + _2;
  _10 = .MASK_LOAD (_9, 32B, _59);
  _11 = _8 + _10;
  _12 = _6 + _11;
  .MASK_STORE (_5, 32B, _59, _12);
  _13 = b_27(D) + _2;
  _14 = .MASK_LOAD (_13, 32B, _59);
  _15 = .MASK_LOAD (_7, 32B, _59);
  _16 = _15 * 2;
  _17 = _14 + _16;
  .MASK_STORE (_13, 32B, _59, _17);
  i_29 = i_36 + 1;
  ivtmp_39 = ivtmp_40 - 1;
  if (ivtmp_39 != 0)
    goto <bb 7>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 7> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737416]:

  <bb 9> [local count: 1063004409]:
  # i_35 = PHI <i_56(13), 0(16)>
  # ivtmp_20 = PHI <ivtmp_57(13), 65536(16)>
  _18 = (long unsigned int) i_35;
  _34 = _18 * 4;
  _32 = e_22(D) + _34;
  _31 = *_32;
  if (_31 > 499)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 531502204]:
  _30 = a_23(D) + _34;
  _41 = *_30;
  _42 = c_24(D) + _34;
  _43 = *_42;
  _44 = d_25(D) + _34;
  _45 = *_44;
  _46 = _43 + _45;
  _47 = _41 + _46;
  *_30 = _47;
  _49 = b_27(D) + _34;
  _50 = *_49;
  _51 = *_42;
  _52 = _51 * 2;
  _53 = _50 + _52;
  *_49 = _53;

  <bb 12> [local count: 1063004409]:
  i_56 = i_35 + 1;
  ivtmp_57 = ivtmp_20 - 1;
  if (ivtmp_57 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 13> [local count: 1052266996]:
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s273 (s273, funcdef_no=27, decl_uid=3601, cgraph_uid=28, symbol_order=27)

Creating dr for *_3
analyze_innermost: success.
	base_address: a_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: d_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: e_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_11
analyze_innermost: success.
	base_address: b_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: d_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: e_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_11
analyze_innermost: success.
	base_address: b_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_17
analyze_innermost: success.
	base_address: c_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_33(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: d_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_17
analyze_innermost: success.
	base_address: c_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_33(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[8]-------------
----------[5]-------------
----------[7]-------------
-------------------------
_11 = b_31(D) + _2;
-------------------------
_12 = *_11;
-------------------------
_13 = *_5;
-------------------------
_14 = *_7;
-------------------------
_15 = _13 + _14;
-------------------------
_16 = _12 + _15;
-------------------------
*_11 = _16;
-------------------------
pretmp_63 = *_3;
-------------------------
i_44 = PHI <0(2), i_35(7)>
-------------------------
.MEM_45 = PHI <.MEM_26(D)(2), .MEM_34(7)>
-------------------------
ivtmp_55 = PHI <65536(2), ivtmp_54(7)>
-------------------------
.MEM_24 = PHI <.MEM_32(4), .MEM_30(8)>
-------------------------
prephitmp_64 = PHI <pretmp_63(4), _10(8)>
Applying if-conversion

Updating SSA:
creating PHI node in block #6 for .MEM_34
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_44;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_27(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _5 = d_28(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _7 = e_29(D) + _2;
Updating SSA information for statement _8 = *_7;
Updating SSA information for statement _9 = _6 + _8;
Updating SSA information for statement _10 = _4 + _9;
Updating SSA information for statement *_3 = _10;
Updating SSA information for statement if (_10 < 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #4
Updating SSA information for statement _11 = b_31(D) + _2;
Updating SSA information for statement _12 = *_11;
Updating SSA information for statement _13 = *_5;
Updating SSA information for statement _14 = *_7;
Updating SSA information for statement _15 = _13 + _14;
Updating SSA information for statement _16 = _12 + _15;
Updating SSA information for statement *_11 = _16;
Updating SSA information for statement pretmp_63 = *_3;
Registering new PHI nodes in block #5
Updating SSA information for statement _17 = c_33(D) + _2;
Updating SSA information for statement _18 = *_17;
Updating SSA information for statement _20 = *_5;
Updating SSA information for statement _21 = _20 + prephitmp_64;
Updating SSA information for statement _22 = _18 + _21;
Updating SSA information for statement *_17 = _22;
Updating SSA information for statement i_35 = i_44 + 1;
Updating SSA information for statement ivtmp_54 = ivtmp_55 - 1;
Updating SSA information for statement if (ivtmp_54 != 0)
Registering new PHI nodes in block #7
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _49 = (long unsigned int) i_44;
Updating SSA information for statement _48 = _1 * 4;
Updating SSA information for statement _47 = a_27(D) + _2;
Updating SSA information for statement _46 = *_3;
Updating SSA information for statement _43 = d_28(D) + _2;
Updating SSA information for statement _42 = *_5;
Updating SSA information for statement _41 = e_29(D) + _2;
Updating SSA information for statement _40 = *_7;
Updating SSA information for statement _39 = _6 + _8;
Updating SSA information for statement _38 = _4 + _9;
Updating SSA information for statement *_3 = _10;
Updating SSA information for statement if (_10 < 0)
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Updating SSA information for statement _36 = b_31(D) + _2;
Updating SSA information for statement _25 = *_11;
Updating SSA information for statement _23 = *_5;
Updating SSA information for statement _62 = *_7;
Updating SSA information for statement _56 = _13 + _14;
Updating SSA information for statement _57 = _12 + _15;
Updating SSA information for statement *_11 = _16;
Updating SSA information for statement pretmp_60 = *_3;
Registering new PHI nodes in block #12
Updating SSA information for statement _19 = c_33(D) + _2;
Updating SSA information for statement _65 = *_17;
Updating SSA information for statement _66 = *_5;
Updating SSA information for statement _67 = _20 + prephitmp_64;
Updating SSA information for statement _68 = _18 + _21;
Updating SSA information for statement *_17 = _22;
Updating SSA information for statement i_70 = i_44 + 1;
Updating SSA information for statement ivtmp_71 = ivtmp_55 - 1;
Updating SSA information for statement if (ivtmp_54 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #6
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_19 -> { _17 }
_23 -> { _13 }
_25 -> { _12 }
_36 -> { _11 }
.MEM_37 -> { .MEM_30 }
_38 -> { _10 }
_39 -> { _9 }
_40 -> { _8 }
_41 -> { _7 }
_42 -> { _6 }
_43 -> { _5 }
_46 -> { _4 }
_47 -> { _3 }
_48 -> { _2 }
_49 -> { _1 }
ivtmp_50 -> { ivtmp_55 }
.MEM_51 -> { .MEM_45 }
i_52 -> { i_44 }
_56 -> { _15 }
_57 -> { _16 }
prephitmp_58 -> { prephitmp_64 }
.MEM_59 -> { .MEM_24 }
pretmp_60 -> { pretmp_63 }
.MEM_61 -> { .MEM_32 }
_62 -> { _14 }
_65 -> { _18 }
_66 -> { _20 }
_67 -> { _21 }
_68 -> { _22 }
.MEM_69 -> { .MEM_34 }
i_70 -> { i_35 }
ivtmp_71 -> { ivtmp_54 }
.MEM_72 -> { .MEM_34 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


new phi replacement stmt
prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 8
;; basic block 8, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 5
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 7 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_44;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = a_27(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = d_28(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _6 = *_5;
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _7 = e_29(D) + _2;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _8 = *_7;
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = _6 + _8;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = _4 + _9;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = *_3 = _10;
No store match
Value numbering store *_3 to _10
Setting value number of .MEM_30 to .MEM_30 (changed)
Value numbering stmt = _11 = b_31(D) + _2;
Setting value number of _11 to _11 (changed)
Making available beyond BB3 _11 for value _11
Value numbering stmt = _73 = _10 < 0;
Setting value number of _73 to _73 (changed)
Making available beyond BB3 _73 for value _73
Value numbering stmt = _12 = .MASK_LOAD (_11, 32B, _73);
Setting value number of _12 to _12 (changed)
Making available beyond BB3 _12 for value _12
Value numbering stmt = _13 = *_5;
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = _14 = *_7;
Setting value number of _14 to _14 (changed)
Making available beyond BB3 _14 for value _14
Value numbering stmt = _15 = _13 + _14;
Setting value number of _15 to _15 (changed)
Making available beyond BB3 _15 for value _15
Value numbering stmt = _16 = _12 + _15;
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = .MASK_STORE (_11, 32B, _73, _16);
Setting value number of .MEM_32 to .MEM_32 (changed)
Value numbering stmt = pretmp_63 = *_3;
Setting value number of pretmp_63 to pretmp_63 (changed)
Making available beyond BB3 pretmp_63 for value pretmp_63
Value numbering stmt = prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
Setting value number of prephitmp_64 to prephitmp_64 (changed)
Making available beyond BB3 prephitmp_64 for value prephitmp_64
Value numbering stmt = _17 = c_33(D) + _2;
Setting value number of _17 to _17 (changed)
Making available beyond BB3 _17 for value _17
Value numbering stmt = _18 = *_17;
Setting value number of _18 to _18 (changed)
Making available beyond BB3 _18 for value _18
Value numbering stmt = _20 = *_5;
Setting value number of _20 to _20 (changed)
Making available beyond BB3 _20 for value _20
Value numbering stmt = _21 = _20 + prephitmp_64;
Setting value number of _21 to _21 (changed)
Making available beyond BB3 _21 for value _21
Value numbering stmt = _22 = _18 + _21;
Setting value number of _22 to _22 (changed)
Making available beyond BB3 _22 for value _22
Value numbering stmt = *_17 = _22;
No store match
Value numbering store *_17 to _22
Setting value number of .MEM_34 to .MEM_34 (changed)
Value numbering stmt = i_35 = i_44 + 1;
Setting value number of i_35 to i_35 (changed)
Making available beyond BB3 i_35 for value i_35
Value numbering stmt = ivtmp_54 = ivtmp_55 - 1;
Setting value number of ivtmp_54 to ivtmp_54 (changed)
Making available beyond BB3 ivtmp_54 for value ivtmp_54
Value numbering stmt = if (ivtmp_54 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 36 values available at 26 locations and 36 lattice elements
Merging blocks 2 and 14
Removing basic block 10
;; basic block 10, loop depth 1
;;  pred:      
;;  succ:       12


fix_loop_structure: fixing up loops for function
s273 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  int * _11;
  int _12;
  int _13;
  int _14;
  int _15;
  int _16;
  int * _17;
  int _18;
  int * _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _25;
  int * _36;
  int _38;
  int _39;
  int _40;
  int * _41;
  int _42;
  int * _43;
  int _46;
  int * _47;
  long unsigned int _48;
  long unsigned int _49;
  unsigned int ivtmp_50;
  _Bool _53;
  unsigned int ivtmp_54;
  unsigned int ivtmp_55;
  int _56;
  int _57;
  int prephitmp_58;
  int pretmp_60;
  int _62;
  int pretmp_63;
  int prephitmp_64;
  int _65;
  int _66;
  int _67;
  int _68;
  unsigned int ivtmp_71;
  _Bool _73;

  <bb 2> [local count: 10737414]:
  _53 = .LOOP_VECTORIZED (1, 2);
  if (_53 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_44 = PHI <i_35(7), 0(15)>
  # ivtmp_55 = PHI <ivtmp_54(7), 65536(15)>
  _1 = (long unsigned int) i_44;
  _2 = _1 * 4;
  _3 = a_27(D) + _2;
  _4 = *_3;
  _5 = d_28(D) + _2;
  _6 = *_5;
  _7 = e_29(D) + _2;
  _8 = *_7;
  _9 = _6 + _8;
  _10 = _4 + _9;
  *_3 = _10;
  _11 = b_31(D) + _2;
  _73 = _10 < 0;
  _12 = .MASK_LOAD (_11, 32B, _73);
  _13 = *_5;
  _14 = *_7;
  _15 = _13 + _14;
  _16 = _12 + _15;
  .MASK_STORE (_11, 32B, _73, _16);
  pretmp_63 = *_3;
  prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
  _17 = c_33(D) + _2;
  _18 = *_17;
  _20 = *_5;
  _21 = _20 + prephitmp_64;
  _22 = _18 + _21;
  *_17 = _22;
  i_35 = i_44 + 1;
  ivtmp_54 = ivtmp_55 - 1;
  if (ivtmp_54 != 0)
    goto <bb 7>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 7> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 1063004408]:
  # i_52 = PHI <i_70(13), 0(16)>
  # ivtmp_50 = PHI <ivtmp_71(13), 65536(16)>
  _49 = (long unsigned int) i_52;
  _48 = _49 * 4;
  _47 = a_27(D) + _48;
  _46 = *_47;
  _43 = d_28(D) + _48;
  _42 = *_43;
  _41 = e_29(D) + _48;
  _40 = *_41;
  _39 = _42 + _40;
  _38 = _46 + _39;
  *_47 = _38;
  if (_38 < 0)
    goto <bb 11>; [41.00%]
  else
    goto <bb 12>; [59.00%]

  <bb 11> [local count: 435831803]:
  _36 = b_31(D) + _48;
  _25 = *_36;
  _23 = *_43;
  _62 = *_41;
  _56 = _23 + _62;
  _57 = _25 + _56;
  *_36 = _57;
  pretmp_60 = *_47;

  <bb 12> [local count: 1063004410]:
  # prephitmp_58 = PHI <_38(9), pretmp_60(11)>
  _19 = c_33(D) + _48;
  _65 = *_19;
  _66 = *_43;
  _67 = _66 + prephitmp_58;
  _68 = _65 + _67;
  *_19 = _68;
  i_70 = i_52 + 1;
  ivtmp_71 = ivtmp_50 - 1;
  if (ivtmp_71 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 13> [local count: 1052266997]:
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s274 (s274, funcdef_no=28, decl_uid=3619, cgraph_uid=29, symbol_order=28)

Creating dr for *_3
analyze_innermost: success.
	base_address: c_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: e_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_8
analyze_innermost: success.
	base_address: d_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_10
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_8
analyze_innermost: success.
	base_address: d_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: e_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_10
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_12
analyze_innermost: success.
	base_address: b_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_12
analyze_innermost: success.
	base_address: b_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_28(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[5]-------------
----------[6]-------------
----------[8]-------------
-------------------------
_12 = b_28(D) + _2;
-------------------------
_13 = *_12;
-------------------------
_14 = _11 + _13;
-------------------------
*_12 = _14;
-------------------------
_15 = *_8;
-------------------------
_16 = *_5;
-------------------------
_17 = _15 + _16;
-------------------------
*_10 = _17;
-------------------------
i_39 = PHI <0(2), i_30(8)>
-------------------------
.MEM_40 = PHI <.MEM_21(D)(2), .MEM_19(8)>
-------------------------
ivtmp_54 = PHI <65536(2), ivtmp_53(8)>
-------------------------
.MEM_19 = PHI <.MEM_29(4), .MEM_27(5)>
Applying if-conversion

Updating SSA:
creating PHI node in block #7 for .MEM_19
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_39;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = c_22(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _5 = e_23(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _7 = _4 + _6;
Updating SSA information for statement _8 = d_24(D) + _2;
Updating SSA information for statement _9 = *_8;
Updating SSA information for statement _10 = a_25(D) + _2;
Updating SSA information for statement _11 = _7 + _9;
Updating SSA information for statement *_10 = _11;
Updating SSA information for statement if (_11 > 0)
Registering new PHI nodes in block #5
Updating SSA information for statement _15 = *_8;
Updating SSA information for statement _16 = *_5;
Updating SSA information for statement _17 = _15 + _16;
Updating SSA information for statement *_10 = _17;
Registering new PHI nodes in block #4
Updating SSA information for statement _12 = b_28(D) + _2;
Updating SSA information for statement _13 = *_12;
Updating SSA information for statement _14 = _11 + _13;
Updating SSA information for statement *_12 = _14;
Registering new PHI nodes in block #6
Updating SSA information for statement i_30 = i_39 + 1;
Updating SSA information for statement ivtmp_53 = ivtmp_54 - 1;
Updating SSA information for statement if (ivtmp_53 != 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _41 = (long unsigned int) i_39;
Updating SSA information for statement _38 = _1 * 4;
Updating SSA information for statement _37 = c_22(D) + _2;
Updating SSA information for statement _36 = *_3;
Updating SSA information for statement _35 = e_23(D) + _2;
Updating SSA information for statement _34 = *_5;
Updating SSA information for statement _33 = _4 + _6;
Updating SSA information for statement _32 = d_24(D) + _2;
Updating SSA information for statement _31 = *_8;
Updating SSA information for statement _20 = a_25(D) + _2;
Updating SSA information for statement _18 = _7 + _9;
Updating SSA information for statement *_10 = _11;
Updating SSA information for statement if (_11 > 0)
Registering new PHI nodes in block #10
Updating SSA information for statement _44 = *_8;
Updating SSA information for statement _45 = *_5;
Updating SSA information for statement _49 = _15 + _16;
Updating SSA information for statement *_10 = _17;
Registering new PHI nodes in block #11
Updating SSA information for statement _47 = b_28(D) + _2;
Updating SSA information for statement _46 = *_12;
Updating SSA information for statement _55 = _11 + _13;
Updating SSA information for statement *_12 = _14;
Registering new PHI nodes in block #12
Updating SSA information for statement i_58 = i_39 + 1;
Updating SSA information for statement ivtmp_59 = ivtmp_54 - 1;
Updating SSA information for statement if (ivtmp_53 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #7
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_18 -> { _11 }
_20 -> { _10 }
_31 -> { _9 }
_32 -> { _8 }
_33 -> { _7 }
_34 -> { _6 }
_35 -> { _5 }
_36 -> { _4 }
_37 -> { _3 }
_38 -> { _2 }
_41 -> { _1 }
ivtmp_42 -> { ivtmp_54 }
.MEM_43 -> { .MEM_40 }
_44 -> { _15 }
_45 -> { _16 }
_46 -> { _13 }
_47 -> { _12 }
.MEM_48 -> { .MEM_27 }
_49 -> { _17 }
.MEM_50 -> { .MEM_26 }
i_51 -> { i_39 }
_55 -> { _14 }
.MEM_56 -> { .MEM_29 }
.MEM_57 -> { .MEM_19 }
i_58 -> { i_30 }
ivtmp_59 -> { ivtmp_53 }
.MEM_60 -> { .MEM_19 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 6
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 8 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_39;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = c_22(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = e_23(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _6 = *_5;
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _7 = _4 + _6;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _8 = d_24(D) + _2;
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = *_8;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = a_25(D) + _2;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = _11 = _7 + _9;
Setting value number of _11 to _11 (changed)
Making available beyond BB3 _11 for value _11
Value numbering stmt = *_10 = _11;
No store match
Value numbering store *_10 to _11
Setting value number of .MEM_26 to .MEM_26 (changed)
Value numbering stmt = _12 = b_28(D) + _2;
Setting value number of _12 to _12 (changed)
Making available beyond BB3 _12 for value _12
Value numbering stmt = _61 = _11 > 0;
Setting value number of _61 to _61 (changed)
Making available beyond BB3 _61 for value _61
Value numbering stmt = _13 = .MASK_LOAD (_12, 32B, _61);
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = _14 = _11 + _13;
Setting value number of _14 to _14 (changed)
Making available beyond BB3 _14 for value _14
Value numbering stmt = .MASK_STORE (_12, 32B, _61, _14);
Setting value number of .MEM_29 to .MEM_29 (changed)
Value numbering stmt = _15 = *_8;
Setting value number of _15 to _15 (changed)
Making available beyond BB3 _15 for value _15
Value numbering stmt = _16 = *_5;
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = _17 = _15 + _16;
Setting value number of _17 to _17 (changed)
Making available beyond BB3 _17 for value _17
Value numbering stmt = _ifc__62 = *_10;
Setting value number of _ifc__62 to _ifc__62 (changed)
Making available beyond BB3 _ifc__62 for value _ifc__62
Value numbering stmt = _ifc__63 = _17;
Setting value number of _ifc__63 to _17 (changed)
Value numbering stmt = _ifc__64 = _11 > 0 ? _ifc__62 : _ifc__63;
Setting value number of _ifc__64 to _ifc__64 (changed)
Making available beyond BB3 _ifc__64 for value _ifc__64
Value numbering stmt = *_10 = _ifc__64;
No store match
Value numbering store *_10 to _ifc__64
Setting value number of .MEM_27 to .MEM_27 (changed)
Value numbering stmt = i_30 = i_39 + 1;
Setting value number of i_30 to i_30 (changed)
Making available beyond BB3 i_30 for value i_30
Value numbering stmt = ivtmp_53 = ivtmp_54 - 1;
Setting value number of ivtmp_53 to ivtmp_53 (changed)
Making available beyond BB3 ivtmp_53 for value ivtmp_53
Value numbering stmt = if (ivtmp_53 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 33 values available at 22 locations and 33 lattice elements
Removing dead stmt _ifc__63 = _17;
Merging blocks 2 and 14
fix_loop_structure: fixing up loops for function
s274 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int _7;
  int * _8;
  int _9;
  int * _10;
  int _11;
  int * _12;
  int _13;
  int _14;
  int _15;
  int _16;
  int _17;
  int _18;
  int * _20;
  int _31;
  int * _32;
  int _33;
  int _34;
  int * _35;
  int _36;
  int * _37;
  long unsigned int _38;
  long unsigned int _41;
  unsigned int ivtmp_42;
  int _44;
  int _45;
  int _46;
  int * _47;
  int _49;
  _Bool _52;
  unsigned int ivtmp_53;
  unsigned int ivtmp_54;
  int _55;
  unsigned int ivtmp_59;
  _Bool _61;
  int _ifc__62;
  int _ifc__64;

  <bb 2> [local count: 10737414]:
  _52 = .LOOP_VECTORIZED (1, 2);
  if (_52 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_39 = PHI <i_30(8), 0(15)>
  # ivtmp_54 = PHI <ivtmp_53(8), 65536(15)>
  _1 = (long unsigned int) i_39;
  _2 = _1 * 4;
  _3 = c_22(D) + _2;
  _4 = *_3;
  _5 = e_23(D) + _2;
  _6 = *_5;
  _7 = _4 + _6;
  _8 = d_24(D) + _2;
  _9 = *_8;
  _10 = a_25(D) + _2;
  _11 = _7 + _9;
  *_10 = _11;
  _12 = b_28(D) + _2;
  _61 = _11 > 0;
  _13 = .MASK_LOAD (_12, 32B, _61);
  _14 = _11 + _13;
  .MASK_STORE (_12, 32B, _61, _14);
  _15 = *_8;
  _16 = *_5;
  _17 = _15 + _16;
  _ifc__62 = *_10;
  _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
  *_10 = _ifc__64;
  i_30 = i_39 + 1;
  ivtmp_53 = ivtmp_54 - 1;
  if (ivtmp_53 != 0)
    goto <bb 8>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 8> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 1063004408]:
  # i_51 = PHI <i_58(13), 0(16)>
  # ivtmp_42 = PHI <ivtmp_59(13), 65536(16)>
  _41 = (long unsigned int) i_51;
  _38 = _41 * 4;
  _37 = c_22(D) + _38;
  _36 = *_37;
  _35 = e_23(D) + _38;
  _34 = *_35;
  _33 = _36 + _34;
  _32 = d_24(D) + _38;
  _31 = *_32;
  _20 = a_25(D) + _38;
  _18 = _33 + _31;
  *_20 = _18;
  if (_18 > 0)
    goto <bb 11>; [59.00%]
  else
    goto <bb 10>; [41.00%]

  <bb 11> [local count: 627172605]:
  _47 = b_28(D) + _38;
  _46 = *_47;
  _55 = _18 + _46;
  *_47 = _55;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 435831803]:
  _44 = *_32;
  _45 = *_35;
  _49 = _44 + _45;
  *_20 = _49;

  <bb 12> [local count: 1063004410]:
  i_58 = i_51 + 1;
  ivtmp_59 = ivtmp_42 - 1;
  if (ivtmp_59 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 13> [local count: 1052266997]:
  goto <bb 9>; [100.00%]

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s275 (s275, funcdef_no=29, decl_uid=3637, cgraph_uid=30, symbol_order=29)

s275 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int j;
  int i;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  sizetype _4;
  int[512] * _5;
  int _6;
  int[512] * _7;
  int _8;
  int _9;
  int[512] * _10;
  int _11;
  int[512] * _12;
  int _13;
  unsigned int ivtmp_17;
  unsigned int ivtmp_45;
  unsigned int ivtmp_53;
  unsigned int ivtmp_54;

  <bb 2> [local count: 312201]:

  <bb 3> [local count: 30907933]:
  # i_33 = PHI <0(2), i_25(8)>
  # ivtmp_53 = PHI <512(2), ivtmp_45(8)>
  _1 = (*ff_20(D))[i_33];
  if (_1 > 0)
    goto <bb 7>; [34.74%]
  else
    goto <bb 5>; [65.26%]

  <bb 7> [local count: 10737416]:

  <bb 4> [local count: 1063004408]:
  # j_34 = PHI <1(7), j_24(9)>
  # ivtmp_17 = PHI <511(7), ivtmp_54(9)>
  _2 = (long unsigned int) j_34;
  _3 = _2 * 2048;
  _4 = _3 + 18446744073709549568;
  _5 = ff_20(D) + _4;
  _6 = (*_5)[i_33];
  _7 = gg_21(D) + _3;
  _8 = (*_7)[i_33];
  _9 = _6 + _8;
  _10 = hh_22(D) + _3;
  _11 = (*_10)[i_33];
  _12 = ff_20(D) + _3;
  _13 = _9 + _11;
  (*_12)[i_33] = _13;
  j_24 = j_34 + 1;
  ivtmp_54 = ivtmp_17 - 1;
  if (ivtmp_54 != 0)
    goto <bb 9>; [98.99%]
  else
    goto <bb 5>; [1.01%]

  <bb 9> [local count: 1052266995]:
  goto <bb 4>; [100.00%]

  <bb 5> [local count: 30907933]:
  i_25 = i_33 + 1;
  ivtmp_45 = ivtmp_53 - 1;
  if (ivtmp_45 != 0)
    goto <bb 8>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 8> [local count: 30595732]:
  goto <bb 3>; [100.00%]

  <bb 6> [local count: 312201]:
  return;

}



;; Function s276 (s276, funcdef_no=30, decl_uid=3655, cgraph_uid=31, symbol_order=30)

Creating dr for *_63
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_65
analyze_innermost: success.
	base_address: b_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_17
analyze_innermost: success.
	base_address: d_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_63
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_63
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_65
analyze_innermost: success.
	base_address: b_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_63
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[5]-------------
----------[8]-------------
basic block after exit bb but before latch
s276 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  int _4;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  int * _17;
  int _18;
  int _19;
  int _20;
  long unsigned int _61;
  long unsigned int _62;
  int * _63;
  int pretmp_64;
  int * _65;
  int pretmp_66;
  int _67;

  <bb 2> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_39 = PHI <0(2), _67(6)>
  _61 = (long unsigned int) i_39;
  _62 = _61 * 4;
  _63 = a_25(D) + _62;
  _65 = b_26(D) + _62;
  _67 = i_39 + 1;
  if (i_39 <= 32766)
    goto <bb 4>; [49.99%]
  else
    goto <bb 5>; [50.01%]

  <bb 4> [local count: 531395902]:
  _4 = *_63;
  _6 = *_65;
  _7 = c_29(D) + _62;
  _8 = *_7;
  _9 = _6 + _8;
  _10 = _4 + _9;
  *_63 = _10;
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 531608507]:
  pretmp_64 = *_63;
  pretmp_66 = *_65;
  _17 = d_27(D) + _62;
  _18 = *_17;
  _19 = _18 + pretmp_66;
  _20 = _19 + pretmp_64;
  *_63 = _20;
  if (_67 != 65536)
    goto <bb 8>; [97.98%]
  else
    goto <bb 7>; [2.02%]

  <bb 8> [local count: 520871093]:

  <bb 6> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s277 (s277, funcdef_no=31, decl_uid=3673, cgraph_uid=32, symbol_order=31)

Creating dr for *_3
analyze_innermost: success.
	base_address: a_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_30(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_30(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_65
analyze_innermost: success.
	base_address: c_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_67
analyze_innermost: success.
	base_address: d_32(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_32(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_18
analyze_innermost: success.
	base_address: e_34(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_34(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_22
analyze_innermost: success.
	base_address: b_30(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_30(D)
	Access function 0: {4B, +, 4}_1
Creating dr for *_65
analyze_innermost: success.
	base_address: c_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_67
analyze_innermost: success.
	base_address: d_32(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_32(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_29(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[10]-------------
----------[4]-------------
----------[11]-------------
----------[5]-------------
----------[6]-------------
----------[7]-------------
----------[9]-------------
Use predicate of bb#4 for bb#6
Use predicate of bb#4 for bb#6
-------------------------
_5 = b_30(D) + _2;
-------------------------
_6 = *_5;
-------------------------
_65 = c_31(D) + _2;
-------------------------
_67 = d_32(D) + _2;
-------------------------
pretmp_66 = *_65;
-------------------------
pretmp_68 = *_67;
-------------------------
_69 = pretmp_66 + pretmp_68;
-------------------------
_12 = _4 + _69;
-------------------------
*_3 = _12;
-------------------------
_14 = *_65;
-------------------------
_16 = *_67;
-------------------------
_17 = _14 + _16;
-------------------------
_18 = e_34(D) + _2;
-------------------------
_19 = *_18;
-------------------------
_20 = (sizetype) _70;
-------------------------
_21 = _20 * 4;
-------------------------
_22 = b_30(D) + _21;
-------------------------
_23 = _17 + _19;
-------------------------
*_22 = _23;
-------------------------
i_43 = PHI <0(2), _70(9)>
-------------------------
.MEM_44 = PHI <.MEM_28(D)(2), .MEM_26(9)>
-------------------------
ivtmp_58 = PHI <65535(2), ivtmp_57(9)>
-------------------------
.MEM_25 = PHI <.MEM_33(5), .MEM_44(11)>
-------------------------
.MEM_26 = PHI <.MEM_35(6), .MEM_44(10)>
Applying if-conversion

Updating SSA:
creating PHI node in block #8 for .MEM_26
Registering new PHI nodes in block #20
Registering new PHI nodes in block #21
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_43;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_29(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _70 = i_43 + 1;
Updating SSA information for statement if (_4 >= 0)
Registering new PHI nodes in block #4
Updating SSA information for statement _5 = b_30(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _65 = c_31(D) + _2;
Updating SSA information for statement _67 = d_32(D) + _2;
Updating SSA information for statement if (_6 >= 0)
Registering new PHI nodes in block #5
Updating SSA information for statement pretmp_66 = *_65;
Updating SSA information for statement pretmp_68 = *_67;
Updating SSA information for statement _69 = pretmp_66 + pretmp_68;
Updating SSA information for statement _12 = _4 + _69;
Updating SSA information for statement *_3 = _12;
Registering new PHI nodes in block #11
Registering new PHI nodes in block #6
Updating SSA information for statement _14 = *_65;
Updating SSA information for statement _16 = *_67;
Updating SSA information for statement _17 = _14 + _16;
Updating SSA information for statement _18 = e_34(D) + _2;
Updating SSA information for statement _19 = *_18;
Updating SSA information for statement _20 = (sizetype) _70;
Updating SSA information for statement _21 = _20 * 4;
Updating SSA information for statement _22 = b_30(D) + _21;
Updating SSA information for statement _23 = _17 + _19;
Updating SSA information for statement *_22 = _23;
Registering new PHI nodes in block #10
Registering new PHI nodes in block #7
Updating SSA information for statement ivtmp_57 = ivtmp_58 - 1;
Updating SSA information for statement if (ivtmp_57 != 0)
Registering new PHI nodes in block #9
Registering new PHI nodes in block #22
Registering new PHI nodes in block #12
Updating SSA information for statement _27 = (long unsigned int) i_43;
Updating SSA information for statement _24 = _1 * 4;
Updating SSA information for statement _52 = a_29(D) + _2;
Updating SSA information for statement _49 = *_3;
Updating SSA information for statement _50 = i_43 + 1;
Updating SSA information for statement if (_4 >= 0)
Registering new PHI nodes in block #14
Updating SSA information for statement _51 = b_30(D) + _2;
Updating SSA information for statement _7 = *_5;
Updating SSA information for statement _8 = c_31(D) + _2;
Updating SSA information for statement _9 = d_32(D) + _2;
Updating SSA information for statement if (_6 >= 0)
Registering new PHI nodes in block #17
Updating SSA information for statement pretmp_36 = *_65;
Updating SSA information for statement pretmp_71 = *_67;
Updating SSA information for statement _72 = pretmp_66 + pretmp_68;
Updating SSA information for statement _73 = _4 + _69;
Updating SSA information for statement *_3 = _12;
Registering new PHI nodes in block #15
Registering new PHI nodes in block #16
Updating SSA information for statement _11 = *_65;
Updating SSA information for statement _59 = *_67;
Updating SSA information for statement _61 = _14 + _16;
Updating SSA information for statement _60 = e_34(D) + _2;
Updating SSA information for statement _62 = *_18;
Updating SSA information for statement _13 = (sizetype) _70;
Updating SSA information for statement _15 = _20 * 4;
Updating SSA information for statement _37 = b_30(D) + _21;
Updating SSA information for statement _63 = _17 + _19;
Updating SSA information for statement *_22 = _23;
Registering new PHI nodes in block #13
Registering new PHI nodes in block #18
Updating SSA information for statement ivtmp_76 = ivtmp_58 - 1;
Updating SSA information for statement if (ivtmp_57 != 0)
Registering new PHI nodes in block #19
Registering new PHI nodes in block #8
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_7 -> { _6 }
_8 -> { _65 }
_9 -> { _67 }
.MEM_10 -> { .MEM_25 }
_11 -> { _14 }
_13 -> { _20 }
_15 -> { _21 }
_24 -> { _2 }
_27 -> { _1 }
pretmp_36 -> { pretmp_66 }
_37 -> { _22 }
ivtmp_38 -> { ivtmp_58 }
.MEM_39 -> { .MEM_44 }
i_40 -> { i_43 }
_49 -> { _4 }
_50 -> { _70 }
_51 -> { _5 }
_52 -> { _3 }
_59 -> { _16 }
_60 -> { _18 }
_61 -> { _17 }
_62 -> { _19 }
_63 -> { _23 }
.MEM_64 -> { .MEM_35 }
pretmp_71 -> { pretmp_68 }
_72 -> { _69 }
_73 -> { _12 }
.MEM_74 -> { .MEM_33 }
.MEM_75 -> { .MEM_26 }
ivtmp_76 -> { ivtmp_57 }
.MEM_77 -> { .MEM_26 }
Incremental SSA update started at block: 20
Number of blocks in CFG: 23
Number of blocks to update: 19 ( 83%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22


Removing basic block 10
;; basic block 10, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 11
;; basic block 11, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 6
;; basic block 6, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 7
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 9 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_43;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = a_29(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _70 = i_43 + 1;
Setting value number of _70 to _70 (changed)
Making available beyond BB3 _70 for value _70
Value numbering stmt = _5 = b_30(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _78 = _4 >= 0;
Setting value number of _78 to _78 (changed)
Making available beyond BB3 _78 for value _78
Value numbering stmt = _79 = _4 < 0;
Setting value number of _79 to _79 (changed)
Making available beyond BB3 _79 for value _79
Value numbering stmt = _6 = .MASK_LOAD (_5, 32B, _79);
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _65 = c_31(D) + _2;
Setting value number of _65 to _65 (changed)
Making available beyond BB3 _65 for value _65
Value numbering stmt = _67 = d_32(D) + _2;
Setting value number of _67 to _67 (changed)
Making available beyond BB3 _67 for value _67
Value numbering stmt = _56 = _4 >= 0;
Setting value number of _56 to _78 (changed)
Replaced _4 >= 0 with _78 in all uses of _56 = _4 >= 0;
Value numbering stmt = _55 = ~_56;
Match-and-simplified ~_56 to _79
RHS ~_56 simplified to _79
Setting value number of _55 to _79 (changed)
Replaced ~_56 with _79 in all uses of _55 = ~_56;
Value numbering stmt = _54 = _6 >= 0;
Setting value number of _54 to _54 (changed)
Making available beyond BB3 _54 for value _54
Value numbering stmt = _53 = _54 & _55;
Setting value number of _53 to _53 (changed)
Making available beyond BB3 _53 for value _53
Value numbering stmt = _48 = _4 >= 0;
Setting value number of _48 to _78 (changed)
Replaced _4 >= 0 with _78 in all uses of _48 = _4 >= 0;
Value numbering stmt = _47 = ~_48;
Match-and-simplified ~_48 to _79
RHS ~_48 simplified to _79
Setting value number of _47 to _79 (changed)
Replaced ~_48 with _79 in all uses of _47 = ~_48;
Value numbering stmt = _46 = _6 >= 0;
Setting value number of _46 to _54 (changed)
Replaced _6 >= 0 with _54 in all uses of _46 = _6 >= 0;
Value numbering stmt = _45 = ~_46;
Setting value number of _45 to _45 (changed)
Making available beyond BB3 _45 for value _45
Value numbering stmt = _42 = _45 & _47;
Setting value number of _42 to _42 (changed)
Making available beyond BB3 _42 for value _42
Value numbering stmt = pretmp_66 = .MASK_LOAD (_65, 32B, _42);
Setting value number of pretmp_66 to pretmp_66 (changed)
Making available beyond BB3 pretmp_66 for value pretmp_66
Value numbering stmt = pretmp_68 = .MASK_LOAD (_67, 32B, _42);
Setting value number of pretmp_68 to pretmp_68 (changed)
Making available beyond BB3 pretmp_68 for value pretmp_68
Value numbering stmt = _69 = pretmp_66 + pretmp_68;
Setting value number of _69 to _69 (changed)
Making available beyond BB3 _69 for value _69
Value numbering stmt = _12 = _4 + _69;
Setting value number of _12 to _12 (changed)
Making available beyond BB3 _12 for value _12
Value numbering stmt = .MASK_STORE (_3, 32B, _42, _12);
Setting value number of .MEM_33 to .MEM_33 (changed)
Value numbering stmt = _80 = _4 >= 0;
Setting value number of _80 to _78 (changed)
Replaced _4 >= 0 with _78 in all uses of _80 = _4 >= 0;
Value numbering stmt = _81 = _4 < 0;
Setting value number of _81 to _79 (changed)
Replaced _4 < 0 with _79 in all uses of _81 = _4 < 0;
Value numbering stmt = _14 = .MASK_LOAD (_65, 32B, _81);
Setting value number of _14 to _14 (changed)
Making available beyond BB3 _14 for value _14
Value numbering stmt = _16 = .MASK_LOAD (_67, 32B, _81);
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = _17 = _14 + _16;
Setting value number of _17 to _17 (changed)
Making available beyond BB3 _17 for value _17
Value numbering stmt = _18 = e_34(D) + _2;
Setting value number of _18 to _18 (changed)
Making available beyond BB3 _18 for value _18
Value numbering stmt = _19 = .MASK_LOAD (_18, 32B, _81);
Setting value number of _19 to _19 (changed)
Making available beyond BB3 _19 for value _19
Value numbering stmt = _20 = (sizetype) _70;
Setting value number of _20 to _20 (changed)
Making available beyond BB3 _20 for value _20
Value numbering stmt = _21 = _20 * 4;
Setting value number of _21 to _21 (changed)
Making available beyond BB3 _21 for value _21
Value numbering stmt = _22 = b_30(D) + _21;
Setting value number of _22 to _22 (changed)
Making available beyond BB3 _22 for value _22
Value numbering stmt = _23 = _17 + _19;
Setting value number of _23 to _23 (changed)
Making available beyond BB3 _23 for value _23
Value numbering stmt = .MASK_STORE (_22, 32B, _81, _23);
Setting value number of .MEM_35 to .MEM_35 (changed)
Value numbering stmt = ivtmp_57 = ivtmp_58 - 1;
Setting value number of ivtmp_57 to ivtmp_57 (changed)
Making available beyond BB3 ivtmp_57 for value ivtmp_57
Value numbering stmt = if (ivtmp_57 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 45 values available at 29 locations and 45 lattice elements
Removing dead stmt _81 = _4 < 0;
Removing dead stmt _80 = _4 >= 0;
Removing dead stmt _46 = _6 >= 0;
Removing dead stmt _47 = ~_48;
Removing dead stmt _48 = _4 >= 0;
Removing dead stmt _55 = ~_56;
Removing dead stmt _56 = _4 >= 0;
Delete dead stmt in bb#3
_53 = _54 & _79;
Delete dead stmt in bb#3
_78 = _4 >= 0;
Merging blocks 2 and 20
Removing basic block 13
;; basic block 13, loop depth 1
;;  pred:      
;;  succ:       18


Removing basic block 15
;; basic block 15, loop depth 1
;;  pred:      
goto <bb 16>; [100.00%]
;;  succ:       16


fix_loop_structure: fixing up loops for function
s277 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int _7;
  int * _8;
  int * _9;
  int _11;
  int _12;
  sizetype _13;
  int _14;
  sizetype _15;
  int _16;
  int _17;
  int * _18;
  int _19;
  sizetype _20;
  sizetype _21;
  int * _22;
  int _23;
  long unsigned int _24;
  long unsigned int _27;
  int pretmp_36;
  int * _37;
  unsigned int ivtmp_38;
  _Bool _41;
  _Bool _42;
  _Bool _45;
  int _49;
  int _50;
  int * _51;
  int * _52;
  _Bool _54;
  unsigned int ivtmp_57;
  unsigned int ivtmp_58;
  int _59;
  int * _60;
  int _61;
  int _62;
  int _63;
  int * _65;
  int pretmp_66;
  int * _67;
  int pretmp_68;
  int _69;
  int _70;
  int pretmp_71;
  int _72;
  int _73;
  unsigned int ivtmp_76;
  _Bool _79;

  <bb 2> [local count: 10737416]:
  _41 = .LOOP_VECTORIZED (1, 2);
  if (_41 != 0)
    goto <bb 21>; [100.00%]
  else
    goto <bb 22>; [100.00%]

  <bb 21> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_43 = PHI <_70(9), 0(21)>
  # ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
  _1 = (long unsigned int) i_43;
  _2 = _1 * 4;
  _3 = a_29(D) + _2;
  _4 = *_3;
  _70 = i_43 + 1;
  _5 = b_30(D) + _2;
  _79 = _4 < 0;
  _6 = .MASK_LOAD (_5, 32B, _79);
  _65 = c_31(D) + _2;
  _67 = d_32(D) + _2;
  _54 = _6 >= 0;
  _45 = ~_54;
  _42 = _45 & _79;
  pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  pretmp_68 = .MASK_LOAD (_67, 32B, _42);
  _69 = pretmp_66 + pretmp_68;
  _12 = _4 + _69;
  .MASK_STORE (_3, 32B, _42, _12);
  _14 = .MASK_LOAD (_65, 32B, _79);
  _16 = .MASK_LOAD (_67, 32B, _79);
  _17 = _14 + _16;
  _18 = e_34(D) + _2;
  _19 = .MASK_LOAD (_18, 32B, _79);
  _20 = (sizetype) _70;
  _21 = _20 * 4;
  _22 = b_30(D) + _21;
  _23 = _17 + _19;
  .MASK_STORE (_22, 32B, _79, _23);
  ivtmp_57 = ivtmp_58 - 1;
  if (ivtmp_57 != 0)
    goto <bb 9>; [98.99%]
  else
    goto <bb 8>; [1.01%]

  <bb 9> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 22> [local count: 10737416]:

  <bb 12> [local count: 1063004409]:
  # i_40 = PHI <_50(19), 0(22)>
  # ivtmp_38 = PHI <ivtmp_76(19), 65535(22)>
  _27 = (long unsigned int) i_40;
  _24 = _27 * 4;
  _52 = a_29(D) + _24;
  _49 = *_52;
  _50 = i_40 + 1;
  if (_49 >= 0)
    goto <bb 18>; [42.57%]
  else
    goto <bb 14>; [57.43%]

  <bb 14> [local count: 610483431]:
  _51 = b_30(D) + _24;
  _7 = *_51;
  _8 = c_31(D) + _24;
  _9 = d_32(D) + _24;
  if (_7 >= 0)
    goto <bb 16>; [42.57%]
  else
    goto <bb 17>; [57.43%]

  <bb 17> [local count: 350600633]:
  pretmp_36 = *_8;
  pretmp_71 = *_9;
  _72 = pretmp_36 + pretmp_71;
  _73 = _49 + _72;
  *_52 = _73;

  <bb 16> [local count: 610483431]:
  _11 = *_8;
  _59 = *_9;
  _61 = _11 + _59;
  _60 = e_34(D) + _24;
  _62 = *_60;
  _13 = (sizetype) _50;
  _15 = _13 * 4;
  _37 = b_30(D) + _15;
  _63 = _61 + _62;
  *_37 = _63;

  <bb 18> [local count: 1063004409]:
  ivtmp_76 = ivtmp_38 - 1;
  if (ivtmp_76 != 0)
    goto <bb 19>; [98.99%]
  else
    goto <bb 8>; [1.01%]

  <bb 19> [local count: 1052266996]:
  goto <bb 12>; [100.00%]

  <bb 8> [local count: 10737416]:
  return;

}



;; Function s278 (s278, funcdef_no=32, decl_uid=3691, cgraph_uid=33, symbol_order=32)

Creating dr for *_3
analyze_innermost: success.
	base_address: a_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_33(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_76
analyze_innermost: success.
	base_address: d_34(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_34(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_79
analyze_innermost: success.
	base_address: e_36(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_36(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_78
analyze_innermost: success.
	base_address: b_35(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_35(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_78
analyze_innermost: success.
	base_address: b_35(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_35(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_81
analyze_innermost: success.
	base_address: c_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_81
analyze_innermost: success.
	base_address: c_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_81
analyze_innermost: success.
	base_address: c_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_78
analyze_innermost: success.
	base_address: b_35(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_35(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_76
analyze_innermost: success.
	base_address: d_34(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_34(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_33(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[5]-------------
----------[6]-------------
----------[8]-------------
-------------------------
_16 = *_81;
-------------------------
_17 = pretmp_77 - _16;
-------------------------
_20 = _17 + pretmp_80;
-------------------------
*_81 = _20;
-------------------------
pretmp_72 = *_78;
-------------------------
_8 = *_78;
-------------------------
_9 = pretmp_77 - _8;
-------------------------
_12 = _9 + pretmp_80;
-------------------------
*_78 = _12;
-------------------------
pretmp_74 = *_81;
-------------------------
i_48 = PHI <0(2), i_41(8)>
-------------------------
.MEM_49 = PHI <.MEM_32(D)(2), .MEM_40(8)>
-------------------------
ivtmp_66 = PHI <65536(2), ivtmp_65(8)>
-------------------------
.MEM_30 = PHI <.MEM_37(5), .MEM_39(4)>
-------------------------
prephitmp_73 = PHI <_12(5), pretmp_72(4)>
-------------------------
prephitmp_75 = PHI <pretmp_74(5), _20(4)>
Applying if-conversion

Updating SSA:
creating PHI node in block #7 for .MEM_40
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_48;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_33(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _76 = d_34(D) + _2;
Updating SSA information for statement pretmp_77 = *_76;
Updating SSA information for statement _78 = b_35(D) + _2;
Updating SSA information for statement _79 = e_36(D) + _2;
Updating SSA information for statement pretmp_80 = *_79;
Updating SSA information for statement _81 = c_38(D) + _2;
Updating SSA information for statement if (_4 > 0)
Registering new PHI nodes in block #5
Updating SSA information for statement _8 = *_78;
Updating SSA information for statement _9 = pretmp_77 - _8;
Updating SSA information for statement _12 = _9 + pretmp_80;
Updating SSA information for statement *_78 = _12;
Updating SSA information for statement pretmp_74 = *_81;
Registering new PHI nodes in block #4
Updating SSA information for statement _16 = *_81;
Updating SSA information for statement _17 = pretmp_77 - _16;
Updating SSA information for statement _20 = _17 + pretmp_80;
Updating SSA information for statement *_81 = _20;
Updating SSA information for statement pretmp_72 = *_78;
Registering new PHI nodes in block #6
Updating SSA information for statement _25 = prephitmp_73 + prephitmp_75;
Updating SSA information for statement _27 = *_76;
Updating SSA information for statement _28 = _25 + _27;
Updating SSA information for statement *_3 = _28;
Updating SSA information for statement i_41 = i_48 + 1;
Updating SSA information for statement ivtmp_65 = ivtmp_66 - 1;
Updating SSA information for statement if (ivtmp_65 != 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _52 = (long unsigned int) i_48;
Updating SSA information for statement _51 = _1 * 4;
Updating SSA information for statement _50 = a_33(D) + _2;
Updating SSA information for statement _47 = *_3;
Updating SSA information for statement _46 = d_34(D) + _2;
Updating SSA information for statement pretmp_45 = *_76;
Updating SSA information for statement _44 = b_35(D) + _2;
Updating SSA information for statement _43 = e_36(D) + _2;
Updating SSA information for statement pretmp_42 = *_79;
Updating SSA information for statement _31 = c_38(D) + _2;
Updating SSA information for statement if (_4 > 0)
Registering new PHI nodes in block #10
Updating SSA information for statement _29 = *_78;
Updating SSA information for statement _60 = pretmp_77 - _8;
Updating SSA information for statement _53 = _9 + pretmp_80;
Updating SSA information for statement *_78 = _12;
Updating SSA information for statement pretmp_59 = *_81;
Registering new PHI nodes in block #11
Updating SSA information for statement _58 = *_81;
Updating SSA information for statement _57 = pretmp_77 - _16;
Updating SSA information for statement _56 = _17 + pretmp_80;
Updating SSA information for statement *_81 = _20;
Updating SSA information for statement pretmp_5 = *_78;
Registering new PHI nodes in block #12
Updating SSA information for statement _11 = prephitmp_73 + prephitmp_75;
Updating SSA information for statement _70 = *_76;
Updating SSA information for statement _13 = _25 + _27;
Updating SSA information for statement *_3 = _28;
Updating SSA information for statement i_15 = i_48 + 1;
Updating SSA information for statement ivtmp_18 = ivtmp_66 - 1;
Updating SSA information for statement if (ivtmp_65 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #7
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

pretmp_5 -> { pretmp_72 }
.MEM_6 -> { .MEM_30 }
prephitmp_7 -> { prephitmp_73 }
prephitmp_10 -> { prephitmp_75 }
_11 -> { _25 }
_13 -> { _28 }
.MEM_14 -> { .MEM_40 }
i_15 -> { i_41 }
ivtmp_18 -> { ivtmp_65 }
.MEM_19 -> { .MEM_40 }
_29 -> { _8 }
_31 -> { _81 }
pretmp_42 -> { pretmp_80 }
_43 -> { _79 }
_44 -> { _78 }
pretmp_45 -> { pretmp_77 }
_46 -> { _76 }
_47 -> { _4 }
_50 -> { _3 }
_51 -> { _2 }
_52 -> { _1 }
_53 -> { _12 }
.MEM_54 -> { .MEM_37 }
.MEM_55 -> { .MEM_39 }
_56 -> { _20 }
_57 -> { _17 }
_58 -> { _16 }
pretmp_59 -> { pretmp_74 }
_60 -> { _9 }
ivtmp_61 -> { ivtmp_66 }
.MEM_62 -> { .MEM_49 }
i_63 -> { i_48 }
_70 -> { _27 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


new phi replacement stmt
prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
new phi replacement stmt
prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 6
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 8 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_48;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = a_33(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _76 = d_34(D) + _2;
Setting value number of _76 to _76 (changed)
Making available beyond BB3 _76 for value _76
Value numbering stmt = pretmp_77 = *_76;
Setting value number of pretmp_77 to pretmp_77 (changed)
Making available beyond BB3 pretmp_77 for value pretmp_77
Value numbering stmt = _78 = b_35(D) + _2;
Setting value number of _78 to _78 (changed)
Making available beyond BB3 _78 for value _78
Value numbering stmt = _79 = e_36(D) + _2;
Setting value number of _79 to _79 (changed)
Making available beyond BB3 _79 for value _79
Value numbering stmt = pretmp_80 = *_79;
Setting value number of pretmp_80 to pretmp_80 (changed)
Making available beyond BB3 pretmp_80 for value pretmp_80
Value numbering stmt = _81 = c_38(D) + _2;
Setting value number of _81 to _81 (changed)
Making available beyond BB3 _81 for value _81
Value numbering stmt = _16 = *_81;
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = _17 = pretmp_77 - _16;
Setting value number of _17 to _17 (changed)
Making available beyond BB3 _17 for value _17
Value numbering stmt = _20 = _17 + pretmp_80;
Setting value number of _20 to _20 (changed)
Making available beyond BB3 _20 for value _20
Value numbering stmt = _68 = _4 > 0;
Setting value number of _68 to _68 (changed)
Making available beyond BB3 _68 for value _68
Value numbering stmt = .MASK_STORE (_81, 32B, _68, _20);
Setting value number of .MEM_39 to .MEM_39 (changed)
Value numbering stmt = pretmp_72 = *_78;
Setting value number of pretmp_72 to pretmp_72 (changed)
Making available beyond BB3 pretmp_72 for value pretmp_72
Value numbering stmt = _8 = *_78;
Setting value number of _8 to pretmp_72 (changed)
Replaced *_78 with pretmp_72 in all uses of _8 = *_78;
Value numbering stmt = _9 = pretmp_77 - _8;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _12 = _9 + pretmp_80;
Setting value number of _12 to _12 (changed)
Making available beyond BB3 _12 for value _12
Value numbering stmt = _67 = _4 > 0;
Setting value number of _67 to _68 (changed)
Replaced _4 > 0 with _68 in all uses of _67 = _4 > 0;
Value numbering stmt = _69 = _4 <= 0;
Setting value number of _69 to _69 (changed)
Making available beyond BB3 _69 for value _69
Value numbering stmt = .MASK_STORE (_78, 32B, _69, _12);
Setting value number of .MEM_37 to .MEM_37 (changed)
Value numbering stmt = pretmp_74 = *_81;
Setting value number of pretmp_74 to pretmp_74 (changed)
Making available beyond BB3 pretmp_74 for value pretmp_74
Value numbering stmt = prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
Setting value number of prephitmp_73 to prephitmp_73 (changed)
Making available beyond BB3 prephitmp_73 for value prephitmp_73
Value numbering stmt = prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
Setting value number of prephitmp_75 to prephitmp_75 (changed)
Making available beyond BB3 prephitmp_75 for value prephitmp_75
Value numbering stmt = _25 = prephitmp_73 + prephitmp_75;
Setting value number of _25 to _25 (changed)
Making available beyond BB3 _25 for value _25
Value numbering stmt = _27 = *_76;
Setting value number of _27 to _27 (changed)
Making available beyond BB3 _27 for value _27
Value numbering stmt = _28 = _25 + _27;
Setting value number of _28 to _28 (changed)
Making available beyond BB3 _28 for value _28
Value numbering stmt = *_3 = _28;
No store match
Value numbering store *_3 to _28
Setting value number of .MEM_40 to .MEM_40 (changed)
Value numbering stmt = i_41 = i_48 + 1;
Setting value number of i_41 to i_41 (changed)
Making available beyond BB3 i_41 for value i_41
Value numbering stmt = ivtmp_65 = ivtmp_66 - 1;
Setting value number of ivtmp_65 to ivtmp_65 (changed)
Making available beyond BB3 ivtmp_65 for value ivtmp_65
Value numbering stmt = if (ivtmp_65 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 38 values available at 26 locations and 38 lattice elements
Removing dead stmt _67 = _4 > 0;
Removing dead stmt _8 = *_78;
Merging blocks 2 and 14
fix_loop_structure: fixing up loops for function
s278 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int pretmp_5;
  int prephitmp_7;
  int _9;
  int prephitmp_10;
  int _11;
  int _12;
  int _13;
  int _16;
  int _17;
  unsigned int ivtmp_18;
  int _20;
  int _25;
  int _27;
  int _28;
  int _29;
  int * _31;
  int pretmp_42;
  int * _43;
  int * _44;
  int pretmp_45;
  int * _46;
  int _47;
  int * _50;
  long unsigned int _51;
  long unsigned int _52;
  int _53;
  int _56;
  int _57;
  int _58;
  int pretmp_59;
  int _60;
  unsigned int ivtmp_61;
  _Bool _64;
  unsigned int ivtmp_65;
  unsigned int ivtmp_66;
  _Bool _68;
  _Bool _69;
  int _70;
  int pretmp_72;
  int prephitmp_73;
  int pretmp_74;
  int prephitmp_75;
  int * _76;
  int pretmp_77;
  int * _78;
  int * _79;
  int pretmp_80;
  int * _81;

  <bb 2> [local count: 10737414]:
  _64 = .LOOP_VECTORIZED (1, 2);
  if (_64 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_48 = PHI <i_41(8), 0(15)>
  # ivtmp_66 = PHI <ivtmp_65(8), 65536(15)>
  _1 = (long unsigned int) i_48;
  _2 = _1 * 4;
  _3 = a_33(D) + _2;
  _4 = *_3;
  _76 = d_34(D) + _2;
  pretmp_77 = *_76;
  _78 = b_35(D) + _2;
  _79 = e_36(D) + _2;
  pretmp_80 = *_79;
  _81 = c_38(D) + _2;
  _16 = *_81;
  _17 = pretmp_77 - _16;
  _20 = _17 + pretmp_80;
  _68 = _4 > 0;
  .MASK_STORE (_81, 32B, _68, _20);
  pretmp_72 = *_78;
  _9 = pretmp_77 - pretmp_72;
  _12 = _9 + pretmp_80;
  _69 = _4 <= 0;
  .MASK_STORE (_78, 32B, _69, _12);
  pretmp_74 = *_81;
  prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
  prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
  _25 = prephitmp_73 + prephitmp_75;
  _27 = *_76;
  _28 = _25 + _27;
  *_3 = _28;
  i_41 = i_48 + 1;
  ivtmp_65 = ivtmp_66 - 1;
  if (ivtmp_65 != 0)
    goto <bb 8>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 8> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 1063004408]:
  # i_63 = PHI <i_15(13), 0(16)>
  # ivtmp_61 = PHI <ivtmp_18(13), 65536(16)>
  _52 = (long unsigned int) i_63;
  _51 = _52 * 4;
  _50 = a_33(D) + _51;
  _47 = *_50;
  _46 = d_34(D) + _51;
  pretmp_45 = *_46;
  _44 = b_35(D) + _51;
  _43 = e_36(D) + _51;
  pretmp_42 = *_43;
  _31 = c_38(D) + _51;
  if (_47 > 0)
    goto <bb 11>; [59.00%]
  else
    goto <bb 10>; [41.00%]

  <bb 11> [local count: 627172605]:
  _58 = *_31;
  _57 = pretmp_45 - _58;
  _56 = _57 + pretmp_42;
  *_31 = _56;
  pretmp_5 = *_44;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 435831803]:
  _29 = *_44;
  _60 = pretmp_45 - _29;
  _53 = _60 + pretmp_42;
  *_44 = _53;
  pretmp_59 = *_31;

  <bb 12> [local count: 1063004410]:
  # prephitmp_7 = PHI <_53(10), pretmp_5(11)>
  # prephitmp_10 = PHI <pretmp_59(10), _56(11)>
  _11 = prephitmp_7 + prephitmp_10;
  _70 = *_46;
  _13 = _11 + _70;
  *_50 = _13;
  i_15 = i_63 + 1;
  ivtmp_18 = ivtmp_61 - 1;
  if (ivtmp_18 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 13> [local count: 1052266997]:
  goto <bb 9>; [100.00%]

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s279 (s279, funcdef_no=33, decl_uid=3709, cgraph_uid=34, symbol_order=33)

Creating dr for *_3
analyze_innermost: success.
	base_address: a_37(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_37(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_84
analyze_innermost: success.
	base_address: d_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_37(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_37(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_84
analyze_innermost: success.
	base_address: d_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_15
analyze_innermost: success.
	base_address: e_42(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_42(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_19
analyze_innermost: success.
	base_address: e_42(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_42(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_84
analyze_innermost: success.
	base_address: d_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_37(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_37(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[5]-------------
----------[6]-------------
----------[7]-------------
----------[8]-------------
----------[10]-------------
-------------------------
_19 = e_42(D) + _2;
-------------------------
_20 = *_19;
-------------------------
_22 = *_86;
-------------------------
_23 = _20 - _22;
-------------------------
_24 = _20 + _23;
-------------------------
*_86 = _24;
-------------------------
pretmp_78 = *_85;
-------------------------
_6 = *_84;
-------------------------
_7 = _6 * _6;
-------------------------
_9 = *_85;
-------------------------
_10 = _7 - _9;
-------------------------
*_85 = _10;
-------------------------
_11 = *_3;
-------------------------
pretmp_81 = *_86;
-------------------------
_13 = *_86;
-------------------------
_14 = *_84;
-------------------------
_15 = e_42(D) + _2;
-------------------------
_16 = *_15;
-------------------------
_17 = _14 + _16;
-------------------------
_18 = _13 + _17;
-------------------------
*_86 = _18;
-------------------------
pretmp_79 = *_85;
-------------------------
i_55 = PHI <0(2), i_46(10)>
-------------------------
.MEM_56 = PHI <.MEM_36(D)(2), .MEM_45(10)>
-------------------------
ivtmp_71 = PHI <65536(2), ivtmp_70(10)>
-------------------------
.MEM_34 = PHI <.MEM_44(4), .MEM_43(7), .MEM_40(6)>
-------------------------
prephitmp_80 = PHI <pretmp_78(4), pretmp_79(7), _10(6)>
-------------------------
prephitmp_82 = PHI <_24(4), _18(7), pretmp_81(6)>
Applying if-conversion

Updating SSA:
creating PHI node in block #9 for .MEM_45
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_55;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_37(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _84 = d_38(D) + _2;
Updating SSA information for statement _85 = b_39(D) + _2;
Updating SSA information for statement _86 = c_41(D) + _2;
Updating SSA information for statement if (_4 > 0)
Registering new PHI nodes in block #5
Updating SSA information for statement _6 = *_84;
Updating SSA information for statement _7 = _6 * _6;
Updating SSA information for statement _9 = *_85;
Updating SSA information for statement _10 = _7 - _9;
Updating SSA information for statement *_85 = _10;
Updating SSA information for statement _11 = *_3;
Updating SSA information for statement if (_10 <= _11)
Registering new PHI nodes in block #7
Updating SSA information for statement _13 = *_86;
Updating SSA information for statement _14 = *_84;
Updating SSA information for statement _15 = e_42(D) + _2;
Updating SSA information for statement _16 = *_15;
Updating SSA information for statement _17 = _14 + _16;
Updating SSA information for statement _18 = _13 + _17;
Updating SSA information for statement *_86 = _18;
Updating SSA information for statement pretmp_79 = *_85;
Registering new PHI nodes in block #6
Updating SSA information for statement pretmp_81 = *_86;
Registering new PHI nodes in block #4
Updating SSA information for statement _19 = e_42(D) + _2;
Updating SSA information for statement _20 = *_19;
Updating SSA information for statement _22 = *_86;
Updating SSA information for statement _23 = _20 - _22;
Updating SSA information for statement _24 = _20 + _23;
Updating SSA information for statement *_86 = _24;
Updating SSA information for statement pretmp_78 = *_85;
Registering new PHI nodes in block #8
Updating SSA information for statement _29 = prephitmp_80 + prephitmp_82;
Updating SSA information for statement _31 = *_84;
Updating SSA information for statement _32 = _29 + _31;
Updating SSA information for statement *_3 = _32;
Updating SSA information for statement i_46 = i_55 + 1;
Updating SSA information for statement ivtmp_70 = ivtmp_71 - 1;
Updating SSA information for statement if (ivtmp_70 != 0)
Registering new PHI nodes in block #10
Registering new PHI nodes in block #20
Registering new PHI nodes in block #11
Updating SSA information for statement _47 = (long unsigned int) i_55;
Updating SSA information for statement _35 = _1 * 4;
Updating SSA information for statement _33 = a_37(D) + _2;
Updating SSA information for statement _65 = *_3;
Updating SSA information for statement _59 = d_38(D) + _2;
Updating SSA information for statement _60 = b_39(D) + _2;
Updating SSA information for statement _64 = c_41(D) + _2;
Updating SSA information for statement if (_4 > 0)
Registering new PHI nodes in block #12
Updating SSA information for statement _63 = *_84;
Updating SSA information for statement _62 = _6 * _6;
Updating SSA information for statement _61 = *_85;
Updating SSA information for statement _5 = _7 - _9;
Updating SSA information for statement *_85 = _10;
Updating SSA information for statement _83 = *_3;
Updating SSA information for statement if (_10 <= _11)
Registering new PHI nodes in block #14
Updating SSA information for statement _76 = *_86;
Updating SSA information for statement _21 = *_84;
Updating SSA information for statement _72 = e_42(D) + _2;
Updating SSA information for statement _74 = *_15;
Updating SSA information for statement _73 = _14 + _16;
Updating SSA information for statement _75 = _13 + _17;
Updating SSA information for statement *_86 = _18;
Updating SSA information for statement pretmp_25 = *_85;
Registering new PHI nodes in block #13
Updating SSA information for statement pretmp_12 = *_86;
Registering new PHI nodes in block #15
Updating SSA information for statement _26 = e_42(D) + _2;
Updating SSA information for statement _27 = *_19;
Updating SSA information for statement _28 = *_86;
Updating SSA information for statement _30 = _20 - _22;
Updating SSA information for statement _87 = _20 + _23;
Updating SSA information for statement *_86 = _24;
Updating SSA information for statement pretmp_89 = *_85;
Registering new PHI nodes in block #16
Updating SSA information for statement _93 = prephitmp_80 + prephitmp_82;
Updating SSA information for statement _94 = *_84;
Updating SSA information for statement _95 = _29 + _31;
Updating SSA information for statement *_3 = _32;
Updating SSA information for statement i_97 = i_55 + 1;
Updating SSA information for statement ivtmp_98 = ivtmp_71 - 1;
Updating SSA information for statement if (ivtmp_70 != 0)
Registering new PHI nodes in block #17
Registering new PHI nodes in block #9
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_5 -> { _10 }
.MEM_8 -> { .MEM_40 }
pretmp_12 -> { pretmp_81 }
_21 -> { _14 }
pretmp_25 -> { pretmp_79 }
_26 -> { _19 }
_27 -> { _20 }
_28 -> { _22 }
_30 -> { _23 }
_33 -> { _3 }
_35 -> { _2 }
_47 -> { _1 }
ivtmp_48 -> { ivtmp_71 }
.MEM_49 -> { .MEM_56 }
i_50 -> { i_55 }
_59 -> { _84 }
_60 -> { _85 }
_61 -> { _9 }
_62 -> { _7 }
_63 -> { _6 }
_64 -> { _86 }
_65 -> { _4 }
_72 -> { _15 }
_73 -> { _17 }
_74 -> { _16 }
_75 -> { _18 }
_76 -> { _13 }
.MEM_77 -> { .MEM_43 }
_83 -> { _11 }
_87 -> { _24 }
.MEM_88 -> { .MEM_44 }
pretmp_89 -> { pretmp_78 }
.MEM_90 -> { .MEM_34 }
prephitmp_91 -> { prephitmp_80 }
prephitmp_92 -> { prephitmp_82 }
_93 -> { _29 }
_94 -> { _31 }
_95 -> { _32 }
.MEM_96 -> { .MEM_45 }
i_97 -> { i_46 }
ivtmp_98 -> { ivtmp_70 }
.MEM_99 -> { .MEM_45 }
Incremental SSA update started at block: 18
Number of blocks in CFG: 21
Number of blocks to update: 17 ( 81%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 20


new extended phi replacement stmt
prephitmp_80 = _66 ? _10 : _ifc__101;
new extended phi replacement stmt
prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 6
;; basic block 6, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 7
;; basic block 7, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 8
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 10 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_55;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = a_37(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _84 = d_38(D) + _2;
Setting value number of _84 to _84 (changed)
Making available beyond BB3 _84 for value _84
Value numbering stmt = _85 = b_39(D) + _2;
Setting value number of _85 to _85 (changed)
Making available beyond BB3 _85 for value _85
Value numbering stmt = _86 = c_41(D) + _2;
Setting value number of _86 to _86 (changed)
Making available beyond BB3 _86 for value _86
Value numbering stmt = _19 = e_42(D) + _2;
Setting value number of _19 to _19 (changed)
Making available beyond BB3 _19 for value _19
Value numbering stmt = _104 = _4 > 0;
Setting value number of _104 to _104 (changed)
Making available beyond BB3 _104 for value _104
Value numbering stmt = _20 = .MASK_LOAD (_19, 32B, _104);
Setting value number of _20 to _20 (changed)
Making available beyond BB3 _20 for value _20
Value numbering stmt = _22 = .MASK_LOAD (_86, 32B, _104);
Setting value number of _22 to _22 (changed)
Making available beyond BB3 _22 for value _22
Value numbering stmt = _23 = _20 - _22;
Setting value number of _23 to _23 (changed)
Making available beyond BB3 _23 for value _23
Value numbering stmt = _24 = _20 + _23;
Setting value number of _24 to _24 (changed)
Making available beyond BB3 _24 for value _24
Value numbering stmt = .MASK_STORE (_86, 32B, _104, _24);
Setting value number of .MEM_44 to .MEM_44 (changed)
Value numbering stmt = pretmp_78 = .MASK_LOAD (_85, 32B, _104);
Setting value number of pretmp_78 to pretmp_78 (changed)
Making available beyond BB3 pretmp_78 for value pretmp_78
Value numbering stmt = _6 = *_84;
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _7 = _6 * _6;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _105 = _4 > 0;
Setting value number of _105 to _104 (changed)
Replaced _4 > 0 with _104 in all uses of _105 = _4 > 0;
Value numbering stmt = _106 = _4 <= 0;
Setting value number of _106 to _106 (changed)
Making available beyond BB3 _106 for value _106
Value numbering stmt = _9 = .MASK_LOAD (_85, 32B, _106);
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = _7 - _9;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = .MASK_STORE (_85, 32B, _106, _10);
Setting value number of .MEM_40 to .MEM_40 (changed)
Value numbering stmt = _11 = *_3;
Setting value number of _11 to _11 (changed)
Making available beyond BB3 _11 for value _11
Value numbering stmt = _69 = _4 > 0;
Setting value number of _69 to _104 (changed)
Replaced _4 > 0 with _104 in all uses of _69 = _4 > 0;
Value numbering stmt = _68 = ~_69;
Match-and-simplified ~_69 to _106
RHS ~_69 simplified to _106
Setting value number of _68 to _106 (changed)
Replaced ~_69 with _106 in all uses of _68 = ~_69;
Value numbering stmt = _67 = _10 <= _11;
Setting value number of _67 to _67 (changed)
Making available beyond BB3 _67 for value _67
Value numbering stmt = _66 = _67 & _68;
Setting value number of _66 to _66 (changed)
Making available beyond BB3 _66 for value _66
Value numbering stmt = pretmp_81 = .MASK_LOAD (_86, 32B, _66);
Setting value number of pretmp_81 to pretmp_81 (changed)
Making available beyond BB3 pretmp_81 for value pretmp_81
Value numbering stmt = _58 = _4 > 0;
Setting value number of _58 to _104 (changed)
Replaced _4 > 0 with _104 in all uses of _58 = _4 > 0;
Value numbering stmt = _57 = ~_58;
Match-and-simplified ~_58 to _106
RHS ~_58 simplified to _106
Setting value number of _57 to _106 (changed)
Replaced ~_58 with _106 in all uses of _57 = ~_58;
Value numbering stmt = _54 = _10 <= _11;
Setting value number of _54 to _67 (changed)
Replaced _10 <= _11 with _67 in all uses of _54 = _10 <= _11;
Value numbering stmt = _53 = ~_54;
Setting value number of _53 to _53 (changed)
Making available beyond BB3 _53 for value _53
Value numbering stmt = _52 = _53 & _57;
Setting value number of _52 to _52 (changed)
Making available beyond BB3 _52 for value _52
Value numbering stmt = _13 = .MASK_LOAD (_86, 32B, _52);
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = _14 = *_84;
Setting value number of _14 to _14 (changed)
Making available beyond BB3 _14 for value _14
Value numbering stmt = _15 = e_42(D) + _2;
Setting value number of _15 to _19 (changed)
Replaced e_42(D) + _2 with _19 in all uses of _15 = e_42(D) + _2;
Value numbering stmt = _16 = .MASK_LOAD (_15, 32B, _52);
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = _17 = _14 + _16;
Setting value number of _17 to _17 (changed)
Making available beyond BB3 _17 for value _17
Value numbering stmt = _18 = _13 + _17;
Setting value number of _18 to _18 (changed)
Making available beyond BB3 _18 for value _18
Value numbering stmt = .MASK_STORE (_86, 32B, _52, _18);
Setting value number of .MEM_43 to .MEM_43 (changed)
Value numbering stmt = pretmp_79 = .MASK_LOAD (_85, 32B, _52);
Setting value number of pretmp_79 to pretmp_79 (changed)
Making available beyond BB3 pretmp_79 for value pretmp_79
Value numbering stmt = _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
Setting value number of _ifc__100 to _ifc__100 (changed)
Making available beyond BB3 _ifc__100 for value _ifc__100
Value numbering stmt = _ifc__101 = _52 ? pretmp_79 : _ifc__100;
Setting value number of _ifc__101 to _ifc__101 (changed)
Making available beyond BB3 _ifc__101 for value _ifc__101
Value numbering stmt = prephitmp_80 = _66 ? _10 : _ifc__101;
Setting value number of prephitmp_80 to prephitmp_80 (changed)
Making available beyond BB3 prephitmp_80 for value prephitmp_80
Value numbering stmt = _ifc__102 = _4 > 0 ? _24 : _18;
Setting value number of _ifc__102 to _ifc__102 (changed)
Making available beyond BB3 _ifc__102 for value _ifc__102
Value numbering stmt = _ifc__103 = _52 ? _18 : _ifc__102;
Setting value number of _ifc__103 to _ifc__103 (changed)
Making available beyond BB3 _ifc__103 for value _ifc__103
Value numbering stmt = prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
Setting value number of prephitmp_82 to prephitmp_82 (changed)
Making available beyond BB3 prephitmp_82 for value prephitmp_82
Value numbering stmt = _29 = prephitmp_80 + prephitmp_82;
Setting value number of _29 to _29 (changed)
Making available beyond BB3 _29 for value _29
Value numbering stmt = _31 = *_84;
Setting value number of _31 to _31 (changed)
Making available beyond BB3 _31 for value _31
Value numbering stmt = _32 = _29 + _31;
Setting value number of _32 to _32 (changed)
Making available beyond BB3 _32 for value _32
Value numbering stmt = *_3 = _32;
No store match
Value numbering store *_3 to _32
Setting value number of .MEM_45 to .MEM_45 (changed)
Value numbering stmt = i_46 = i_55 + 1;
Setting value number of i_46 to i_46 (changed)
Making available beyond BB3 i_46 for value i_46
Value numbering stmt = ivtmp_70 = ivtmp_71 - 1;
Setting value number of ivtmp_70 to ivtmp_70 (changed)
Making available beyond BB3 ivtmp_70 for value ivtmp_70
Value numbering stmt = if (ivtmp_70 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 60 values available at 42 locations and 60 lattice elements
Removing dead stmt _15 = e_42(D) + _2;
Removing dead stmt _54 = _10 <= _11;
Removing dead stmt _57 = ~_58;
Removing dead stmt _58 = _4 > 0;
Removing dead stmt _68 = ~_69;
Removing dead stmt _69 = _4 > 0;
Removing dead stmt _105 = _4 > 0;
Merging blocks 2 and 18
fix_loop_structure: fixing up loops for function
s279 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _9;
  int _10;
  int _11;
  int pretmp_12;
  int _13;
  int _14;
  int _16;
  int _17;
  int _18;
  int * _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _24;
  int pretmp_25;
  int * _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  int _32;
  int * _33;
  long unsigned int _35;
  long unsigned int _47;
  unsigned int ivtmp_48;
  _Bool _51;
  _Bool _52;
  _Bool _53;
  int * _59;
  int * _60;
  int _61;
  int _62;
  int _63;
  int * _64;
  int _65;
  _Bool _66;
  _Bool _67;
  unsigned int ivtmp_70;
  unsigned int ivtmp_71;
  int * _72;
  int _73;
  int _74;
  int _75;
  int _76;
  int pretmp_78;
  int pretmp_79;
  int prephitmp_80;
  int pretmp_81;
  int prephitmp_82;
  int _83;
  int * _84;
  int * _85;
  int * _86;
  int _87;
  int pretmp_89;
  int prephitmp_91;
  int prephitmp_92;
  int _93;
  int _94;
  int _95;
  unsigned int ivtmp_98;
  int _ifc__100;
  int _ifc__101;
  int _ifc__102;
  int _ifc__103;
  _Bool _104;
  _Bool _106;

  <bb 2> [local count: 10737416]:
  _51 = .LOOP_VECTORIZED (1, 2);
  if (_51 != 0)
    goto <bb 19>; [100.00%]
  else
    goto <bb 20>; [100.00%]

  <bb 19> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_55 = PHI <i_46(10), 0(19)>
  # ivtmp_71 = PHI <ivtmp_70(10), 65536(19)>
  _1 = (long unsigned int) i_55;
  _2 = _1 * 4;
  _3 = a_37(D) + _2;
  _4 = *_3;
  _84 = d_38(D) + _2;
  _85 = b_39(D) + _2;
  _86 = c_41(D) + _2;
  _19 = e_42(D) + _2;
  _104 = _4 > 0;
  _20 = .MASK_LOAD (_19, 32B, _104);
  _22 = .MASK_LOAD (_86, 32B, _104);
  _23 = _20 - _22;
  _24 = _20 + _23;
  .MASK_STORE (_86, 32B, _104, _24);
  pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  _6 = *_84;
  _7 = _6 * _6;
  _106 = _4 <= 0;
  _9 = .MASK_LOAD (_85, 32B, _106);
  _10 = _7 - _9;
  .MASK_STORE (_85, 32B, _106, _10);
  _11 = *_3;
  _67 = _10 <= _11;
  _66 = _67 & _106;
  pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  _53 = ~_67;
  _52 = _53 & _106;
  _13 = .MASK_LOAD (_86, 32B, _52);
  _14 = *_84;
  _16 = .MASK_LOAD (_19, 32B, _52);
  _17 = _14 + _16;
  _18 = _13 + _17;
  .MASK_STORE (_86, 32B, _52, _18);
  pretmp_79 = .MASK_LOAD (_85, 32B, _52);
  _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
  _ifc__101 = _52 ? pretmp_79 : _ifc__100;
  prephitmp_80 = _66 ? _10 : _ifc__101;
  _ifc__102 = _4 > 0 ? _24 : _18;
  _ifc__103 = _52 ? _18 : _ifc__102;
  prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
  _29 = prephitmp_80 + prephitmp_82;
  _31 = *_84;
  _32 = _29 + _31;
  *_3 = _32;
  i_46 = i_55 + 1;
  ivtmp_70 = ivtmp_71 - 1;
  if (ivtmp_70 != 0)
    goto <bb 10>; [98.99%]
  else
    goto <bb 9>; [1.01%]

  <bb 10> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 20> [local count: 10737416]:

  <bb 11> [local count: 1063004409]:
  # i_50 = PHI <i_97(17), 0(20)>
  # ivtmp_48 = PHI <ivtmp_98(17), 65536(20)>
  _47 = (long unsigned int) i_50;
  _35 = _47 * 4;
  _33 = a_37(D) + _35;
  _65 = *_33;
  _59 = d_38(D) + _35;
  _60 = b_39(D) + _35;
  _64 = c_41(D) + _35;
  if (_65 > 0)
    goto <bb 15>; [42.57%]
  else
    goto <bb 12>; [57.43%]

  <bb 15> [local count: 452520978]:
  _26 = e_42(D) + _35;
  _27 = *_26;
  _28 = *_64;
  _30 = _27 - _28;
  _87 = _27 + _30;
  *_64 = _87;
  pretmp_89 = *_60;
  goto <bb 16>; [100.00%]

  <bb 12> [local count: 610483431]:
  _63 = *_59;
  _62 = _63 * _63;
  _61 = *_60;
  _5 = _62 - _61;
  *_60 = _5;
  _83 = *_33;
  if (_5 <= _83)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 305241715]:
  _76 = *_64;
  _21 = *_59;
  _72 = e_42(D) + _35;
  _74 = *_72;
  _73 = _21 + _74;
  _75 = _76 + _73;
  *_64 = _75;
  pretmp_25 = *_60;
  goto <bb 16>; [100.00%]

  <bb 13> [local count: 305241716]:
  pretmp_12 = *_64;

  <bb 16> [local count: 1063004409]:
  # prephitmp_91 = PHI <_5(13), pretmp_25(14), pretmp_89(15)>
  # prephitmp_92 = PHI <pretmp_12(13), _75(14), _87(15)>
  _93 = prephitmp_91 + prephitmp_92;
  _94 = *_59;
  _95 = _93 + _94;
  *_33 = _95;
  i_97 = i_50 + 1;
  ivtmp_98 = ivtmp_48 - 1;
  if (ivtmp_98 != 0)
    goto <bb 17>; [98.99%]
  else
    goto <bb 9>; [1.01%]

  <bb 17> [local count: 1052266996]:
  goto <bb 11>; [100.00%]

  <bb 9> [local count: 10737416]:
  return;

}



;; Function s1279 (s1279, funcdef_no=34, decl_uid=3727, cgraph_uid=35, symbol_order=34)

Creating dr for *_3
analyze_innermost: success.
	base_address: a_19(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_19(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_21(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_9
analyze_innermost: success.
	base_address: d_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_11
analyze_innermost: success.
	base_address: e_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_21(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[11]-------------
----------[5]-------------
----------[12]-------------
----------[9]-------------
----------[6]-------------
----------[8]-------------
-------------------------
_5 = b_20(D) + _2;
-------------------------
_6 = *_5;
-------------------------
_7 = c_21(D) + _2;
-------------------------
_8 = *_7;
-------------------------
_9 = d_22(D) + _2;
-------------------------
_10 = *_9;
-------------------------
_11 = e_23(D) + _2;
-------------------------
_12 = *_11;
-------------------------
_13 = _10 + _12;
-------------------------
_14 = _8 + _13;
-------------------------
*_7 = _14;
-------------------------
i_31 = PHI <0(2), i_25(8)>
-------------------------
.MEM_32 = PHI <.MEM_18(D)(2), .MEM_16(8)>
-------------------------
ivtmp_36 = PHI <65536(2), ivtmp_35(8)>
-------------------------
.MEM_16 = PHI <.MEM_24(5), .MEM_32(9)>
Applying if-conversion

Updating SSA:
creating PHI node in block #7 for .MEM_16
Registering new PHI nodes in block #21
Registering new PHI nodes in block #22
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_31;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_19(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement if (_4 < 0)
Registering new PHI nodes in block #11
Registering new PHI nodes in block #4
Updating SSA information for statement _5 = b_20(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement if (_4 < _6)
Registering new PHI nodes in block #12
Registering new PHI nodes in block #5
Updating SSA information for statement _7 = c_21(D) + _2;
Updating SSA information for statement _8 = *_7;
Updating SSA information for statement _9 = d_22(D) + _2;
Updating SSA information for statement _10 = *_9;
Updating SSA information for statement _11 = e_23(D) + _2;
Updating SSA information for statement _12 = *_11;
Updating SSA information for statement _13 = _10 + _12;
Updating SSA information for statement _14 = _8 + _13;
Updating SSA information for statement *_7 = _14;
Registering new PHI nodes in block #9
Registering new PHI nodes in block #6
Updating SSA information for statement i_25 = i_31 + 1;
Updating SSA information for statement ivtmp_35 = ivtmp_36 - 1;
Updating SSA information for statement if (ivtmp_35 != 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #23
Registering new PHI nodes in block #13
Updating SSA information for statement _42 = (long unsigned int) i_31;
Updating SSA information for statement _43 = _1 * 4;
Updating SSA information for statement _44 = a_19(D) + _2;
Updating SSA information for statement _45 = *_3;
Updating SSA information for statement if (_4 < 0)
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Updating SSA information for statement _46 = b_20(D) + _2;
Updating SSA information for statement _47 = *_5;
Updating SSA information for statement if (_4 < _6)
Registering new PHI nodes in block #16
Registering new PHI nodes in block #17
Updating SSA information for statement _48 = c_21(D) + _2;
Updating SSA information for statement _49 = *_7;
Updating SSA information for statement _50 = d_22(D) + _2;
Updating SSA information for statement _51 = *_9;
Updating SSA information for statement _52 = e_23(D) + _2;
Updating SSA information for statement _53 = *_11;
Updating SSA information for statement _54 = _10 + _12;
Updating SSA information for statement _55 = _8 + _13;
Updating SSA information for statement *_7 = _14;
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Updating SSA information for statement i_58 = i_31 + 1;
Updating SSA information for statement ivtmp_59 = ivtmp_36 - 1;
Updating SSA information for statement if (ivtmp_35 != 0)
Registering new PHI nodes in block #20
Registering new PHI nodes in block #7
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_39 -> { i_31 }
.MEM_40 -> { .MEM_32 }
ivtmp_41 -> { ivtmp_36 }
_42 -> { _1 }
_43 -> { _2 }
_44 -> { _3 }
_45 -> { _4 }
_46 -> { _5 }
_47 -> { _6 }
_48 -> { _7 }
_49 -> { _8 }
_50 -> { _9 }
_51 -> { _10 }
_52 -> { _11 }
_53 -> { _12 }
_54 -> { _13 }
_55 -> { _14 }
.MEM_56 -> { .MEM_24 }
.MEM_57 -> { .MEM_16 }
i_58 -> { i_25 }
ivtmp_59 -> { ivtmp_35 }
.MEM_60 -> { .MEM_16 }
Incremental SSA update started at block: 21
Number of blocks in CFG: 24
Number of blocks to update: 19 ( 79%)
Affected blocks: 3 4 5 6 7 8 9 11 12 13 14 15 16 17 18 19 20 22 23


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 11
;; basic block 11, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 12
;; basic block 12, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 9
;; basic block 9, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 6
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 8 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_31;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = a_19(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = b_20(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _61 = _4 < 0;
Setting value number of _61 to _61 (changed)
Making available beyond BB3 _61 for value _61
Value numbering stmt = _6 = .MASK_LOAD (_5, 32B, _61);
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _34 = _4 < 0;
Setting value number of _34 to _61 (changed)
Replaced _4 < 0 with _61 in all uses of _34 = _4 < 0;
Value numbering stmt = _33 = _4 < _6;
Setting value number of _33 to _33 (changed)
Making available beyond BB3 _33 for value _33
Value numbering stmt = _30 = _33 & _34;
Setting value number of _30 to _30 (changed)
Making available beyond BB3 _30 for value _30
Value numbering stmt = _7 = c_21(D) + _2;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _8 = .MASK_LOAD (_7, 32B, _30);
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = d_22(D) + _2;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = .MASK_LOAD (_9, 32B, _30);
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = _11 = e_23(D) + _2;
Setting value number of _11 to _11 (changed)
Making available beyond BB3 _11 for value _11
Value numbering stmt = _12 = .MASK_LOAD (_11, 32B, _30);
Setting value number of _12 to _12 (changed)
Making available beyond BB3 _12 for value _12
Value numbering stmt = _13 = _10 + _12;
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = _14 = _8 + _13;
Setting value number of _14 to _14 (changed)
Making available beyond BB3 _14 for value _14
Value numbering stmt = .MASK_STORE (_7, 32B, _30, _14);
Setting value number of .MEM_24 to .MEM_24 (changed)
Value numbering stmt = _17 = _4 < 0;
Setting value number of _17 to _61 (changed)
Replaced _4 < 0 with _61 in all uses of _17 = _4 < 0;
Value numbering stmt = _15 = _4 < _6;
Setting value number of _15 to _33 (changed)
Replaced _4 < _6 with _33 in all uses of _15 = _4 < _6;
Value numbering stmt = _29 = ~_15;
Setting value number of _29 to _29 (changed)
Making available beyond BB3 _29 for value _29
Value numbering stmt = _28 = _17 & _29;
Setting value number of _28 to _28 (changed)
Making available beyond BB3 _28 for value _28
Value numbering stmt = _27 = _4 < 0;
Setting value number of _27 to _61 (changed)
Replaced _4 < 0 with _61 in all uses of _27 = _4 < 0;
Value numbering stmt = _26 = ~_27;
Setting value number of _26 to _26 (changed)
Making available beyond BB3 _26 for value _26
Value numbering stmt = _37 = _26 | _28;
Setting value number of _37 to _37 (changed)
Making available beyond BB3 _37 for value _37
Value numbering stmt = i_25 = i_31 + 1;
Setting value number of i_25 to i_25 (changed)
Making available beyond BB3 i_25 for value i_25
Value numbering stmt = ivtmp_35 = ivtmp_36 - 1;
Setting value number of ivtmp_35 to ivtmp_35 (changed)
Making available beyond BB3 ivtmp_35 for value ivtmp_35
Value numbering stmt = if (ivtmp_35 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 35 values available at 23 locations and 35 lattice elements
Removing dead stmt _27 = _4 < 0;
Removing dead stmt _15 = _4 < _6;
Removing dead stmt _17 = _4 < 0;
Removing dead stmt _34 = _4 < 0;
Delete dead stmt in bb#3
_37 = _26 | _28;
Delete dead stmt in bb#3
_26 = ~_61;
Delete dead stmt in bb#3
_28 = _29 & _61;
Delete dead stmt in bb#3
_29 = ~_33;
Merging blocks 2 and 21
Removing basic block 14
;; basic block 14, loop depth 1
;;  pred:      
goto <bb 18>; [100.00%]
;;  succ:       18


Removing basic block 16
;; basic block 16, loop depth 1
;;  pred:      
goto <bb 18>; [100.00%]
;;  succ:       18


Removing basic block 18
;; basic block 18, loop depth 1
;;  pred:      
goto <bb 19>; [100.00%]
;;  succ:       19


fix_loop_structure: fixing up loops for function
s1279 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int * _9;
  int _10;
  int * _11;
  int _12;
  int _13;
  int _14;
  _Bool _30;
  _Bool _33;
  unsigned int ivtmp_35;
  unsigned int ivtmp_36;
  _Bool _38;
  unsigned int ivtmp_41;
  long unsigned int _42;
  long unsigned int _43;
  int * _44;
  int _45;
  int * _46;
  int _47;
  int * _48;
  int _49;
  int * _50;
  int _51;
  int * _52;
  int _53;
  int _54;
  int _55;
  unsigned int ivtmp_59;
  _Bool _61;

  <bb 2> [local count: 10737414]:
  _38 = .LOOP_VECTORIZED (1, 2);
  if (_38 != 0)
    goto <bb 22>; [100.00%]
  else
    goto <bb 23>; [100.00%]

  <bb 22> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_31 = PHI <i_25(8), 0(22)>
  # ivtmp_36 = PHI <ivtmp_35(8), 65536(22)>
  _1 = (long unsigned int) i_31;
  _2 = _1 * 4;
  _3 = a_19(D) + _2;
  _4 = *_3;
  _5 = b_20(D) + _2;
  _61 = _4 < 0;
  _6 = .MASK_LOAD (_5, 32B, _61);
  _33 = _4 < _6;
  _30 = _33 & _61;
  _7 = c_21(D) + _2;
  _8 = .MASK_LOAD (_7, 32B, _30);
  _9 = d_22(D) + _2;
  _10 = .MASK_LOAD (_9, 32B, _30);
  _11 = e_23(D) + _2;
  _12 = .MASK_LOAD (_11, 32B, _30);
  _13 = _10 + _12;
  _14 = _8 + _13;
  .MASK_STORE (_7, 32B, _30, _14);
  i_25 = i_31 + 1;
  ivtmp_35 = ivtmp_36 - 1;
  if (ivtmp_35 != 0)
    goto <bb 8>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 8> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 23> [local count: 10737414]:

  <bb 13> [local count: 1063004408]:
  # i_39 = PHI <i_58(20), 0(23)>
  # ivtmp_41 = PHI <ivtmp_59(20), 65536(23)>
  _42 = (long unsigned int) i_39;
  _43 = _42 * 4;
  _44 = a_19(D) + _43;
  _45 = *_44;
  if (_45 < 0)
    goto <bb 15>; [41.00%]
  else
    goto <bb 19>; [59.00%]

  <bb 15> [local count: 435831803]:
  _46 = b_20(D) + _43;
  _47 = *_46;
  if (_45 < _47)
    goto <bb 17>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 17> [local count: 217915902]:
  _48 = c_21(D) + _43;
  _49 = *_48;
  _50 = d_22(D) + _43;
  _51 = *_50;
  _52 = e_23(D) + _43;
  _53 = *_52;
  _54 = _51 + _53;
  _55 = _49 + _54;
  *_48 = _55;

  <bb 19> [local count: 1063004410]:
  i_58 = i_39 + 1;
  ivtmp_59 = ivtmp_41 - 1;
  if (ivtmp_59 != 0)
    goto <bb 20>; [98.99%]
  else
    goto <bb 7>; [1.01%]

  <bb 20> [local count: 1052266997]:
  goto <bb 13>; [100.00%]

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s2710 (s2710, funcdef_no=35, decl_uid=3745, cgraph_uid=36, symbol_order=35)

Creating dr for *_3
analyze_innermost: success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_21(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_28
analyze_innermost: success.
	base_address: e_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_21(D)
	Access function 0: {0B, +, 4}_1
Creating dr for MEM[(int *)c_24(D) + 131072B]
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 131072
	step: 0
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 256
	base_object: MEM[(int *)c_24(D) + 131072B]
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_28
analyze_innermost: success.
	base_address: e_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_34
analyze_innermost: success.
	base_address: d_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: d_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: d_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[5]-------------
----------[6]-------------
----------[7]-------------
----------[8]-------------
----------[10]-------------
-------------------------
_7 = d_26(D) + _2;
-------------------------
_8 = *_7;
-------------------------
_9 = _6 + _8;
-------------------------
_10 = _4 + _9;
-------------------------
*_3 = _10;
-------------------------
_12 = *_64;
-------------------------
_13 = *_7;
-------------------------
_14 = _13 * 2;
-------------------------
_15 = _12 + _14;
-------------------------
*_64 = _15;
-------------------------
_28 = e_22(D) + _2;
-------------------------
_29 = *_28;
-------------------------
_30 = _4 + _29;
-------------------------
_31 = _29 + _30;
-------------------------
*_5 = _31;
-------------------------
_32 = MEM[(int *)c_24(D) + 131072B];
-------------------------
_33 = *_3;
-------------------------
_34 = d_26(D) + _2;
-------------------------
_35 = *_34;
-------------------------
_36 = _33 + _35;
-------------------------
_38 = _35 + _36;
-------------------------
*_64 = _38;
-------------------------
_40 = *_64;
-------------------------
_41 = *_28;
-------------------------
_42 = _41 * 2;
-------------------------
_43 = _40 + _42;
-------------------------
*_64 = _43;
-------------------------
i_60 = PHI <0(2), i_46(10)>
-------------------------
.MEM_61 = PHI <.MEM_19(D)(2), .MEM_17(10)>
-------------------------
ivtmp_62 = PHI <65536(2), ivtmp_59(10)>
-------------------------
.MEM_17 = PHI <.MEM_45(4), .MEM_27(6), .MEM_25(7)>
Applying if-conversion

Updating SSA:
creating PHI node in block #9 for .MEM_17
Registering new PHI nodes in block #18
Registering new PHI nodes in block #19
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_60;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_20(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _5 = b_21(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _64 = c_24(D) + _2;
Updating SSA information for statement if (_4 > _6)
Registering new PHI nodes in block #5
Updating SSA information for statement _28 = e_22(D) + _2;
Updating SSA information for statement _29 = *_28;
Updating SSA information for statement _30 = _4 + _29;
Updating SSA information for statement _31 = _29 + _30;
Updating SSA information for statement *_5 = _31;
Updating SSA information for statement _32 = MEM[(int *)c_24(D) + 131072B];
Updating SSA information for statement if (_32 > 0)
Registering new PHI nodes in block #7
Updating SSA information for statement _40 = *_64;
Updating SSA information for statement _41 = *_28;
Updating SSA information for statement _42 = _41 * 2;
Updating SSA information for statement _43 = _40 + _42;
Updating SSA information for statement *_64 = _43;
Registering new PHI nodes in block #6
Updating SSA information for statement _33 = *_3;
Updating SSA information for statement _34 = d_26(D) + _2;
Updating SSA information for statement _35 = *_34;
Updating SSA information for statement _36 = _33 + _35;
Updating SSA information for statement _38 = _35 + _36;
Updating SSA information for statement *_64 = _38;
Registering new PHI nodes in block #4
Updating SSA information for statement _7 = d_26(D) + _2;
Updating SSA information for statement _8 = *_7;
Updating SSA information for statement _9 = _6 + _8;
Updating SSA information for statement _10 = _4 + _9;
Updating SSA information for statement *_3 = _10;
Updating SSA information for statement _12 = *_64;
Updating SSA information for statement _13 = *_7;
Updating SSA information for statement _14 = _13 * 2;
Updating SSA information for statement _15 = _12 + _14;
Updating SSA information for statement *_64 = _15;
Registering new PHI nodes in block #8
Updating SSA information for statement i_46 = i_60 + 1;
Updating SSA information for statement ivtmp_59 = ivtmp_62 - 1;
Updating SSA information for statement if (ivtmp_59 != 0)
Registering new PHI nodes in block #10
Registering new PHI nodes in block #20
Registering new PHI nodes in block #11
Updating SSA information for statement _49 = (long unsigned int) i_60;
Updating SSA information for statement _63 = _1 * 4;
Updating SSA information for statement _39 = a_20(D) + _2;
Updating SSA information for statement _37 = *_3;
Updating SSA information for statement _11 = b_21(D) + _2;
Updating SSA information for statement _65 = *_5;
Updating SSA information for statement _66 = c_24(D) + _2;
Updating SSA information for statement if (_4 > _6)
Registering new PHI nodes in block #12
Updating SSA information for statement _67 = e_22(D) + _2;
Updating SSA information for statement _68 = *_28;
Updating SSA information for statement _69 = _4 + _29;
Updating SSA information for statement _70 = _29 + _30;
Updating SSA information for statement *_5 = _31;
Updating SSA information for statement _72 = MEM[(int *)c_24(D) + 131072B];
Updating SSA information for statement if (_32 > 0)
Registering new PHI nodes in block #13
Updating SSA information for statement _73 = *_64;
Updating SSA information for statement _74 = *_28;
Updating SSA information for statement _75 = _41 * 2;
Updating SSA information for statement _76 = _40 + _42;
Updating SSA information for statement *_64 = _43;
Registering new PHI nodes in block #14
Updating SSA information for statement _78 = *_3;
Updating SSA information for statement _79 = d_26(D) + _2;
Updating SSA information for statement _80 = *_34;
Updating SSA information for statement _81 = _33 + _35;
Updating SSA information for statement _82 = _35 + _36;
Updating SSA information for statement *_64 = _38;
Registering new PHI nodes in block #15
Updating SSA information for statement _84 = d_26(D) + _2;
Updating SSA information for statement _85 = *_7;
Updating SSA information for statement _86 = _6 + _8;
Updating SSA information for statement _87 = _4 + _9;
Updating SSA information for statement *_3 = _10;
Updating SSA information for statement _89 = *_64;
Updating SSA information for statement _90 = *_7;
Updating SSA information for statement _91 = _13 * 2;
Updating SSA information for statement _92 = _12 + _14;
Updating SSA information for statement *_64 = _15;
Registering new PHI nodes in block #16
Updating SSA information for statement i_95 = i_60 + 1;
Updating SSA information for statement ivtmp_96 = ivtmp_62 - 1;
Updating SSA information for statement if (ivtmp_59 != 0)
Registering new PHI nodes in block #17
Registering new PHI nodes in block #9
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_11 -> { _5 }
_37 -> { _4 }
_39 -> { _3 }
_49 -> { _1 }
ivtmp_52 -> { ivtmp_62 }
.MEM_53 -> { .MEM_61 }
i_56 -> { i_60 }
_63 -> { _2 }
_65 -> { _6 }
_66 -> { _64 }
_67 -> { _28 }
_68 -> { _29 }
_69 -> { _30 }
_70 -> { _31 }
.MEM_71 -> { .MEM_23 }
_72 -> { _32 }
_73 -> { _40 }
_74 -> { _41 }
_75 -> { _42 }
_76 -> { _43 }
.MEM_77 -> { .MEM_25 }
_78 -> { _33 }
_79 -> { _34 }
_80 -> { _35 }
_81 -> { _36 }
_82 -> { _38 }
.MEM_83 -> { .MEM_27 }
_84 -> { _7 }
_85 -> { _8 }
_86 -> { _9 }
_87 -> { _10 }
.MEM_88 -> { .MEM_44 }
_89 -> { _12 }
_90 -> { _13 }
_91 -> { _14 }
_92 -> { _15 }
.MEM_93 -> { .MEM_45 }
.MEM_94 -> { .MEM_17 }
i_95 -> { i_46 }
ivtmp_96 -> { ivtmp_59 }
.MEM_97 -> { .MEM_17 }
Incremental SSA update started at block: 18
Number of blocks in CFG: 21
Number of blocks to update: 17 ( 81%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 20


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 5
;; basic block 5, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 6
;; basic block 6, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 7
;; basic block 7, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 8
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 10 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_60;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = a_20(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = b_21(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _6 = *_5;
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _64 = c_24(D) + _2;
Setting value number of _64 to _64 (changed)
Making available beyond BB3 _64 for value _64
Value numbering stmt = _7 = d_26(D) + _2;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _98 = _4 > _6;
Setting value number of _98 to _98 (changed)
Making available beyond BB3 _98 for value _98
Value numbering stmt = _8 = .MASK_LOAD (_7, 32B, _98);
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = _6 + _8;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = _4 + _9;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = .MASK_STORE (_3, 32B, _98, _10);
Setting value number of .MEM_44 to .MEM_44 (changed)
Value numbering stmt = _12 = .MASK_LOAD (_64, 32B, _98);
Setting value number of _12 to _12 (changed)
Making available beyond BB3 _12 for value _12
Value numbering stmt = _13 = .MASK_LOAD (_7, 32B, _98);
Setting value number of _13 to _13 (changed)
Making available beyond BB3 _13 for value _13
Value numbering stmt = _14 = _13 * 2;
Setting value number of _14 to _14 (changed)
Making available beyond BB3 _14 for value _14
Value numbering stmt = _15 = _12 + _14;
Setting value number of _15 to _15 (changed)
Making available beyond BB3 _15 for value _15
Value numbering stmt = .MASK_STORE (_64, 32B, _98, _15);
Setting value number of .MEM_45 to .MEM_45 (changed)
Value numbering stmt = _28 = e_22(D) + _2;
Setting value number of _28 to _28 (changed)
Making available beyond BB3 _28 for value _28
Value numbering stmt = _99 = _4 > _6;
Setting value number of _99 to _98 (changed)
Replaced _4 > _6 with _98 in all uses of _99 = _4 > _6;
Value numbering stmt = _100 = _4 <= _6;
Setting value number of _100 to _100 (changed)
Making available beyond BB3 _100 for value _100
Value numbering stmt = _29 = .MASK_LOAD (_28, 32B, _100);
Setting value number of _29 to _29 (changed)
Making available beyond BB3 _29 for value _29
Value numbering stmt = _30 = _4 + _29;
Setting value number of _30 to _30 (changed)
Making available beyond BB3 _30 for value _30
Value numbering stmt = _31 = _29 + _30;
Setting value number of _31 to _31 (changed)
Making available beyond BB3 _31 for value _31
Value numbering stmt = .MASK_STORE (_5, 32B, _100, _31);
Setting value number of .MEM_23 to .MEM_23 (changed)
Value numbering stmt = _101 = &MEM[(int *)c_24(D) + 131072B];
Setting value number of _101 to _101 (changed)
Making available beyond BB3 _101 for value _101
Value numbering stmt = _32 = .MASK_LOAD (_101, 32B, _100);
Setting value number of _32 to _32 (changed)
Making available beyond BB3 _32 for value _32
Value numbering stmt = _58 = _4 > _6;
Setting value number of _58 to _98 (changed)
Replaced _4 > _6 with _98 in all uses of _58 = _4 > _6;
Value numbering stmt = _54 = ~_58;
Match-and-simplified ~_58 to _100
RHS ~_58 simplified to _100
Setting value number of _54 to _100 (changed)
Replaced ~_58 with _100 in all uses of _54 = ~_58;
Value numbering stmt = _51 = _32 > 0;
Setting value number of _51 to _51 (changed)
Making available beyond BB3 _51 for value _51
Value numbering stmt = _50 = _51 & _54;
Setting value number of _50 to _50 (changed)
Making available beyond BB3 _50 for value _50
Value numbering stmt = _33 = *_3;
Setting value number of _33 to _33 (changed)
Making available beyond BB3 _33 for value _33
Value numbering stmt = _34 = d_26(D) + _2;
Setting value number of _34 to _7 (changed)
Replaced d_26(D) + _2 with _7 in all uses of _34 = d_26(D) + _2;
Value numbering stmt = _35 = .MASK_LOAD (_34, 32B, _50);
Setting value number of _35 to _35 (changed)
Making available beyond BB3 _35 for value _35
Value numbering stmt = _36 = _33 + _35;
Setting value number of _36 to _36 (changed)
Making available beyond BB3 _36 for value _36
Value numbering stmt = _38 = _35 + _36;
Setting value number of _38 to _38 (changed)
Making available beyond BB3 _38 for value _38
Value numbering stmt = .MASK_STORE (_64, 32B, _50, _38);
Setting value number of .MEM_27 to .MEM_27 (changed)
Value numbering stmt = _48 = _4 > _6;
Setting value number of _48 to _98 (changed)
Replaced _4 > _6 with _98 in all uses of _48 = _4 > _6;
Value numbering stmt = _47 = ~_48;
Match-and-simplified ~_48 to _100
RHS ~_48 simplified to _100
Setting value number of _47 to _100 (changed)
Replaced ~_48 with _100 in all uses of _47 = ~_48;
Value numbering stmt = _18 = _32 > 0;
Setting value number of _18 to _51 (changed)
Replaced _32 > 0 with _51 in all uses of _18 = _32 > 0;
Value numbering stmt = _16 = ~_18;
Setting value number of _16 to _16 (changed)
Making available beyond BB3 _16 for value _16
Value numbering stmt = _57 = _16 & _47;
Setting value number of _57 to _57 (changed)
Making available beyond BB3 _57 for value _57
Value numbering stmt = _40 = .MASK_LOAD (_64, 32B, _57);
Setting value number of _40 to _40 (changed)
Making available beyond BB3 _40 for value _40
Value numbering stmt = _41 = .MASK_LOAD (_28, 32B, _57);
Setting value number of _41 to _41 (changed)
Making available beyond BB3 _41 for value _41
Value numbering stmt = _42 = _41 * 2;
Setting value number of _42 to _42 (changed)
Making available beyond BB3 _42 for value _42
Value numbering stmt = _43 = _40 + _42;
Setting value number of _43 to _43 (changed)
Making available beyond BB3 _43 for value _43
Value numbering stmt = .MASK_STORE (_64, 32B, _57, _43);
Setting value number of .MEM_25 to .MEM_25 (changed)
Value numbering stmt = i_46 = i_60 + 1;
Setting value number of i_46 to i_46 (changed)
Making available beyond BB3 i_46 for value i_46
Value numbering stmt = ivtmp_59 = ivtmp_62 - 1;
Setting value number of ivtmp_59 to ivtmp_59 (changed)
Making available beyond BB3 ivtmp_59 for value ivtmp_59
Value numbering stmt = if (ivtmp_59 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 56 values available at 37 locations and 56 lattice elements
Removing dead stmt _18 = _32 > 0;
Removing dead stmt _47 = ~_48;
Removing dead stmt _48 = _4 > _6;
Removing dead stmt _34 = d_26(D) + _2;
Removing dead stmt _54 = ~_58;
Removing dead stmt _58 = _4 > _6;
Removing dead stmt _99 = _4 > _6;
Merging blocks 2 and 18
fix_loop_structure: fixing up loops for function
s2710 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  int * _11;
  int _12;
  int _13;
  int _14;
  int _15;
  _Bool _16;
  int * _28;
  int _29;
  int _30;
  int _31;
  int _32;
  int _33;
  int _35;
  int _36;
  int _37;
  int _38;
  int * _39;
  int _40;
  int _41;
  int _42;
  int _43;
  long unsigned int _49;
  _Bool _50;
  _Bool _51;
  unsigned int ivtmp_52;
  _Bool _55;
  _Bool _57;
  unsigned int ivtmp_59;
  unsigned int ivtmp_62;
  long unsigned int _63;
  int * _64;
  int _65;
  int * _66;
  int * _67;
  int _68;
  int _69;
  int _70;
  int _72;
  int _73;
  int _74;
  int _75;
  int _76;
  int _78;
  int * _79;
  int _80;
  int _81;
  int _82;
  int * _84;
  int _85;
  int _86;
  int _87;
  int _89;
  int _90;
  int _91;
  int _92;
  unsigned int ivtmp_96;
  _Bool _98;
  _Bool _100;
  int * _101;

  <bb 2> [local count: 10737414]:
  _55 = .LOOP_VECTORIZED (1, 2);
  if (_55 != 0)
    goto <bb 19>; [100.00%]
  else
    goto <bb 20>; [100.00%]

  <bb 19> [local count: 10737414]:

  <bb 3> [local count: 1063004410]:
  # i_60 = PHI <i_46(10), 0(19)>
  # ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
  _1 = (long unsigned int) i_60;
  _2 = _1 * 4;
  _3 = a_20(D) + _2;
  _4 = *_3;
  _5 = b_21(D) + _2;
  _6 = *_5;
  _64 = c_24(D) + _2;
  _7 = d_26(D) + _2;
  _98 = _4 > _6;
  _8 = .MASK_LOAD (_7, 32B, _98);
  _9 = _6 + _8;
  _10 = _4 + _9;
  .MASK_STORE (_3, 32B, _98, _10);
  _12 = .MASK_LOAD (_64, 32B, _98);
  _13 = .MASK_LOAD (_7, 32B, _98);
  _14 = _13 * 2;
  _15 = _12 + _14;
  .MASK_STORE (_64, 32B, _98, _15);
  _28 = e_22(D) + _2;
  _100 = _4 <= _6;
  _29 = .MASK_LOAD (_28, 32B, _100);
  _30 = _4 + _29;
  _31 = _29 + _30;
  .MASK_STORE (_5, 32B, _100, _31);
  _101 = &MEM[(int *)c_24(D) + 131072B];
  _32 = .MASK_LOAD (_101, 32B, _100);
  _51 = _32 > 0;
  _50 = _51 & _100;
  _33 = *_3;
  _35 = .MASK_LOAD (_7, 32B, _50);
  _36 = _33 + _35;
  _38 = _35 + _36;
  .MASK_STORE (_64, 32B, _50, _38);
  _16 = ~_51;
  _57 = _16 & _100;
  _40 = .MASK_LOAD (_64, 32B, _57);
  _41 = .MASK_LOAD (_28, 32B, _57);
  _42 = _41 * 2;
  _43 = _40 + _42;
  .MASK_STORE (_64, 32B, _57, _43);
  i_46 = i_60 + 1;
  ivtmp_59 = ivtmp_62 - 1;
  if (ivtmp_59 != 0)
    goto <bb 10>; [98.99%]
  else
    goto <bb 9>; [1.01%]

  <bb 10> [local count: 1052266997]:
  goto <bb 3>; [100.00%]

  <bb 20> [local count: 10737414]:

  <bb 11> [local count: 1063004408]:
  # i_56 = PHI <i_95(17), 0(20)>
  # ivtmp_52 = PHI <ivtmp_96(17), 65536(20)>
  _49 = (long unsigned int) i_56;
  _63 = _49 * 4;
  _39 = a_20(D) + _63;
  _37 = *_39;
  _11 = b_21(D) + _63;
  _65 = *_11;
  _66 = c_24(D) + _63;
  if (_37 > _65)
    goto <bb 15>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 15> [local count: 531502204]:
  _84 = d_26(D) + _63;
  _85 = *_84;
  _86 = _65 + _85;
  _87 = _37 + _86;
  *_39 = _87;
  _89 = *_66;
  _90 = *_84;
  _91 = _90 * 2;
  _92 = _89 + _91;
  *_66 = _92;
  goto <bb 16>; [100.00%]

  <bb 12> [local count: 531502204]:
  _67 = e_22(D) + _63;
  _68 = *_67;
  _69 = _37 + _68;
  _70 = _68 + _69;
  *_11 = _70;
  _72 = MEM[(int *)c_24(D) + 131072B];
  if (_72 > 0)
    goto <bb 14>; [59.00%]
  else
    goto <bb 13>; [41.00%]

  <bb 14> [local count: 313586302]:
  _78 = *_39;
  _79 = d_26(D) + _63;
  _80 = *_79;
  _81 = _78 + _80;
  _82 = _80 + _81;
  *_66 = _82;
  goto <bb 16>; [100.00%]

  <bb 13> [local count: 217915902]:
  _73 = *_66;
  _74 = *_67;
  _75 = _74 * 2;
  _76 = _73 + _75;
  *_66 = _76;

  <bb 16> [local count: 1063004410]:
  i_95 = i_56 + 1;
  ivtmp_96 = ivtmp_52 - 1;
  if (ivtmp_96 != 0)
    goto <bb 17>; [98.99%]
  else
    goto <bb 9>; [1.01%]

  <bb 17> [local count: 1052266997]:
  goto <bb 11>; [100.00%]

  <bb 9> [local count: 10737416]:
  return;

}



;; Function s2711 (s2711, funcdef_no=36, decl_uid=3763, cgraph_uid=37, symbol_order=36)

Creating dr for *_3
analyze_innermost: success.
	base_address: b_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_15(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_17(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[8]-------------
----------[5]-------------
----------[7]-------------
-------------------------
_5 = a_16(D) + _2;
-------------------------
_6 = *_5;
-------------------------
_7 = c_17(D) + _2;
-------------------------
_8 = *_7;
-------------------------
_9 = _4 + _8;
-------------------------
_10 = _6 + _9;
-------------------------
*_5 = _10;
-------------------------
i_25 = PHI <0(2), i_19(7)>
-------------------------
.MEM_26 = PHI <.MEM_14(D)(2), .MEM_12(7)>
-------------------------
ivtmp_30 = PHI <65536(2), ivtmp_29(7)>
-------------------------
.MEM_12 = PHI <.MEM_18(4), .MEM_26(8)>
Applying if-conversion

Updating SSA:
creating PHI node in block #6 for .MEM_12
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_25;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = b_15(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement if (_4 != 0)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #4
Updating SSA information for statement _5 = a_16(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _7 = c_17(D) + _2;
Updating SSA information for statement _8 = *_7;
Updating SSA information for statement _9 = _4 + _8;
Updating SSA information for statement _10 = _6 + _9;
Updating SSA information for statement *_5 = _10;
Registering new PHI nodes in block #5
Updating SSA information for statement i_19 = i_25 + 1;
Updating SSA information for statement ivtmp_29 = ivtmp_30 - 1;
Updating SSA information for statement if (ivtmp_29 != 0)
Registering new PHI nodes in block #7
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _11 = (long unsigned int) i_25;
Updating SSA information for statement _23 = _1 * 4;
Updating SSA information for statement _22 = b_15(D) + _2;
Updating SSA information for statement _21 = *_3;
Updating SSA information for statement if (_4 != 0)
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Updating SSA information for statement _20 = a_16(D) + _2;
Updating SSA information for statement _31 = *_5;
Updating SSA information for statement _32 = c_17(D) + _2;
Updating SSA information for statement _33 = *_7;
Updating SSA information for statement _34 = _4 + _8;
Updating SSA information for statement _35 = _6 + _9;
Updating SSA information for statement *_5 = _10;
Registering new PHI nodes in block #12
Updating SSA information for statement i_38 = i_25 + 1;
Updating SSA information for statement ivtmp_39 = ivtmp_30 - 1;
Updating SSA information for statement if (ivtmp_29 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #6
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_11 -> { _1 }
ivtmp_13 -> { ivtmp_30 }
_20 -> { _5 }
_21 -> { _4 }
_22 -> { _3 }
_23 -> { _2 }
.MEM_24 -> { .MEM_26 }
i_27 -> { i_25 }
_31 -> { _6 }
_32 -> { _7 }
_33 -> { _8 }
_34 -> { _9 }
_35 -> { _10 }
.MEM_36 -> { .MEM_18 }
.MEM_37 -> { .MEM_12 }
i_38 -> { i_19 }
ivtmp_39 -> { ivtmp_29 }
.MEM_40 -> { .MEM_12 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 8
;; basic block 8, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 5
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 7 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_25;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = b_15(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = a_16(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _41 = _4 != 0;
Setting value number of _41 to _41 (changed)
Making available beyond BB3 _41 for value _41
Value numbering stmt = _6 = .MASK_LOAD (_5, 32B, _41);
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _7 = c_17(D) + _2;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _8 = .MASK_LOAD (_7, 32B, _41);
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = _4 + _8;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = _6 + _9;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = .MASK_STORE (_5, 32B, _41, _10);
Setting value number of .MEM_18 to .MEM_18 (changed)
Value numbering stmt = i_19 = i_25 + 1;
Setting value number of i_19 to i_19 (changed)
Making available beyond BB3 i_19 for value i_19
Value numbering stmt = ivtmp_29 = ivtmp_30 - 1;
Setting value number of ivtmp_29 to ivtmp_29 (changed)
Making available beyond BB3 ivtmp_29 for value ivtmp_29
Value numbering stmt = if (ivtmp_29 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 19 values available at 13 locations and 19 lattice elements
Merging blocks 2 and 14
Removing basic block 10
;; basic block 10, loop depth 1
;;  pred:      
;;  succ:       12


fix_loop_structure: fixing up loops for function
s2711 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  long unsigned int _11;
  unsigned int ivtmp_13;
  int * _20;
  int _21;
  int * _22;
  long unsigned int _23;
  _Bool _28;
  unsigned int ivtmp_29;
  unsigned int ivtmp_30;
  int _31;
  int * _32;
  int _33;
  int _34;
  int _35;
  unsigned int ivtmp_39;
  _Bool _41;

  <bb 2> [local count: 10737416]:
  _28 = .LOOP_VECTORIZED (1, 2);
  if (_28 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_25 = PHI <i_19(7), 0(15)>
  # ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
  _1 = (long unsigned int) i_25;
  _2 = _1 * 4;
  _3 = b_15(D) + _2;
  _4 = *_3;
  _5 = a_16(D) + _2;
  _41 = _4 != 0;
  _6 = .MASK_LOAD (_5, 32B, _41);
  _7 = c_17(D) + _2;
  _8 = .MASK_LOAD (_7, 32B, _41);
  _9 = _4 + _8;
  _10 = _6 + _9;
  .MASK_STORE (_5, 32B, _41, _10);
  i_19 = i_25 + 1;
  ivtmp_29 = ivtmp_30 - 1;
  if (ivtmp_29 != 0)
    goto <bb 7>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 7> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737416]:

  <bb 9> [local count: 1063004409]:
  # i_27 = PHI <i_38(13), 0(16)>
  # ivtmp_13 = PHI <ivtmp_39(13), 65536(16)>
  _11 = (long unsigned int) i_27;
  _23 = _11 * 4;
  _22 = b_15(D) + _23;
  _21 = *_22;
  if (_21 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 531502204]:
  _20 = a_16(D) + _23;
  _31 = *_20;
  _32 = c_17(D) + _23;
  _33 = *_32;
  _34 = _21 + _33;
  _35 = _31 + _34;
  *_20 = _35;

  <bb 12> [local count: 1063004409]:
  i_38 = i_27 + 1;
  ivtmp_39 = ivtmp_13 - 1;
  if (ivtmp_39 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 13> [local count: 1052266996]:
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s2712 (s2712, funcdef_no=37, decl_uid=3781, cgraph_uid=38, symbol_order=37)

Creating dr for *_3
analyze_innermost: success.
	base_address: a_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_15(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_16(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_17(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_15(D)
	Access function 0: {0B, +, 4}_1
----------[3]-------------
----------[4]-------------
----------[8]-------------
----------[5]-------------
----------[7]-------------
-------------------------
_7 = c_17(D) + _2;
-------------------------
_8 = *_7;
-------------------------
_9 = _6 + _8;
-------------------------
_10 = _4 + _9;
-------------------------
*_3 = _10;
-------------------------
i_26 = PHI <0(2), i_19(7)>
-------------------------
.MEM_27 = PHI <.MEM_14(D)(2), .MEM_12(7)>
-------------------------
ivtmp_32 = PHI <65536(2), ivtmp_31(7)>
-------------------------
.MEM_12 = PHI <.MEM_18(4), .MEM_27(8)>
Applying if-conversion

Updating SSA:
creating PHI node in block #6 for .MEM_12
Registering new PHI nodes in block #14
Registering new PHI nodes in block #15
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_26;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_15(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _5 = b_16(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement if (_4 > _6)
Registering new PHI nodes in block #8
Registering new PHI nodes in block #4
Updating SSA information for statement _7 = c_17(D) + _2;
Updating SSA information for statement _8 = *_7;
Updating SSA information for statement _9 = _6 + _8;
Updating SSA information for statement _10 = _4 + _9;
Updating SSA information for statement *_3 = _10;
Registering new PHI nodes in block #5
Updating SSA information for statement i_19 = i_26 + 1;
Updating SSA information for statement ivtmp_31 = ivtmp_32 - 1;
Updating SSA information for statement if (ivtmp_31 != 0)
Registering new PHI nodes in block #7
Registering new PHI nodes in block #16
Registering new PHI nodes in block #9
Updating SSA information for statement _13 = (long unsigned int) i_26;
Updating SSA information for statement _11 = _1 * 4;
Updating SSA information for statement _28 = a_15(D) + _2;
Updating SSA information for statement _22 = *_3;
Updating SSA information for statement _21 = b_16(D) + _2;
Updating SSA information for statement _23 = *_5;
Updating SSA information for statement if (_4 > _6)
Registering new PHI nodes in block #10
Registering new PHI nodes in block #11
Updating SSA information for statement _20 = c_17(D) + _2;
Updating SSA information for statement _33 = *_7;
Updating SSA information for statement _34 = _6 + _8;
Updating SSA information for statement _35 = _4 + _9;
Updating SSA information for statement *_3 = _10;
Registering new PHI nodes in block #12
Updating SSA information for statement i_38 = i_26 + 1;
Updating SSA information for statement ivtmp_39 = ivtmp_32 - 1;
Updating SSA information for statement if (ivtmp_31 != 0)
Registering new PHI nodes in block #13
Registering new PHI nodes in block #6
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

_11 -> { _2 }
_13 -> { _1 }
_20 -> { _7 }
_21 -> { _5 }
_22 -> { _4 }
_23 -> { _6 }
ivtmp_24 -> { ivtmp_32 }
.MEM_25 -> { .MEM_27 }
_28 -> { _3 }
i_29 -> { i_26 }
_33 -> { _8 }
_34 -> { _9 }
_35 -> { _10 }
.MEM_36 -> { .MEM_18 }
.MEM_37 -> { .MEM_12 }
i_38 -> { i_19 }
ivtmp_39 -> { ivtmp_31 }
.MEM_40 -> { .MEM_12 }
Incremental SSA update started at block: 14
Number of blocks in CFG: 17
Number of blocks to update: 13 ( 76%)
Affected blocks: 3 4 5 6 7 8 9 10 11 12 13 15 16


Removing basic block 4
;; basic block 4, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 8
;; basic block 8, loop depth 1
;;  pred:      
;;  succ:      


Merging blocks 3 and 5
Region does not contain all edges into the entry block, skipping its PHIs.
Processing block 0: BB3
Cannot trust state of predecessor edge 7 -> 3, marking executable
Value numbering stmt = _1 = (long unsigned int) i_26;
Setting value number of _1 to _1 (changed)
Making available beyond BB3 _1 for value _1
Value numbering stmt = _2 = _1 * 4;
Setting value number of _2 to _2 (changed)
Making available beyond BB3 _2 for value _2
Value numbering stmt = _3 = a_15(D) + _2;
Setting value number of _3 to _3 (changed)
Making available beyond BB3 _3 for value _3
Value numbering stmt = _4 = *_3;
Setting value number of _4 to _4 (changed)
Making available beyond BB3 _4 for value _4
Value numbering stmt = _5 = b_16(D) + _2;
Setting value number of _5 to _5 (changed)
Making available beyond BB3 _5 for value _5
Value numbering stmt = _6 = *_5;
Setting value number of _6 to _6 (changed)
Making available beyond BB3 _6 for value _6
Value numbering stmt = _7 = c_17(D) + _2;
Setting value number of _7 to _7 (changed)
Making available beyond BB3 _7 for value _7
Value numbering stmt = _41 = _4 > _6;
Setting value number of _41 to _41 (changed)
Making available beyond BB3 _41 for value _41
Value numbering stmt = _8 = .MASK_LOAD (_7, 32B, _41);
Setting value number of _8 to _8 (changed)
Making available beyond BB3 _8 for value _8
Value numbering stmt = _9 = _6 + _8;
Setting value number of _9 to _9 (changed)
Making available beyond BB3 _9 for value _9
Value numbering stmt = _10 = _4 + _9;
Setting value number of _10 to _10 (changed)
Making available beyond BB3 _10 for value _10
Value numbering stmt = .MASK_STORE (_3, 32B, _41, _10);
Setting value number of .MEM_18 to .MEM_18 (changed)
Value numbering stmt = i_19 = i_26 + 1;
Setting value number of i_19 to i_19 (changed)
Making available beyond BB3 i_19 for value i_19
Value numbering stmt = ivtmp_31 = ivtmp_32 - 1;
Setting value number of ivtmp_31 to ivtmp_31 (changed)
Making available beyond BB3 ivtmp_31 for value ivtmp_31
Value numbering stmt = if (ivtmp_31 != 0)
RPO iteration over 1 blocks visited 1 blocks in total discovering 1 executable blocks iterating 1.0 times, a block was visited max. 1 times
RPO tracked 19 values available at 13 locations and 19 lattice elements
Merging blocks 2 and 14
Removing basic block 10
;; basic block 10, loop depth 1
;;  pred:      
;;  succ:       12


fix_loop_structure: fixing up loops for function
s2712 (int * a, int * b, int * c, int * d, int * e, int[512] * ff, int[512] * gg, int[512] * hh)
{
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  long unsigned int _11;
  long unsigned int _13;
  int * _20;
  int * _21;
  int _22;
  int _23;
  unsigned int ivtmp_24;
  int * _28;
  _Bool _30;
  unsigned int ivtmp_31;
  unsigned int ivtmp_32;
  int _33;
  int _34;
  int _35;
  unsigned int ivtmp_39;
  _Bool _41;

  <bb 2> [local count: 10737416]:
  _30 = .LOOP_VECTORIZED (1, 2);
  if (_30 != 0)
    goto <bb 15>; [100.00%]
  else
    goto <bb 16>; [100.00%]

  <bb 15> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_26 = PHI <i_19(7), 0(15)>
  # ivtmp_32 = PHI <ivtmp_31(7), 65536(15)>
  _1 = (long unsigned int) i_26;
  _2 = _1 * 4;
  _3 = a_15(D) + _2;
  _4 = *_3;
  _5 = b_16(D) + _2;
  _6 = *_5;
  _7 = c_17(D) + _2;
  _41 = _4 > _6;
  _8 = .MASK_LOAD (_7, 32B, _41);
  _9 = _6 + _8;
  _10 = _4 + _9;
  .MASK_STORE (_3, 32B, _41, _10);
  i_19 = i_26 + 1;
  ivtmp_31 = ivtmp_32 - 1;
  if (ivtmp_31 != 0)
    goto <bb 7>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 7> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737416]:

  <bb 9> [local count: 1063004409]:
  # i_29 = PHI <i_38(13), 0(16)>
  # ivtmp_24 = PHI <ivtmp_39(13), 65536(16)>
  _13 = (long unsigned int) i_29;
  _11 = _13 * 4;
  _28 = a_15(D) + _11;
  _22 = *_28;
  _21 = b_16(D) + _11;
  _23 = *_21;
  if (_22 > _23)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 531502204]:
  _20 = c_17(D) + _11;
  _33 = *_20;
  _34 = _23 + _33;
  _35 = _22 + _34;
  *_28 = _35;

  <bb 12> [local count: 1063004409]:
  i_38 = i_29 + 1;
  ivtmp_39 = ivtmp_24 - 1;
  if (ivtmp_39 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 13> [local count: 1052266996]:
  goto <bb 9>; [100.00%]

  <bb 6> [local count: 10737416]:
  return;

}


