
;; Function s161 (s161, funcdef_no=22, decl_uid=3511, cgraph_uid=23, symbol_order=22)


Analyzing loop at tsvc.c:5
tsvc.c:5:5: note:  === analyze_loop_nest ===
tsvc.c:5:5: note:   === vect_analyze_loop_form ===
tsvc.c:5:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Creating dr for *_3
analyze_innermost: success.
	base_address: b_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_55
analyze_innermost: success.
	base_address: d_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_57
analyze_innermost: success.
	base_address: a_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_21
analyze_innermost: success.
	base_address: c_28(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_28(D)
	Access function 0: {4B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: c_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_10
analyze_innermost: success.
	base_address: e_30(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_30(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_57
analyze_innermost: success.
	base_address: a_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_31(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:5:5: note:   === vect_analyze_data_refs ===
tsvc.c:5:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:5:5: note:   got vectype for stmt: pretmp_56 = *_55;
vector(8) int
tsvc.c:5:5: note:   got vectype for stmt: _15 = *_57;
vector(8) int
tsvc.c:5:5: note:   got vectype for stmt: .MASK_STORE (_21, 32B, _63, _22);
vector(8) int
tsvc.c:5:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _65);
vector(8) int
tsvc.c:5:5: note:   got vectype for stmt: _11 = .MASK_LOAD (_10, 32B, _65);
vector(8) int
tsvc.c:5:5: note:   got vectype for stmt: .MASK_STORE (_57, 32B, _65, _13);
vector(8) int
tsvc.c:5:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:5:5: note:   Analyze phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:5:5: note:   step: 1,  init: 0
tsvc.c:5:5: note:   Detected induction.
tsvc.c:5:5: note:   Analyze phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   Analyze phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:5:5: note:   step: 4294967295,  init: 65535
tsvc.c:5:5: note:   Detected induction.
tsvc.c:5:5: note:   === vect_determine_precisions ===
tsvc.c:5:5: note:   ivtmp_51 has no range info
tsvc.c:5:5: note:   _13 has no range info
tsvc.c:5:5: note:   _9 has no range info
tsvc.c:5:5: note:   using boolean precision 32 for _65 = _4 >= 0;
tsvc.c:5:5: note:   using boolean precision 32 for _63 = _4 < 0;
tsvc.c:5:5: note:   _22 has no range info
tsvc.c:5:5: note:   _20 has no range info
tsvc.c:5:5: note:   _19 has no range info
tsvc.c:5:5: note:   _18 has no range info
tsvc.c:5:5: note:   _15 has no range info
tsvc.c:5:5: note:   _58 has no range info
tsvc.c:5:5: note:   pretmp_56 has no range info
tsvc.c:5:5: note:   _4 has no range info
tsvc.c:5:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:5:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:5:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:5:5: note:   === vect_pattern_recog ===
tsvc.c:5:5: note:   vect_is_simple_use: operand (long unsigned int) i_39, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: operand i_39 = PHI <_58(8), 0(15)>, type of def: induction
tsvc.c:5:5: note:   vect_is_simple_use: operand (long unsigned int) i_39, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: operand i_39 = PHI <_58(8), 0(15)>, type of def: induction
tsvc.c:5:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:5:5: note:   widen_mult pattern recognized: patt_24 = (long unsigned int) patt_64;
tsvc.c:5:5: note:   extra pattern stmt: patt_64 = i_39 w* 4;
tsvc.c:5:5: note:   vect_is_simple_use: operand (sizetype) _58, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: operand i_39 + 1, type of def: internal
tsvc.c:5:5: note:   vect_recog_widen_mult_pattern: detected: _20 = _19 * 4;
tsvc.c:5:5: note:   widen_mult pattern recognized: patt_67 = (sizetype) patt_66;
tsvc.c:5:5: note:   extra pattern stmt: patt_66 = _58 w* 4;
tsvc.c:5:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:5:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:5:5: note:   init: phi relevant? i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   init: phi relevant? .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   init: phi relevant? ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   init: stmt relevant? _1 = (long unsigned int) i_39;
tsvc.c:5:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:5:5: note:   init: stmt relevant? _3 = b_27(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:5:5: note:   init: stmt relevant? _55 = d_29(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? pretmp_56 = *_55;
tsvc.c:5:5: note:   init: stmt relevant? _57 = a_31(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _58 = i_39 + 1;
tsvc.c:5:5: note:   init: stmt relevant? _15 = *_57;
tsvc.c:5:5: note:   init: stmt relevant? _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   init: stmt relevant? _19 = (sizetype) _58;
tsvc.c:5:5: note:   init: stmt relevant? _20 = _19 * 4;
tsvc.c:5:5: note:   init: stmt relevant? _21 = c_28(D) + _20;
tsvc.c:5:5: note:   init: stmt relevant? _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   init: stmt relevant? _63 = _4 < 0;
tsvc.c:5:5: note:   init: stmt relevant? .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:5:5: note:   mark relevant 5, live 0: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   init: stmt relevant? _5 = c_28(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _65 = _4 >= 0;
tsvc.c:5:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   init: stmt relevant? _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   init: stmt relevant? _10 = e_30(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   init: stmt relevant? _13 = _9 + _11;
tsvc.c:5:5: note:   init: stmt relevant? .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:5:5: note:   mark relevant 5, live 0: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   init: stmt relevant? ivtmp_51 = ivtmp_52 - 1;
tsvc.c:5:5: note:   init: stmt relevant? if (ivtmp_51 != 0)
tsvc.c:5:5: note:   worklist: examine stmt: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _65 = _4 >= 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _13 = _9 + _11;
tsvc.c:5:5: note:   worklist: examine stmt: _13 = _9 + _11;
tsvc.c:5:5: note:   vect_is_simple_use: operand _6 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_10, 32B, _65), type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   worklist: examine stmt: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _65 = _4 >= 0;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _65), type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: pretmp_56 = *_55;
tsvc.c:5:5: note:   worklist: examine stmt: pretmp_56 = *_55;
tsvc.c:5:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _65 = _4 >= 0;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _65 = _4 >= 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:5:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:5:5: note:   worklist: examine stmt: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _63 = _4 < 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand _18 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   worklist: examine stmt: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand _15 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: pretmp_56 = *_55;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _15 = *_57;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: pretmp_56 = *_55;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _15 = *_57;
tsvc.c:5:5: note:   worklist: examine stmt: _63 = _4 < 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_56 = *_55;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _15 = *_57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_21, 32B, _63, _22);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _11 = .MASK_LOAD (_10, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_57, 32B, _65, _13);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_56 = *_55;
  stmt_b: _15 = *_57;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_56 = *_55;
  stmt_b: .MASK_STORE (_21, 32B, _63, _22);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_56 = *_55;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_56 = *_55;
  stmt_b: _11 = .MASK_LOAD (_10, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_56 = *_55;
  stmt_b: .MASK_STORE (_57, 32B, _65, _13);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _15 = *_57;
  stmt_b: .MASK_STORE (_21, 32B, _63, _22);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _15 = *_57;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _15 = *_57;
  stmt_b: _11 = .MASK_LOAD (_10, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _15 = *_57;
  stmt_b: .MASK_STORE (_57, 32B, _65, _13);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_21, 32B, _63, _22);
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _65);
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [0 + 1 * x_1])
  (overlaps_b = [1 + 1 * x_1]))
)
  (overlap_iterations_a = [0 + 1 * x_1])
  (overlap_iterations_b = [1 + 1 * x_1]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {4B, +, 4}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_21, 32B, _63, _22);
  stmt_b: _11 = .MASK_LOAD (_10, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_21, 32B, _63, _22);
  stmt_b: .MASK_STORE (_57, 32B, _65, _13);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _65);
  stmt_b: _11 = .MASK_LOAD (_10, 32B, _65);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _65);
  stmt_b: .MASK_STORE (_57, 32B, _65, _13);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = .MASK_LOAD (_10, 32B, _65);
  stmt_b: .MASK_STORE (_57, 32B, _65, _13);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_56 = *_55;
  stmt_b: pretmp_56 = *_55;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _15 = *_57;
  stmt_b: _15 = *_57;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_21, 32B, _63, _22);
  stmt_b: .MASK_STORE (_21, 32B, _63, _22);
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_1)
  (chrec_b = {4B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _65);
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _65);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _11 = .MASK_LOAD (_10, 32B, _65);
  stmt_b: _11 = .MASK_LOAD (_10, 32B, _65);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_57, 32B, _65, _13);
  stmt_b: .MASK_STORE (_57, 32B, _65, _13);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:7:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_21
consider run-time aliasing test between *_3 and *_21
tsvc.c:7:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_57
consider run-time aliasing test between *_3 and *_57
tsvc.c:14:28: missed:   versioning for alias required: can't determine dependence between *_55 and *_21
consider run-time aliasing test between *_55 and *_21
tsvc.c:14:28: missed:   versioning for alias required: can't determine dependence between *_55 and *_57
consider run-time aliasing test between *_55 and *_57
tsvc.c:14:21: missed:   versioning for alias required: can't determine dependence between *_57 and *_21
consider run-time aliasing test between *_57 and *_21
tsvc.c:5:5: note:   dependence distance  = 0.
tsvc.c:5:5: note:   dependence distance == 0 between *_57 and *_57
tsvc.c:5:5: note:   dependence distance  = 1.
tsvc.c:5:5: note:   dependence distance negative.
tsvc.c:14:18: missed:   versioning for alias required: can't determine dependence between *_21 and *_10
consider run-time aliasing test between *_21 and *_10
tsvc.c:14:18: missed:   versioning for alias required: can't determine dependence between *_21 and *_57
consider run-time aliasing test between *_21 and *_57
tsvc.c:11:17: missed:   versioning for alias required: can't determine dependence between *_5 and *_57
consider run-time aliasing test between *_5 and *_57
tsvc.c:11:31: missed:   versioning for alias required: can't determine dependence between *_10 and *_57
consider run-time aliasing test between *_10 and *_57
tsvc.c:5:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:5:5: note:   ==> examining phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   ==> examining phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   ==> examining phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   ==> examining statement: _1 = (long unsigned int) i_39;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern def stmt: patt_64 = i_39 w* 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern statement: patt_24 = (long unsigned int) patt_64;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _3 = b_27(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:5:5: note:   precomputed vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _55 = d_29(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: pretmp_56 = *_55;
tsvc.c:5:5: note:   precomputed vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _57 = a_31(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _58 = i_39 + 1;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _15 = *_57;
tsvc.c:5:5: note:   precomputed vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _19 = (sizetype) _58;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _20 = _19 * 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern def stmt: patt_66 = _58 w* 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern statement: patt_67 = (sizetype) patt_66;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _21 = c_28(D) + _20;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _63 = _4 < 0;
tsvc.c:5:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   precomputed vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _5 = c_28(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _65 = _4 >= 0;
tsvc.c:5:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   precomputed vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _10 = e_30(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   precomputed vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: _13 = _9 + _11;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   precomputed vectype: vector(8) int
tsvc.c:5:5: note:   nunits = 8
tsvc.c:5:5: note:   ==> examining statement: ivtmp_51 = ivtmp_52 - 1;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: if (ivtmp_51 != 0)
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   vectorization factor = 8
tsvc.c:5:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x51c6c60 *_3 1 times scalar_load costs 12 in body
0x51c6c60 *_55 1 times scalar_load costs 12 in body
0x51c6c60 *_57 1 times scalar_load costs 12 in body
0x51c6c60 _15 + pretmp_56 1 times scalar_stmt costs 4 in body
0x51c6c60 _18 + pretmp_56 1 times scalar_stmt costs 4 in body
0x51c6c60 _4 < 0 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_STORE (_21, 32B, _63, _22) 1 times scalar_store costs 12 in body
0x51c6c60 _4 >= 0 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_LOAD (_5, 32B, _65) 1 times scalar_load costs 12 in body
0x51c6c60 _6 + pretmp_56 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_LOAD (_10, 32B, _65) 1 times scalar_load costs 12 in body
0x51c6c60 _9 + _11 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_STORE (_57, 32B, _65, _13) 1 times scalar_store costs 12 in body
tsvc.c:5:5: note:   === vect_analyze_slp ===
tsvc.c:5:5: note:   === vect_make_slp_decision ===
tsvc.c:5:5: note:  vectorization_factor = 8, niters = 65535
tsvc.c:5:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:5:5: note:   accesses have the same alignment: *_57 and *_57
tsvc.c:5:5: note:   recording new base alignment for b_27(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:5:5: note:   recording new base alignment for d_29(D)
  alignment:    4
  misalignment: 0
  based on:     pretmp_56 = *_55;
tsvc.c:5:5: note:   recording new base alignment for a_31(D)
  alignment:    4
  misalignment: 0
  based on:     _15 = *_57;
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_3
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_55
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_57
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_21
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_5
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_10
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_57
tsvc.c:5:5: note:   === vect_prune_runtime_alias_test_list ===
merging ranges for *_5, *_57 and *_21, *_57
merging ranges for *_5, *_57 and *_21, *_57
merged alias checks:
  reference:      *_3 vs. *_21
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_3 vs. *_57
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_55 vs. *_21
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_21 vs. *_10
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW
  reference:      *_5 vs. *_57
  segment length: 28
  access size:    8 vs. 4
  alignment:      4
  flags:          WAR WAW ARBITRARY
  reference:      *_55 vs. *_57
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_10 vs. *_57
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:5:5: note:   improved number of alias checks from 9 to 7
tsvc.c:5:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:5:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:5:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:5:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:5:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:5:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:5:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:5:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:5:5: note:   vect_can_advance_ivs_p:
tsvc.c:5:5: note:   Analyze phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   Analyze phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   reduc or virtual phi. skip.
tsvc.c:5:5: note:   Analyze phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_load_cost: aligned.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_store_cost: aligned.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_store_cost: aligned.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:5:5: note:   Setting misalignment to unknown (-1).
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:5:5: note:   Vectorizing an unaligned access.
tsvc.c:5:5: note:   Vectorizing an unaligned access.
tsvc.c:5:5: note:   Vectorizing an unaligned access.
tsvc.c:5:5: note:   Vectorizing an unaligned access.
tsvc.c:5:5: note:   Vectorizing an unaligned access.
tsvc.c:5:5: note:   Vectorizing an unaligned access.
tsvc.c:5:5: note:   Vectorizing an unaligned access.
tsvc.c:5:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:5:5: note:   === vect_analyze_loop_operations ===
tsvc.c:5:5: note:   examining phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   examining phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   examining phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   ==> examining statement: _1 = (long unsigned int) i_39;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _3 = b_27(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _55 = d_29(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: pretmp_56 = *_55;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _57 = a_31(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _58 = i_39 + 1;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _15 = *_57;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _19 = (sizetype) _58;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _20 = _19 * 4;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _21 = c_28(D) + _20;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand _15 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _63 = _4 < 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:   vect_is_simple_use: operand _18 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _5 = c_28(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _65 = _4 >= 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:5:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _65), type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _10 = e_30(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _13 = _9 + _11;
tsvc.c:5:5: note:   vect_is_simple_use: operand _6 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_10, 32B, _65), type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:   vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: ivtmp_51 = ivtmp_52 - 1;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: if (ivtmp_51 != 0)
tsvc.c:5:5: note:   irrelevant.
0x5088290 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x5088290 *_55 1 times unaligned_load (misalign -1) costs 20 in body
0x5088290 *_57 1 times unaligned_load (misalign -1) costs 20 in body
0x5088290 _15 + pretmp_56 1 times vector_stmt costs 4 in body
0x5088290 _18 + pretmp_56 1 times vector_stmt costs 4 in body
0x5088290 _4 < 0 1 times scalar_to_vec costs 4 in prologue
0x5088290 _4 < 0 1 times vector_stmt costs 4 in body
0x5088290 .MASK_STORE (_21, 32B, _63, _22) 1 times unaligned_store (misalign -1) costs 20 in body
0x5088290 _4 >= 0 1 times scalar_to_vec costs 4 in prologue
0x5088290 _4 >= 0 1 times vector_stmt costs 4 in body
0x5088290 .MASK_LOAD (_5, 32B, _65) 1 times unaligned_load (misalign -1) costs 20 in body
0x5088290 _6 + pretmp_56 1 times vector_stmt costs 4 in body
0x5088290 .MASK_LOAD (_10, 32B, _65) 1 times unaligned_load (misalign -1) costs 20 in body
0x5088290 _9 + _11 1 times vector_stmt costs 4 in body
0x5088290 .MASK_STORE (_57, 32B, _65, _13) 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Statement (exit)if (ivtmp_51 != 0)
 is executed at most 65534 (bounded by 65534) + 1 times in loop 1.
Induction variable (int *) b_27(D) + 4 * iteration does not wrap in statement _3 = b_27(D) + _2;
 in loop 1.
Statement _3 = b_27(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_29(D) + 4 * iteration does not wrap in statement _55 = d_29(D) + _2;
 in loop 1.
Statement _55 = d_29(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) a_31(D) + 4 * iteration does not wrap in statement _57 = a_31(D) + _2;
 in loop 1.
Statement _57 = a_31(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement _58 = i_39 + 1;
 in loop 1.
Statement _58 = i_39 + 1;
 is executed at most 2147483646 (bounded by 2147483646) + 1 times in loop 1.
Induction variable (int *) c_28(D) + 4 + 4 * iteration does not wrap in statement _21 = c_28(D) + _20;
 in loop 1.
Statement _21 = c_28(D) + _20;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_28(D) + 4 * iteration does not wrap in statement _5 = c_28(D) + _2;
 in loop 1.
Statement _5 = c_28(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) e_30(D) + 4 * iteration does not wrap in statement _10 = e_30(D) + _2;
 in loop 1.
Statement _10 = e_30(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
tsvc.c:5:5: note:  not using a fully-masked loop.
0x5088290 <unknown> 7 times vector_stmt costs 28 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x5088290 <unknown> 1 times cond_branch_taken costs 16 in prologue
0x5088290 *_3 7 times scalar_load costs 84 in epilogue
0x5088290 *_55 7 times scalar_load costs 84 in epilogue
0x5088290 *_57 7 times scalar_load costs 84 in epilogue
0x5088290 _15 + pretmp_56 7 times scalar_stmt costs 28 in epilogue
0x5088290 _18 + pretmp_56 7 times scalar_stmt costs 28 in epilogue
0x5088290 _4 < 0 7 times scalar_stmt costs 28 in epilogue
0x5088290 .MASK_STORE (_21, 32B, _63, _22) 7 times scalar_store costs 84 in epilogue
0x5088290 _4 >= 0 7 times scalar_stmt costs 28 in epilogue
0x5088290 .MASK_LOAD (_5, 32B, _65) 7 times scalar_load costs 84 in epilogue
0x5088290 _6 + pretmp_56 7 times scalar_stmt costs 28 in epilogue
0x5088290 .MASK_LOAD (_10, 32B, _65) 7 times scalar_load costs 84 in epilogue
0x5088290 _9 + _11 7 times scalar_stmt costs 28 in epilogue
0x5088290 .MASK_STORE (_57, 32B, _65, _13) 7 times scalar_store costs 84 in epilogue
tsvc.c:5:5: note:  Cost model analysis: 
  Vector inside of loop cost: 164
  Vector prologue cost: 52
  Vector epilogue cost: 756
  Scalar iteration cost: 108
  Scalar outside cost: 8
  Vector outside cost: 808
  prologue iterations: 0
  epilogue iterations: 7
  Calculated minimum iters for profitability: 8
tsvc.c:5:5: note:    Runtime profitability threshold = 8
tsvc.c:5:5: note:    Static estimate profitability threshold = 8
tsvc.c:5:5: note:  epilog loop required
tsvc.c:5:5: note:  vect_can_advance_ivs_p:
tsvc.c:5:5: note:  Analyze phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:  Analyze phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:  reduc or virtual phi. skip.
tsvc.c:5:5: note:  Analyze phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:5:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:5:5: note:  ***** Re-trying analysis with vector mode V16QI
tsvc.c:5:5: note:   === vect_analyze_loop_form ===
tsvc.c:5:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
tsvc.c:5:5: note:   === vect_analyze_data_refs ===
tsvc.c:5:5: note:   got vectype for stmt: _4 = *_3;
vector(4) int
tsvc.c:5:5: note:   got vectype for stmt: pretmp_56 = *_55;
vector(4) int
tsvc.c:5:5: note:   got vectype for stmt: _15 = *_57;
vector(4) int
tsvc.c:5:5: note:   got vectype for stmt: .MASK_STORE (_21, 32B, _63, _22);
vector(4) int
tsvc.c:5:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _65);
vector(4) int
tsvc.c:5:5: note:   got vectype for stmt: _11 = .MASK_LOAD (_10, 32B, _65);
vector(4) int
tsvc.c:5:5: note:   got vectype for stmt: .MASK_STORE (_57, 32B, _65, _13);
vector(4) int
tsvc.c:5:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:5:5: note:   Analyze phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:5:5: note:   step: 1,  init: 0
tsvc.c:5:5: note:   Detected induction.
tsvc.c:5:5: note:   Analyze phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   Analyze phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:5:5: note:   step: 4294967295,  init: 65535
tsvc.c:5:5: note:   Detected induction.
tsvc.c:5:5: note:   === vect_determine_precisions ===
tsvc.c:5:5: note:   ivtmp_51 has no range info
tsvc.c:5:5: note:   _13 has no range info
tsvc.c:5:5: note:   _9 has no range info
tsvc.c:5:5: note:   using boolean precision 32 for _65 = _4 >= 0;
tsvc.c:5:5: note:   using boolean precision 32 for _63 = _4 < 0;
tsvc.c:5:5: note:   _22 has no range info
tsvc.c:5:5: note:   _20 has no range info
tsvc.c:5:5: note:   _19 has no range info
tsvc.c:5:5: note:   _18 has no range info
tsvc.c:5:5: note:   _15 has no range info
tsvc.c:5:5: note:   _58 has no range info
tsvc.c:5:5: note:   pretmp_56 has no range info
tsvc.c:5:5: note:   _4 has no range info
tsvc.c:5:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:5:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:5:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:5:5: note:   === vect_pattern_recog ===
tsvc.c:5:5: note:   vect_is_simple_use: operand (long unsigned int) i_39, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: operand i_39 = PHI <_58(8), 0(15)>, type of def: induction
tsvc.c:5:5: note:   vect_is_simple_use: operand (long unsigned int) i_39, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: operand i_39 = PHI <_58(8), 0(15)>, type of def: induction
tsvc.c:5:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:5:5: note:   widen_mult pattern recognized: patt_69 = (long unsigned int) patt_68;
tsvc.c:5:5: note:   extra pattern stmt: patt_68 = i_39 w* 4;
tsvc.c:5:5: note:   vect_is_simple_use: operand (sizetype) _58, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: operand i_39 + 1, type of def: internal
tsvc.c:5:5: note:   vect_recog_widen_mult_pattern: detected: _20 = _19 * 4;
tsvc.c:5:5: note:   widen_mult pattern recognized: patt_71 = (sizetype) patt_70;
tsvc.c:5:5: note:   extra pattern stmt: patt_70 = _58 w* 4;
tsvc.c:5:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:5:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:5:5: note:   init: phi relevant? i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   init: phi relevant? .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   init: phi relevant? ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   init: stmt relevant? _1 = (long unsigned int) i_39;
tsvc.c:5:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:5:5: note:   init: stmt relevant? _3 = b_27(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:5:5: note:   init: stmt relevant? _55 = d_29(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? pretmp_56 = *_55;
tsvc.c:5:5: note:   init: stmt relevant? _57 = a_31(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _58 = i_39 + 1;
tsvc.c:5:5: note:   init: stmt relevant? _15 = *_57;
tsvc.c:5:5: note:   init: stmt relevant? _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   init: stmt relevant? _19 = (sizetype) _58;
tsvc.c:5:5: note:   init: stmt relevant? _20 = _19 * 4;
tsvc.c:5:5: note:   init: stmt relevant? _21 = c_28(D) + _20;
tsvc.c:5:5: note:   init: stmt relevant? _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   init: stmt relevant? _63 = _4 < 0;
tsvc.c:5:5: note:   init: stmt relevant? .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:5:5: note:   mark relevant 5, live 0: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   init: stmt relevant? _5 = c_28(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _65 = _4 >= 0;
tsvc.c:5:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   init: stmt relevant? _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   init: stmt relevant? _10 = e_30(D) + _2;
tsvc.c:5:5: note:   init: stmt relevant? _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   init: stmt relevant? _13 = _9 + _11;
tsvc.c:5:5: note:   init: stmt relevant? .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:5:5: note:   mark relevant 5, live 0: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   init: stmt relevant? ivtmp_51 = ivtmp_52 - 1;
tsvc.c:5:5: note:   init: stmt relevant? if (ivtmp_51 != 0)
tsvc.c:5:5: note:   worklist: examine stmt: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _65 = _4 >= 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _13 = _9 + _11;
tsvc.c:5:5: note:   worklist: examine stmt: _13 = _9 + _11;
tsvc.c:5:5: note:   vect_is_simple_use: operand _6 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_10, 32B, _65), type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   worklist: examine stmt: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _65 = _4 >= 0;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _65), type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: pretmp_56 = *_55;
tsvc.c:5:5: note:   worklist: examine stmt: pretmp_56 = *_55;
tsvc.c:5:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _65 = _4 >= 0;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _65 = _4 >= 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:5:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:5:5: note:   worklist: examine stmt: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _63 = _4 < 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand _18 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   worklist: examine stmt: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand _15 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: pretmp_56 = *_55;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _15 = *_57;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: pretmp_56 = *_55;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   worklist: examine stmt: _15 = *_57;
tsvc.c:5:5: note:   worklist: examine stmt: _63 = _4 < 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:5:5: note:   already marked relevant/live.
tsvc.c:5:5: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:5:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:5:5: note:   ==> examining phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   ==> examining phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   ==> examining phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   ==> examining statement: _1 = (long unsigned int) i_39;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern def stmt: patt_68 = i_39 w* 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern statement: patt_69 = (long unsigned int) patt_68;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _3 = b_27(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:5:5: note:   precomputed vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _55 = d_29(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: pretmp_56 = *_55;
tsvc.c:5:5: note:   precomputed vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _57 = a_31(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _58 = i_39 + 1;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _15 = *_57;
tsvc.c:5:5: note:   precomputed vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _19 = (sizetype) _58;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _20 = _19 * 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern def stmt: patt_70 = _58 w* 4;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining pattern statement: patt_71 = (sizetype) patt_70;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _21 = c_28(D) + _20;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _63 = _4 < 0;
tsvc.c:5:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   precomputed vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _5 = c_28(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _65 = _4 >= 0;
tsvc.c:5:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   precomputed vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _10 = e_30(D) + _2;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   precomputed vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: _13 = _9 + _11;
tsvc.c:5:5: note:   get vectype for scalar type: int
tsvc.c:5:5: note:   vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   precomputed vectype: vector(4) int
tsvc.c:5:5: note:   nunits = 4
tsvc.c:5:5: note:   ==> examining statement: ivtmp_51 = ivtmp_52 - 1;
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   ==> examining statement: if (ivtmp_51 != 0)
tsvc.c:5:5: note:   skip.
tsvc.c:5:5: note:   vectorization factor = 4
tsvc.c:5:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x51c6c60 *_3 1 times scalar_load costs 12 in body
0x51c6c60 *_55 1 times scalar_load costs 12 in body
0x51c6c60 *_57 1 times scalar_load costs 12 in body
0x51c6c60 _15 + pretmp_56 1 times scalar_stmt costs 4 in body
0x51c6c60 _18 + pretmp_56 1 times scalar_stmt costs 4 in body
0x51c6c60 _4 < 0 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_STORE (_21, 32B, _63, _22) 1 times scalar_store costs 12 in body
0x51c6c60 _4 >= 0 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_LOAD (_5, 32B, _65) 1 times scalar_load costs 12 in body
0x51c6c60 _6 + pretmp_56 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_LOAD (_10, 32B, _65) 1 times scalar_load costs 12 in body
0x51c6c60 _9 + _11 1 times scalar_stmt costs 4 in body
0x51c6c60 .MASK_STORE (_57, 32B, _65, _13) 1 times scalar_store costs 12 in body
tsvc.c:5:5: note:   === vect_analyze_slp ===
tsvc.c:5:5: note:   === vect_make_slp_decision ===
tsvc.c:5:5: note:  vectorization_factor = 4, niters = 65535
tsvc.c:5:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:5:5: note:   accesses have the same alignment: *_57 and *_57
tsvc.c:5:5: note:   recording new base alignment for b_27(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:5:5: note:   recording new base alignment for d_29(D)
  alignment:    4
  misalignment: 0
  based on:     pretmp_56 = *_55;
tsvc.c:5:5: note:   recording new base alignment for a_31(D)
  alignment:    4
  misalignment: 0
  based on:     _15 = *_57;
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_3
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_55
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_57
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_21
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_5
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_10
tsvc.c:5:5: note:   vect_compute_data_ref_alignment:
tsvc.c:5:5: note:   can't force alignment of ref: *_57
tsvc.c:5:5: note:   === vect_prune_runtime_alias_test_list ===
tsvc.c:5:5: note:  Vectorizing an unaligned access.
tsvc.c:5:5: note:  Vectorizing an unaligned access.
tsvc.c:5:5: note:  Vectorizing an unaligned access.
tsvc.c:5:5: note:  Vectorizing an unaligned access.
tsvc.c:5:5: note:  Vectorizing an unaligned access.
tsvc.c:5:5: note:  Vectorizing an unaligned access.
tsvc.c:5:5: note:  Vectorizing an unaligned access.
tsvc.c:5:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:5:5: note:   === vect_analyze_loop_operations ===
tsvc.c:5:5: note:   examining phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:   examining phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:   examining phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:   ==> examining statement: _1 = (long unsigned int) i_39;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _3 = b_27(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _55 = d_29(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: pretmp_56 = *_55;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _57 = a_31(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _58 = i_39 + 1;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _15 = *_57;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: unknown
tsvc.c:5:5: missed:   Unsupported pattern.
tsvc.c:5:5: missed:   use not simple.
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _19 = (sizetype) _58;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _20 = _19 * 4;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _21 = c_28(D) + _20;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand _15 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _63 = _4 < 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:   vect_is_simple_use: operand _18 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _5 = c_28(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _65 = _4 >= 0;
tsvc.c:5:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:5:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _65), type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _10 = e_30(D) + _2;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: _13 = _9 + _11;
tsvc.c:5:5: note:   vect_is_simple_use: operand _6 + pretmp_56, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_is_simple_use: operand .MASK_LOAD (_10, 32B, _65), type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:    === vectorizable_operation ===
tsvc.c:5:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:   vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:5:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:5:5: note:   vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:5:5: note:   ==> examining statement: ivtmp_51 = ivtmp_52 - 1;
tsvc.c:5:5: note:   irrelevant.
tsvc.c:5:5: note:   ==> examining statement: if (ivtmp_51 != 0)
tsvc.c:5:5: note:   irrelevant.
0x51c6fb0 *_3 1 times unaligned_load (misalign -1) costs 12 in body
0x51c6fb0 *_55 1 times unaligned_load (misalign -1) costs 12 in body
0x51c6fb0 *_57 1 times unaligned_load (misalign -1) costs 12 in body
0x51c6fb0 _15 + pretmp_56 1 times vector_stmt costs 4 in body
0x51c6fb0 _18 + pretmp_56 1 times vector_stmt costs 4 in body
0x51c6fb0 _4 < 0 1 times scalar_to_vec costs 4 in prologue
0x51c6fb0 _4 < 0 1 times vector_stmt costs 4 in body
0x51c6fb0 .MASK_STORE (_21, 32B, _63, _22) 1 times unaligned_store (misalign -1) costs 12 in body
0x51c6fb0 _4 >= 0 1 times scalar_to_vec costs 4 in prologue
0x51c6fb0 _4 >= 0 1 times vector_stmt costs 4 in body
0x51c6fb0 .MASK_LOAD (_5, 32B, _65) 1 times unaligned_load (misalign -1) costs 12 in body
0x51c6fb0 _6 + pretmp_56 1 times vector_stmt costs 4 in body
0x51c6fb0 .MASK_LOAD (_10, 32B, _65) 1 times unaligned_load (misalign -1) costs 12 in body
0x51c6fb0 _9 + _11 1 times vector_stmt costs 4 in body
0x51c6fb0 .MASK_STORE (_57, 32B, _65, _13) 1 times unaligned_store (misalign -1) costs 12 in body
tsvc.c:5:5: note:  not using a fully-masked loop.
0x51c6fb0 *_3 3 times scalar_load costs 36 in epilogue
0x51c6fb0 *_55 3 times scalar_load costs 36 in epilogue
0x51c6fb0 *_57 3 times scalar_load costs 36 in epilogue
0x51c6fb0 _15 + pretmp_56 3 times scalar_stmt costs 12 in epilogue
0x51c6fb0 _18 + pretmp_56 3 times scalar_stmt costs 12 in epilogue
0x51c6fb0 _4 < 0 3 times scalar_stmt costs 12 in epilogue
0x51c6fb0 .MASK_STORE (_21, 32B, _63, _22) 3 times scalar_store costs 36 in epilogue
0x51c6fb0 _4 >= 0 3 times scalar_stmt costs 12 in epilogue
0x51c6fb0 .MASK_LOAD (_5, 32B, _65) 3 times scalar_load costs 36 in epilogue
0x51c6fb0 _6 + pretmp_56 3 times scalar_stmt costs 12 in epilogue
0x51c6fb0 .MASK_LOAD (_10, 32B, _65) 3 times scalar_load costs 36 in epilogue
0x51c6fb0 _9 + _11 3 times scalar_stmt costs 12 in epilogue
0x51c6fb0 .MASK_STORE (_57, 32B, _65, _13) 3 times scalar_store costs 36 in epilogue
tsvc.c:5:5: note:  Cost model analysis: 
  Vector inside of loop cost: 108
  Vector prologue cost: 8
  Vector epilogue cost: 324
  Scalar iteration cost: 108
  Scalar outside cost: 0
  Vector outside cost: 332
  prologue iterations: 0
  epilogue iterations: 3
  Calculated minimum iters for profitability: 4
tsvc.c:5:5: note:    Runtime profitability threshold = 4
tsvc.c:5:5: note:    Static estimate profitability threshold = 4
tsvc.c:5:5: note:  epilog loop required
tsvc.c:5:5: note:  vect_can_advance_ivs_p:
tsvc.c:5:5: note:  Analyze phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:  Analyze phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:  reduc or virtual phi. skip.
tsvc.c:5:5: note:  Analyze phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:  ***** Analysis succeeded with vector mode V16QI
tsvc.c:5:5: note:  ***** Choosing vector mode V8SI
tsvc.c:5:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:5:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_21
using an address-based WAR/WAW test
create runtime check for data references *_3 and *_57
using an address-based WAR/WAW test
create runtime check for data references *_55 and *_21
using an address-based WAR/WAW test
create runtime check for data references *_21 and *_10
using an address-based overlap test
create runtime check for data references *_5 and *_57
using an address-based overlap test
create runtime check for data references *_55 and *_57
using an address-based WAR/WAW test
create runtime check for data references *_10 and *_57
using an address-based WAR/WAW test
tsvc.c:5:5: note:  created 7 versioning for alias checks.
tsvc.c:5:5: note:  trying to apply versioning to outer loop 0
tsvc.c:5:5: note:  reusing loop version created by if conversion
tsvc.c:5:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
Removing basic block 19
;; basic block 19, loop depth 0
;;  pred:       15
;;  succ:      


tsvc.c:5:5: note:  vect_can_advance_ivs_p:
tsvc.c:5:5: note:  Analyze phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:  Analyze phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:  reduc or virtual phi. skip.
tsvc.c:5:5: note:  Analyze phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:  vect_update_ivs_after_vectorizer: phi: i_39 = PHI <_58(8), 0(15)>
tsvc.c:5:5: note:  vect_update_ivs_after_vectorizer: phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(15)>
tsvc.c:5:5: note:  reduc or virtual phi. skip.
tsvc.c:5:5: note:  vect_update_ivs_after_vectorizer: phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(15)>
tsvc.c:5:5: note:  ------>vectorizing phi: i_39 = PHI <_58(8), 0(23)>
tsvc.c:5:5: note:  ------>vectorizing phi: .MEM_40 = PHI <.MEM_32(8), .MEM_26(D)(23)>
tsvc.c:5:5: note:  ------>vectorizing phi: ivtmp_52 = PHI <ivtmp_51(8), 65535(23)>
tsvc.c:5:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_39;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_64 = i_39 w* 4;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_24 = (long unsigned int) patt_64;
tsvc.c:5:5: note:  ------>vectorizing statement: _3 = b_27(D) + _2;
tsvc.c:5:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_27(D)
tsvc.c:5:5: note:  created b_27(D)
tsvc.c:5:5: note:  add new stmt: vect__4.23_144 = MEM <vector(8) int> [(int *)vectp_b.21_142];
tsvc.c:5:5: note:  ------>vectorizing statement: _55 = d_29(D) + _2;
tsvc.c:5:5: note:  ------>vectorizing statement: pretmp_56 = *_55;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_29(D)
tsvc.c:5:5: note:  created d_29(D)
tsvc.c:5:5: note:  add new stmt: vect_pretmp_56.26_147 = MEM <vector(8) int> [(int *)vectp_d.24_145];
tsvc.c:5:5: note:  ------>vectorizing statement: _57 = a_31(D) + _2;
tsvc.c:5:5: note:  ------>vectorizing statement: _58 = i_39 + 1;
tsvc.c:5:5: note:  ------>vectorizing statement: _15 = *_57;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_31(D)
tsvc.c:5:5: note:  created a_31(D)
tsvc.c:5:5: note:  add new stmt: vect__15.29_150 = MEM <vector(8) int> [(int *)vectp_a.27_148];
tsvc.c:5:5: note:  ------>vectorizing statement: _18 = _15 + pretmp_56;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _15
tsvc.c:5:5: note:  vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _15 = *_57;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: pretmp_56
tsvc.c:5:5: note:  vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:    def_stmt =  pretmp_56 = *_55;
tsvc.c:5:5: note:  add new stmt: vect__18.30_151 = vect__15.29_150 + vect_pretmp_56.26_147;
tsvc.c:5:5: note:  ------>vectorizing statement: _19 = (sizetype) _58;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_66 = _58 w* 4;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_67 = (sizetype) patt_66;
tsvc.c:5:5: note:  ------>vectorizing statement: _21 = c_28(D) + _20;
tsvc.c:5:5: note:  ------>vectorizing statement: _22 = _18 + pretmp_56;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _15 + pretmp_56, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _18
tsvc.c:5:5: note:  vect_is_simple_use: operand _15 + pretmp_56, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _18 = _15 + pretmp_56;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: pretmp_56
tsvc.c:5:5: note:  vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:    def_stmt =  pretmp_56 = *_55;
tsvc.c:5:5: note:  add new stmt: vect__22.31_152 = vect__18.30_151 + vect_pretmp_56.26_147;
tsvc.c:5:5: note:  ------>vectorizing statement: _63 = _4 < 0;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:5:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _4 = *_3;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  created new init_stmt: vect_cst__153 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:5:5: note:  add new stmt: mask__63.32_154 = vect__4.23_144 < vect_cst__153;
tsvc.c:5:5: note:  ------>vectorizing statement: .MASK_STORE (_21, 32B, _63, _22);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:  vect_is_simple_use: operand _18 + pretmp_56, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  transform store. ncopies = 1
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _22
tsvc.c:5:5: note:  vect_is_simple_use: operand _18 + pretmp_56, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _22 = _18 + pretmp_56;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _63
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _63 = _4 < 0;
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_28(D)
tsvc.c:5:5: note:  created vectp_c.34_155
tsvc.c:5:5: note:  add new stmt: .MASK_STORE (vectp_c.33_156, 32B, mask__63.32_154, vect__22.31_152);
tsvc.c:5:5: note:  ------>vectorizing statement: _5 = c_28(D) + _2;
tsvc.c:5:5: note:  ------>vectorizing statement: _65 = _4 >= 0;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:5:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _4 = *_3;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  created new init_stmt: vect_cst__159 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:5:5: note:  add new stmt: mask__65.35_160 = vect__4.23_144 >= vect_cst__159;
tsvc.c:5:5: note:  ------>vectorizing statement: _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_28(D)
tsvc.c:5:5: note:  created c_28(D)
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _65
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _65 = _4 >= 0;
tsvc.c:5:5: note:  add new stmt: vect__6.38_163 = .MASK_LOAD (vectp_c.36_161, 32B, mask__65.35_160);
tsvc.c:5:5: note:  ------>vectorizing statement: _9 = _6 + pretmp_56;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _65), type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _65), type of def: internal
tsvc.c:5:5: note:    def_stmt =  _6 = .MASK_LOAD (_5, 32B, _65);
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: pretmp_56
tsvc.c:5:5: note:  vect_is_simple_use: operand *_55, type of def: internal
tsvc.c:5:5: note:    def_stmt =  pretmp_56 = *_55;
tsvc.c:5:5: note:  add new stmt: vect__9.39_164 = vect__6.38_163 + vect_pretmp_56.26_147;
tsvc.c:5:5: note:  ------>vectorizing statement: _10 = e_30(D) + _2;
tsvc.c:5:5: note:  ------>vectorizing statement: _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_30(D)
tsvc.c:5:5: note:  created e_30(D)
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _65
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _65 = _4 >= 0;
tsvc.c:5:5: note:  add new stmt: vect__11.42_167 = .MASK_LOAD (vectp_e.40_165, 32B, mask__65.35_160);
tsvc.c:5:5: note:  ------>vectorizing statement: _13 = _9 + _11;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _6 + pretmp_56, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_10, 32B, _65), type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:5:5: note:  vect_is_simple_use: operand _6 + pretmp_56, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _9 = _6 + pretmp_56;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_10, 32B, _65), type of def: internal
tsvc.c:5:5: note:    def_stmt =  _11 = .MASK_LOAD (_10, 32B, _65);
tsvc.c:5:5: note:  add new stmt: vect__13.43_168 = vect__9.39_164 + vect__11.42_167;
tsvc.c:5:5: note:  ------>vectorizing statement: .MASK_STORE (_57, 32B, _65, _13);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:5:5: note:  vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:5:5: note:  transform store. ncopies = 1
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _13
tsvc.c:5:5: note:  vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _13 = _9 + _11;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _65
tsvc.c:5:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _65 = _4 >= 0;
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_31(D)
tsvc.c:5:5: note:  created a_31(D)
tsvc.c:5:5: note:  add new stmt: .MASK_STORE (vectp_a.44_169, 32B, mask__65.35_160, vect__13.43_168);
tsvc.c:5:5: note:  ------>vectorizing statement: ivtmp_51 = ivtmp_52 - 1;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_b.21_143 = vectp_b.21_142 + 32;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_d.24_146 = vectp_d.24_145 + 32;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_a.27_149 = vectp_a.27_148 + 32;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_c.33_157 = vectp_c.33_156 + 32;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_c.36_162 = vectp_c.36_161 + 32;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_e.40_166 = vectp_e.40_165 + 32;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_a.44_170 = vectp_a.44_169 + 32;
tsvc.c:5:5: note:  ------>vectorizing statement: if (ivtmp_51 != 0)
tsvc.c:5:5: note:  New loop exit condition: if (ivtmp_173 < 8191)
tsvc.c:5:5: note:  LOOP VECTORIZED

tsvc.c:5:5: note:   === vect_update_inits_of_dr ===

Analyzing loop at tsvc.c:5
tsvc.c:5:5: optimized: loop vectorized using 16 byte vectors
tsvc.c:5:5: note:  === vec_transform_loop ===
Removing basic block 24
;; basic block 24, loop depth 0
;;  pred:       16
;;  succ:      


tsvc.c:5:5: note:  vect_can_advance_ivs_p:
tsvc.c:5:5: note:  Analyze phi: i_113 = PHI <65528(20), _123(22)>
tsvc.c:5:5: note:  Analyze phi: .MEM_114 = PHI <.MEM_141(20), .MEM_139(22)>
tsvc.c:5:5: note:  reduc or virtual phi. skip.
tsvc.c:5:5: note:  Analyze phi: ivtmp_115 = PHI <7(20), ivtmp_140(22)>
tsvc.c:5:5: note:  vect_update_ivs_after_vectorizer: phi: i_113 = PHI <65528(20), _123(22)>
tsvc.c:5:5: note:  vect_update_ivs_after_vectorizer: phi: .MEM_114 = PHI <.MEM_141(20), .MEM_139(22)>
tsvc.c:5:5: note:  reduc or virtual phi. skip.
tsvc.c:5:5: note:  vect_update_ivs_after_vectorizer: phi: ivtmp_115 = PHI <7(20), ivtmp_140(22)>
tsvc.c:5:5: note:  ------>vectorizing phi: i_113 = PHI <_123(22), 65528(31)>
tsvc.c:5:5: note:  ------>vectorizing phi: .MEM_114 = PHI <.MEM_139(22), .MEM_141(31)>
tsvc.c:5:5: note:  ------>vectorizing phi: ivtmp_115 = PHI <ivtmp_140(22), 7(31)>
tsvc.c:5:5: note:  ------>vectorizing statement: _116 = (long unsigned int) i_113;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_68 = i_113 w* 4;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_69 = (long unsigned int) patt_68;
tsvc.c:5:5: note:  ------>vectorizing statement: _118 = b_27(D) + _117;
tsvc.c:5:5: note:  ------>vectorizing statement: _119 = *_118;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_27(D)
tsvc.c:5:5: note:  created vectp_b.49_202
tsvc.c:5:5: note:  add new stmt: vect__119.50_205 = MEM <vector(4) int> [(int *)vectp_b.48_203];
tsvc.c:5:5: note:  ------>vectorizing statement: _120 = d_29(D) + _117;
tsvc.c:5:5: note:  ------>vectorizing statement: pretmp_121 = *_120;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *d_29(D)
tsvc.c:5:5: note:  created vectp_d.52_206
tsvc.c:5:5: note:  add new stmt: vect_pretmp_121.53_209 = MEM <vector(4) int> [(int *)vectp_d.51_207];
tsvc.c:5:5: note:  ------>vectorizing statement: _122 = a_31(D) + _117;
tsvc.c:5:5: note:  ------>vectorizing statement: _123 = i_113 + 1;
tsvc.c:5:5: note:  ------>vectorizing statement: _124 = *_122;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_31(D)
tsvc.c:5:5: note:  created vectp_a.55_210
tsvc.c:5:5: note:  add new stmt: vect__124.56_213 = MEM <vector(4) int> [(int *)vectp_a.54_211];
tsvc.c:5:5: note:  ------>vectorizing statement: _125 = _124 + pretmp_121;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand *_122, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  vect_is_simple_use: operand *_120, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _124
tsvc.c:5:5: note:  vect_is_simple_use: operand *_122, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _124 = *_122;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: pretmp_121
tsvc.c:5:5: note:  vect_is_simple_use: operand *_120, type of def: internal
tsvc.c:5:5: note:    def_stmt =  pretmp_121 = *_120;
tsvc.c:5:5: note:  add new stmt: vect__125.57_214 = vect__124.56_213 + vect_pretmp_121.53_209;
tsvc.c:5:5: note:  ------>vectorizing statement: _126 = (sizetype) _123;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_70 = _123 w* 4;
tsvc.c:5:5: note:  ------>vectorizing statement: patt_71 = (sizetype) patt_70;
tsvc.c:5:5: note:  ------>vectorizing statement: _128 = c_28(D) + _127;
tsvc.c:5:5: note:  ------>vectorizing statement: _129 = _125 + pretmp_121;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _124 + pretmp_121, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  vect_is_simple_use: operand *_120, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _125
tsvc.c:5:5: note:  vect_is_simple_use: operand _124 + pretmp_121, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _125 = _124 + pretmp_121;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: pretmp_121
tsvc.c:5:5: note:  vect_is_simple_use: operand *_120, type of def: internal
tsvc.c:5:5: note:    def_stmt =  pretmp_121 = *_120;
tsvc.c:5:5: note:  add new stmt: vect__129.58_215 = vect__125.57_214 + vect_pretmp_121.53_209;
tsvc.c:5:5: note:  ------>vectorizing statement: _130 = _119 < 0;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand *_118, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _119
tsvc.c:5:5: note:  vect_is_simple_use: operand *_118, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _119 = *_118;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  created new init_stmt: vect_cst__216 = { 0, 0, 0, 0 };
tsvc.c:5:5: note:  add new stmt: mask__130.59_217 = vect__119.50_205 < vect_cst__216;
tsvc.c:5:5: note:  ------>vectorizing statement: .MASK_STORE (_128, 32B, _130, _129);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 < 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:  vect_is_simple_use: operand _125 + pretmp_121, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  transform store. ncopies = 1
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _129
tsvc.c:5:5: note:  vect_is_simple_use: operand _125 + pretmp_121, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _129 = _125 + pretmp_121;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _130
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 < 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _130 = _119 < 0;
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *c_28(D)
tsvc.c:5:5: note:  created vectp_c.61_218
tsvc.c:5:5: note:  add new stmt: .MASK_STORE (vectp_c.60_219, 32B, mask__130.59_217, vect__129.58_215);
tsvc.c:5:5: note:  ------>vectorizing statement: _132 = c_28(D) + _117;
tsvc.c:5:5: note:  ------>vectorizing statement: _133 = _119 >= 0;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand *_118, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _119
tsvc.c:5:5: note:  vect_is_simple_use: operand *_118, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _119 = *_118;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:5:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:5:5: note:  created new init_stmt: vect_cst__222 = { 0, 0, 0, 0 };
tsvc.c:5:5: note:  add new stmt: mask__133.62_223 = vect__119.50_205 >= vect_cst__222;
tsvc.c:5:5: note:  ------>vectorizing statement: _134 = .MASK_LOAD (_132, 32B, _133);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 >= 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *c_28(D)
tsvc.c:5:5: note:  created vectp_c.64_224
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _133
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 >= 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _133 = _119 >= 0;
tsvc.c:5:5: note:  add new stmt: vect__134.65_227 = .MASK_LOAD (vectp_c.63_225, 32B, mask__133.62_223);
tsvc.c:5:5: note:  ------>vectorizing statement: _135 = _134 + pretmp_121;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_132, 32B, _133), type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  vect_is_simple_use: operand *_120, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _134
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_132, 32B, _133), type of def: internal
tsvc.c:5:5: note:    def_stmt =  _134 = .MASK_LOAD (_132, 32B, _133);
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: pretmp_121
tsvc.c:5:5: note:  vect_is_simple_use: operand *_120, type of def: internal
tsvc.c:5:5: note:    def_stmt =  pretmp_121 = *_120;
tsvc.c:5:5: note:  add new stmt: vect__135.66_228 = vect__134.65_227 + vect_pretmp_121.53_209;
tsvc.c:5:5: note:  ------>vectorizing statement: _136 = e_30(D) + _117;
tsvc.c:5:5: note:  ------>vectorizing statement: _137 = .MASK_LOAD (_136, 32B, _133);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 >= 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:  transform load. ncopies = 1
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *e_30(D)
tsvc.c:5:5: note:  created vectp_e.68_229
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _133
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 >= 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _133 = _119 >= 0;
tsvc.c:5:5: note:  add new stmt: vect__137.69_232 = .MASK_LOAD (vectp_e.67_230, 32B, mask__133.62_223);
tsvc.c:5:5: note:  ------>vectorizing statement: _138 = _135 + _137;
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _134 + pretmp_121, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_136, 32B, _133), type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  transform binary/unary operation.
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _135
tsvc.c:5:5: note:  vect_is_simple_use: operand _134 + pretmp_121, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _135 = _134 + pretmp_121;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _137
tsvc.c:5:5: note:  vect_is_simple_use: operand .MASK_LOAD (_136, 32B, _133), type of def: internal
tsvc.c:5:5: note:    def_stmt =  _137 = .MASK_LOAD (_136, 32B, _133);
tsvc.c:5:5: note:  add new stmt: vect__138.70_233 = vect__135.66_228 + vect__137.69_232;
tsvc.c:5:5: note:  ------>vectorizing statement: .MASK_STORE (_122, 32B, _133, _138);
tsvc.c:5:5: note:  transform statement.
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 >= 0, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:5:5: note:  vect_is_simple_use: operand _135 + _137, type of def: internal
tsvc.c:5:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:5:5: note:  transform store. ncopies = 1
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _138
tsvc.c:5:5: note:  vect_is_simple_use: operand _135 + _137, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _138 = _135 + _137;
tsvc.c:5:5: note:  vect_get_vec_def_for_operand: _133
tsvc.c:5:5: note:  vect_is_simple_use: operand _119 >= 0, type of def: internal
tsvc.c:5:5: note:    def_stmt =  _133 = _119 >= 0;
tsvc.c:5:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_31(D)
tsvc.c:5:5: note:  created vectp_a.72_234
tsvc.c:5:5: note:  add new stmt: .MASK_STORE (vectp_a.71_235, 32B, mask__133.62_223, vect__138.70_233);
tsvc.c:5:5: note:  ------>vectorizing statement: ivtmp_140 = ivtmp_115 - 1;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_b.48_204 = vectp_b.48_203 + 16;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_d.51_208 = vectp_d.51_207 + 16;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_a.54_212 = vectp_a.54_211 + 16;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_c.60_220 = vectp_c.60_219 + 16;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_c.63_226 = vectp_c.63_225 + 16;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_e.67_231 = vectp_e.67_230 + 16;
tsvc.c:5:5: note:  ------>vectorizing statement: vectp_a.71_236 = vectp_a.71_235 + 16;
tsvc.c:5:5: note:  ------>vectorizing statement: if (ivtmp_140 != 0)
tsvc.c:5:5: note:  New loop exit condition: if (ivtmp_239 < 1)
tsvc.c:5:5: note:  LOOP EPILOGUE VECTORIZED (MODE=V16QI)
tsvc.c:3:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       23


Merging blocks 20 and 31
fix_loop_structure: fixing up loops for function
s161 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(4) int * vectp_a.72;
  vector(4) int * vectp_a.71;
  vector(4) int vect__138.70;
  vector(4) int vect__137.69;
  vector(4) int * vectp_e.68;
  vector(4) int * vectp_e.67;
  vector(4) int vect__135.66;
  vector(4) int vect__134.65;
  vector(4) int * vectp_c.64;
  vector(4) int * vectp_c.63;
  vector(4) <unnamed type> mask__133.62;
  vector(4) int * vectp_c.61;
  vector(4) int * vectp_c.60;
  vector(4) <unnamed type> mask__130.59;
  vector(4) int vect__129.58;
  vector(4) int vect__125.57;
  vector(4) int vect__124.56;
  vector(4) int * vectp_a.55;
  vector(4) int * vectp_a.54;
  vector(4) int vect_pretmp_121.53;
  vector(4) int * vectp_d.52;
  vector(4) int * vectp_d.51;
  vector(4) int vect__119.50;
  vector(4) int * vectp_b.49;
  vector(4) int * vectp_b.48;
  unsigned int tmp.47;
  int tmp.46;
  vector(8) int * vectp_a.45;
  vector(8) int * vectp_a.44;
  vector(8) int vect__13.43;
  vector(8) int vect__11.42;
  vector(8) int * vectp_e.41;
  vector(8) int * vectp_e.40;
  vector(8) int vect__9.39;
  vector(8) int vect__6.38;
  vector(8) int * vectp_c.37;
  vector(8) int * vectp_c.36;
  vector(8) <unnamed type> mask__65.35;
  vector(8) int * vectp_c.34;
  vector(8) int * vectp_c.33;
  vector(8) <unnamed type> mask__63.32;
  vector(8) int vect__22.31;
  vector(8) int vect__18.30;
  vector(8) int vect__15.29;
  vector(8) int * vectp_a.28;
  vector(8) int * vectp_a.27;
  vector(8) int vect_pretmp_56.26;
  vector(8) int * vectp_d.25;
  vector(8) int * vectp_d.24;
  vector(8) int vect__4.23;
  vector(8) int * vectp_b.22;
  vector(8) int * vectp_b.21;
  unsigned int tmp.20;
  int tmp.19;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int * _10;
  int _11;
  int _12;
  int _13;
  int _14;
  int _15;
  int _16;
  sizetype _17;
  int _18;
  sizetype _19;
  sizetype _20;
  int * _21;
  int _22;
  int * _23;
  int _25;
  int _34;
  sizetype _35;
  int * _36;
  int * _37;
  long unsigned int _38;
  int _41;
  int _42;
  int _43;
  int * _44;
  int pretmp_45;
  long unsigned int _46;
  unsigned int ivtmp_47;
  _Bool _50;
  unsigned int ivtmp_51;
  unsigned int ivtmp_52;
  int * _54;
  int * _55;
  int pretmp_56;
  int * _57;
  int _58;
  unsigned int ivtmp_61;
  _Bool _63;
  _Bool _65;
  int * _73;
  int * _74;
  ssizetype _75;
  sizetype _76;
  _Bool _77;
  int * _78;
  ssizetype _79;
  sizetype _80;
  _Bool _81;
  _Bool _82;
  int * _83;
  int * _84;
  ssizetype _85;
  sizetype _86;
  _Bool _87;
  _Bool _88;
  int * _89;
  _Bool _90;
  int * _91;
  int * _92;
  _Bool _93;
  _Bool _94;
  _Bool _95;
  int * _96;
  _Bool _97;
  int * _98;
  _Bool _99;
  _Bool _100;
  _Bool _101;
  int * _102;
  ssizetype _103;
  sizetype _104;
  _Bool _105;
  _Bool _106;
  int * _107;
  ssizetype _108;
  sizetype _109;
  _Bool _110;
  _Bool _111;
  unsigned int ivtmp_115;
  long unsigned int _116;
  long unsigned int _117;
  int * _118;
  int _119;
  int * _120;
  int pretmp_121;
  int * _122;
  int _123;
  int _124;
  int _125;
  sizetype _126;
  sizetype _127;
  int * _128;
  int _129;
  _Bool _130;
  int * _132;
  _Bool _133;
  int _134;
  int _135;
  int * _136;
  int _137;
  int _138;
  unsigned int ivtmp_140;
  vector(8) int vect_cst__153;
  vector(8) int vect_cst__159;
  unsigned int ivtmp_172;
  unsigned int ivtmp_173;
  unsigned int ivtmp_176;
  long unsigned int _177;
  long unsigned int _178;
  int * _179;
  int _180;
  int * _181;
  int pretmp_182;
  int * _183;
  int _184;
  unsigned int ivtmp_186;
  int * _187;
  int _188;
  int _189;
  int * _190;
  int _191;
  int _192;
  int _194;
  int _195;
  sizetype _196;
  sizetype _197;
  int * _198;
  int _199;
  vector(4) int vect_cst__216;
  vector(4) int vect_cst__222;
  unsigned int ivtmp_238;
  unsigned int ivtmp_239;

  <bb 2> [local count: 10737414]:
  _73 = c_28(D) + 4;
  _74 = b_27(D) + 4;
  _75 = _73 - _74;
  _76 = (sizetype) _75;
  _77 = _76 > 24;
  _78 = b_27(D) + 4;
  _79 = a_31(D) - _78;
  _80 = (sizetype) _79;
  _81 = _80 > 24;
  _82 = _77 & _81;
  _83 = c_28(D) + 4;
  _84 = d_29(D) + 4;
  _85 = _83 - _84;
  _86 = (sizetype) _85;
  _87 = _86 > 24;
  _88 = _82 & _87;
  _89 = c_28(D) + 36;
  _90 = e_30(D) >= _89;
  _91 = e_30(D) + 32;
  _92 = c_28(D) + 4;
  _93 = _91 <= _92;
  _94 = _90 | _93;
  _95 = _88 & _94;
  _96 = c_28(D) + 36;
  _97 = a_31(D) >= _96;
  _98 = a_31(D) + 32;
  _99 = c_28(D) >= _98;
  _100 = _97 | _99;
  _101 = _95 & _100;
  _102 = d_29(D) + 4;
  _103 = a_31(D) - _102;
  _104 = (sizetype) _103;
  _105 = _104 > 24;
  _106 = _101 & _105;
  _107 = e_30(D) + 4;
  _108 = a_31(D) - _107;
  _109 = (sizetype) _108;
  _110 = _109 > 24;
  _111 = _106 & _110;
  _50 = 1;
  if (_111 != 0)
    goto <bb 23>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 23> [local count: 10737414]:
  vect_cst__153 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vectp_c.34_155 = c_28(D) + 4;
  vect_cst__159 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374140]:
  # i_39 = PHI <_58(8), 0(23)>
  # ivtmp_52 = PHI <ivtmp_51(8), 65535(23)>
  # vectp_b.21_142 = PHI <vectp_b.21_143(8), b_27(D)(23)>
  # vectp_d.24_145 = PHI <vectp_d.24_146(8), d_29(D)(23)>
  # vectp_a.27_148 = PHI <vectp_a.27_149(8), a_31(D)(23)>
  # vectp_c.33_156 = PHI <vectp_c.33_157(8), vectp_c.34_155(23)>
  # vectp_c.36_161 = PHI <vectp_c.36_162(8), c_28(D)(23)>
  # vectp_e.40_165 = PHI <vectp_e.40_166(8), e_30(D)(23)>
  # vectp_a.44_169 = PHI <vectp_a.44_170(8), a_31(D)(23)>
  # ivtmp_172 = PHI <ivtmp_173(8), 0(23)>
  _1 = (long unsigned int) i_39;
  _2 = _1 * 4;
  _3 = b_27(D) + _2;
  vect__4.23_144 = MEM <vector(8) int> [(int *)vectp_b.21_142];
  _4 = *_3;
  _55 = d_29(D) + _2;
  vect_pretmp_56.26_147 = MEM <vector(8) int> [(int *)vectp_d.24_145];
  pretmp_56 = *_55;
  _57 = a_31(D) + _2;
  _58 = i_39 + 1;
  vect__15.29_150 = MEM <vector(8) int> [(int *)vectp_a.27_148];
  _15 = *_57;
  vect__18.30_151 = vect__15.29_150 + vect_pretmp_56.26_147;
  _18 = _15 + pretmp_56;
  _19 = (sizetype) _58;
  _20 = _19 * 4;
  _21 = c_28(D) + _20;
  vect__22.31_152 = vect__18.30_151 + vect_pretmp_56.26_147;
  _22 = _18 + pretmp_56;
  mask__63.32_154 = vect__4.23_144 < vect_cst__153;
  _63 = _4 < 0;
  .MASK_STORE (vectp_c.33_156, 32B, mask__63.32_154, vect__22.31_152);
  _5 = c_28(D) + _2;
  mask__65.35_160 = vect__4.23_144 >= vect_cst__159;
  _65 = _4 >= 0;
  vect__6.38_163 = .MASK_LOAD (vectp_c.36_161, 32B, mask__65.35_160);
  _6 = 0;
  vect__9.39_164 = vect__6.38_163 + vect_pretmp_56.26_147;
  _9 = _6 + pretmp_56;
  _10 = e_30(D) + _2;
  vect__11.42_167 = .MASK_LOAD (vectp_e.40_165, 32B, mask__65.35_160);
  _11 = 0;
  vect__13.43_168 = vect__9.39_164 + vect__11.42_167;
  _13 = _9 + _11;
  .MASK_STORE (vectp_a.44_169, 32B, mask__65.35_160, vect__13.43_168);
  ivtmp_51 = ivtmp_52 - 1;
  vectp_b.21_143 = vectp_b.21_142 + 32;
  vectp_d.24_146 = vectp_d.24_145 + 32;
  vectp_a.27_149 = vectp_a.27_148 + 32;
  vectp_c.33_157 = vectp_c.33_156 + 32;
  vectp_c.36_162 = vectp_c.36_161 + 32;
  vectp_e.40_166 = vectp_e.40_165 + 32;
  vectp_a.44_170 = vectp_a.44_169 + 32;
  ivtmp_173 = ivtmp_172 + 1;
  if (ivtmp_173 < 8191)
    goto <bb 8>; [90.00%]
  else
    goto <bb 20>; [10.00%]

  <bb 8> [local count: 96636725]:
  goto <bb 3>; [100.00%]

  <bb 20> [local count: 10737414]:
  vectp_b.49_202 = b_27(D) + 262112;
  vectp_d.52_206 = d_29(D) + 262112;
  vectp_a.55_210 = a_31(D) + 262112;
  vect_cst__216 = { 0, 0, 0, 0 };
  vectp_c.61_218 = c_28(D) + 262116;
  vect_cst__222 = { 0, 0, 0, 0 };
  vectp_c.64_224 = c_28(D) + 262112;
  vectp_e.68_229 = e_30(D) + 262112;
  vectp_a.72_234 = a_31(D) + 262112;

  <bb 21> [local count: 21474827]:
  # i_113 = PHI <_123(22), 65528(20)>
  # ivtmp_115 = PHI <ivtmp_140(22), 7(20)>
  # vectp_b.48_203 = PHI <vectp_b.48_204(22), vectp_b.49_202(20)>
  # vectp_d.51_207 = PHI <vectp_d.51_208(22), vectp_d.52_206(20)>
  # vectp_a.54_211 = PHI <vectp_a.54_212(22), vectp_a.55_210(20)>
  # vectp_c.60_219 = PHI <vectp_c.60_220(22), vectp_c.61_218(20)>
  # vectp_c.63_225 = PHI <vectp_c.63_226(22), vectp_c.64_224(20)>
  # vectp_e.67_230 = PHI <vectp_e.67_231(22), vectp_e.68_229(20)>
  # vectp_a.71_235 = PHI <vectp_a.71_236(22), vectp_a.72_234(20)>
  # ivtmp_238 = PHI <ivtmp_239(22), 0(20)>
  _116 = (long unsigned int) i_113;
  _117 = _116 * 4;
  _118 = b_27(D) + _117;
  vect__119.50_205 = MEM <vector(4) int> [(int *)vectp_b.48_203];
  _119 = *_118;
  _120 = d_29(D) + _117;
  vect_pretmp_121.53_209 = MEM <vector(4) int> [(int *)vectp_d.51_207];
  pretmp_121 = *_120;
  _122 = a_31(D) + _117;
  _123 = i_113 + 1;
  vect__124.56_213 = MEM <vector(4) int> [(int *)vectp_a.54_211];
  _124 = *_122;
  vect__125.57_214 = vect__124.56_213 + vect_pretmp_121.53_209;
  _125 = _124 + pretmp_121;
  _126 = (sizetype) _123;
  _127 = _126 * 4;
  _128 = c_28(D) + _127;
  vect__129.58_215 = vect__125.57_214 + vect_pretmp_121.53_209;
  _129 = _125 + pretmp_121;
  mask__130.59_217 = vect__119.50_205 < vect_cst__216;
  _130 = _119 < 0;
  .MASK_STORE (vectp_c.60_219, 32B, mask__130.59_217, vect__129.58_215);
  _132 = c_28(D) + _117;
  mask__133.62_223 = vect__119.50_205 >= vect_cst__222;
  _133 = _119 >= 0;
  vect__134.65_227 = .MASK_LOAD (vectp_c.63_225, 32B, mask__133.62_223);
  _134 = 0;
  vect__135.66_228 = vect__134.65_227 + vect_pretmp_121.53_209;
  _135 = _134 + pretmp_121;
  _136 = e_30(D) + _117;
  vect__137.69_232 = .MASK_LOAD (vectp_e.67_230, 32B, mask__133.62_223);
  _137 = 0;
  vect__138.70_233 = vect__135.66_228 + vect__137.69_232;
  _138 = _135 + _137;
  .MASK_STORE (vectp_a.71_235, 32B, mask__133.62_223, vect__138.70_233);
  ivtmp_140 = ivtmp_115 - 1;
  vectp_b.48_204 = vectp_b.48_203 + 16;
  vectp_d.51_208 = vectp_d.51_207 + 16;
  vectp_a.54_212 = vectp_a.54_211 + 16;
  vectp_c.60_220 = vectp_c.60_219 + 16;
  vectp_c.63_226 = vectp_c.63_225 + 16;
  vectp_e.67_231 = vectp_e.67_230 + 16;
  vectp_a.71_236 = vectp_a.71_235 + 16;
  ivtmp_239 = ivtmp_238 + 1;
  if (ivtmp_239 < 1)
    goto <bb 22>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 22> [local count: 10737413]:
  goto <bb 21>; [100.00%]

  <bb 25> [local count: 10737414]:

  <bb 26> [local count: 212600877]:
  # i_174 = PHI <65532(25), _184(27)>
  # ivtmp_176 = PHI <3(25), ivtmp_186(27)>
  _177 = (long unsigned int) i_174;
  _178 = _177 * 4;
  _179 = b_27(D) + _178;
  _180 = *_179;
  _181 = d_29(D) + _178;
  pretmp_182 = *_181;
  _183 = a_31(D) + _178;
  _184 = i_174 + 1;
  if (_180 < 0)
    goto <bb 30>; [41.00%]
  else
    goto <bb 29>; [59.00%]

  <bb 27> [local count: 210453395]:
  goto <bb 26>; [100.00%]

  <bb 28> [local count: 212600877]:
  ivtmp_186 = ivtmp_176 - 1;
  if (ivtmp_186 != 0)
    goto <bb 27>; [98.99%]
  else
    goto <bb 17>; [1.01%]

  <bb 29> [local count: 125434518]:
  _187 = c_28(D) + _178;
  _188 = *_187;
  _189 = _188 + pretmp_182;
  _190 = e_30(D) + _178;
  _191 = *_190;
  _192 = _189 + _191;
  *_183 = _192;
  goto <bb 28>; [100.00%]

  <bb 30> [local count: 87166359]:
  _194 = *_183;
  _195 = _194 + pretmp_182;
  _196 = (sizetype) _184;
  _197 = _196 * 4;
  _198 = c_28(D) + _197;
  _199 = _195 + pretmp_182;
  *_198 = _199;
  goto <bb 28>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 212600877]:
  # i_49 = PHI <_41(13), 0(16)>
  # ivtmp_47 = PHI <ivtmp_61(13), 65535(16)>
  _46 = (long unsigned int) i_49;
  _38 = _46 * 4;
  _37 = b_27(D) + _38;
  _25 = *_37;
  _23 = d_29(D) + _38;
  pretmp_45 = *_23;
  _36 = a_31(D) + _38;
  _41 = i_49 + 1;
  if (_25 < 0)
    goto <bb 11>; [41.00%]
  else
    goto <bb 10>; [59.00%]

  <bb 11> [local count: 87166359]:
  _14 = *_36;
  _16 = _14 + pretmp_45;
  _17 = (sizetype) _41;
  _35 = _17 * 4;
  _54 = c_28(D) + _35;
  _34 = _16 + pretmp_45;
  *_54 = _34;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 125434518]:
  _44 = c_28(D) + _38;
  _43 = *_44;
  _42 = _43 + pretmp_45;
  _7 = e_30(D) + _38;
  _8 = *_7;
  _12 = _42 + _8;
  *_36 = _12;

  <bb 12> [local count: 212600877]:
  ivtmp_61 = ivtmp_47 - 1;
  if (ivtmp_61 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 7>; [100.00%]

  <bb 13> [local count: 210453395]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s1161 (s1161, funcdef_no=23, decl_uid=3529, cgraph_uid=24, symbol_order=23)


Analyzing loop at tsvc.c:20
tsvc.c:20:5: note:  === analyze_loop_nest ===
tsvc.c:20:5: note:   === vect_analyze_loop_form ===
tsvc.c:20:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Creating dr for *_3
analyze_innermost: success.
	base_address: c_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_47
analyze_innermost: success.
	base_address: d_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_49
analyze_innermost: success.
	base_address: a_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_17
analyze_innermost: success.
	base_address: b_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_8
analyze_innermost: success.
	base_address: e_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_49
analyze_innermost: success.
	base_address: a_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_26(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:20:5: note:   === vect_analyze_data_refs ===
tsvc.c:20:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:20:5: note:   got vectype for stmt: pretmp_48 = *_47;
vector(8) int
tsvc.c:20:5: note:   got vectype for stmt: _13 = *_49;
vector(8) int
tsvc.c:20:5: note:   got vectype for stmt: .MASK_STORE (_17, 32B, _55, _18);
vector(8) int
tsvc.c:20:5: note:   got vectype for stmt: _9 = .MASK_LOAD (_8, 32B, _57);
vector(8) int
tsvc.c:20:5: note:   got vectype for stmt: .MASK_STORE (_49, 32B, _57, _11);
vector(8) int
tsvc.c:20:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:20:5: note:   Analyze phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:20:5: note:   step: 1,  init: 0
tsvc.c:20:5: note:   Detected induction.
tsvc.c:20:5: note:   Analyze phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   Analyze phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:20:5: note:   step: 4294967295,  init: 65535
tsvc.c:20:5: note:   Detected induction.
tsvc.c:20:5: note:   === vect_determine_precisions ===
tsvc.c:20:5: note:   ivtmp_45 has no range info
tsvc.c:20:5: note:   i_30 has range [0x1, 0xffff]
tsvc.c:20:5: note:   can narrow to unsigned:16 without loss of precision: i_30 = i_35 + 1;
tsvc.c:20:5: note:   _11 has no range info
tsvc.c:20:5: note:   using boolean precision 32 for _57 = _4 >= 0;
tsvc.c:20:5: note:   _7 has no range info
tsvc.c:20:5: note:   using boolean precision 32 for _55 = _4 < 0;
tsvc.c:20:5: note:   _18 has no range info
tsvc.c:20:5: note:   _16 has no range info
tsvc.c:20:5: note:   _13 has no range info
tsvc.c:20:5: note:   pretmp_48 has no range info
tsvc.c:20:5: note:   _4 has no range info
tsvc.c:20:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:20:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:20:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:20:5: note:   === vect_pattern_recog ===
tsvc.c:20:5: note:   vect_is_simple_use: operand (long unsigned int) i_35, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: operand i_35 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:20:5: note:   vect_is_simple_use: operand (long unsigned int) i_35, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: operand i_35 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:20:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:20:5: note:   widen_mult pattern recognized: patt_20 = (long unsigned int) patt_56;
tsvc.c:20:5: note:   extra pattern stmt: patt_56 = i_35 w* 4;
tsvc.c:20:5: note:   vect_is_simple_use: operand i_35 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:20:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:20:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:20:5: note:   init: phi relevant? i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   init: phi relevant? .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   init: phi relevant? ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   init: stmt relevant? _1 = (long unsigned int) i_35;
tsvc.c:20:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:20:5: note:   init: stmt relevant? _3 = c_23(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:20:5: note:   init: stmt relevant? _47 = d_24(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? pretmp_48 = *_47;
tsvc.c:20:5: note:   init: stmt relevant? _49 = a_26(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _13 = *_49;
tsvc.c:20:5: note:   init: stmt relevant? _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   init: stmt relevant? _17 = b_28(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   init: stmt relevant? _55 = _4 < 0;
tsvc.c:20:5: note:   init: stmt relevant? .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:20:5: note:   mark relevant 5, live 0: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   init: stmt relevant? _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   init: stmt relevant? _8 = e_25(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _57 = _4 >= 0;
tsvc.c:20:5: note:   init: stmt relevant? _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   init: stmt relevant? _11 = _7 + _9;
tsvc.c:20:5: note:   init: stmt relevant? .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:20:5: note:   mark relevant 5, live 0: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   init: stmt relevant? i_30 = i_35 + 1;
tsvc.c:20:5: note:   init: stmt relevant? ivtmp_45 = ivtmp_46 - 1;
tsvc.c:20:5: note:   init: stmt relevant? if (ivtmp_45 != 0)
tsvc.c:20:5: note:   worklist: examine stmt: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _57 = _4 >= 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _11 = _7 + _9;
tsvc.c:20:5: note:   worklist: examine stmt: _11 = _7 + _9;
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand .MASK_LOAD (_8, 32B, _57), type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   worklist: examine stmt: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _57 = _4 >= 0;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: pretmp_48 = *_47;
tsvc.c:20:5: note:   worklist: examine stmt: pretmp_48 = *_47;
tsvc.c:20:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:20:5: note:   worklist: examine stmt: _57 = _4 >= 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _55 = _4 < 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand _16 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   worklist: examine stmt: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand _13 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: pretmp_48 = *_47;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _13 = *_49;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: pretmp_48 = *_47;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: _13 = *_49;
tsvc.c:20:5: note:   worklist: examine stmt: _55 = _4 < 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_48 = *_47;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _13 = *_49;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_17, 32B, _55, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _9 = .MASK_LOAD (_8, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_49, 32B, _57, _11);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_48 = *_47;
  stmt_b: _13 = *_49;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_48 = *_47;
  stmt_b: .MASK_STORE (_17, 32B, _55, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_48 = *_47;
  stmt_b: _9 = .MASK_LOAD (_8, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_48 = *_47;
  stmt_b: .MASK_STORE (_49, 32B, _57, _11);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_49;
  stmt_b: .MASK_STORE (_17, 32B, _55, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_49;
  stmt_b: _9 = .MASK_LOAD (_8, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_49;
  stmt_b: .MASK_STORE (_49, 32B, _57, _11);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_17, 32B, _55, _18);
  stmt_b: _9 = .MASK_LOAD (_8, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_17, 32B, _55, _18);
  stmt_b: .MASK_STORE (_49, 32B, _57, _11);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_8, 32B, _57);
  stmt_b: .MASK_STORE (_49, 32B, _57, _11);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_48 = *_47;
  stmt_b: pretmp_48 = *_47;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = *_49;
  stmt_b: _13 = *_49;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_17, 32B, _55, _18);
  stmt_b: .MASK_STORE (_17, 32B, _55, _18);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_8, 32B, _57);
  stmt_b: _9 = .MASK_LOAD (_8, 32B, _57);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_49, 32B, _57, _11);
  stmt_b: .MASK_STORE (_49, 32B, _57, _11);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:22:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_17
consider run-time aliasing test between *_3 and *_17
tsvc.c:22:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_49
consider run-time aliasing test between *_3 and *_49
tsvc.c:29:24: missed:   versioning for alias required: can't determine dependence between *_47 and *_17
consider run-time aliasing test between *_47 and *_17
tsvc.c:29:24: missed:   versioning for alias required: can't determine dependence between *_47 and *_49
consider run-time aliasing test between *_47 and *_49
tsvc.c:29:17: missed:   versioning for alias required: can't determine dependence between *_49 and *_17
consider run-time aliasing test between *_49 and *_17
tsvc.c:20:5: note:   dependence distance  = 0.
tsvc.c:20:5: note:   dependence distance == 0 between *_49 and *_49
tsvc.c:29:14: missed:   versioning for alias required: can't determine dependence between *_17 and *_8
consider run-time aliasing test between *_17 and *_8
tsvc.c:29:14: missed:   versioning for alias required: can't determine dependence between *_17 and *_49
consider run-time aliasing test between *_17 and *_49
tsvc.c:26:31: missed:   versioning for alias required: can't determine dependence between *_8 and *_49
consider run-time aliasing test between *_8 and *_49
tsvc.c:20:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:20:5: note:   ==> examining phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   ==> examining phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   ==> examining phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   ==> examining statement: _1 = (long unsigned int) i_35;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining pattern def stmt: patt_56 = i_35 w* 4;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining pattern statement: patt_20 = (long unsigned int) patt_56;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _3 = c_23(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:20:5: note:   precomputed vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _47 = d_24(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: pretmp_48 = *_47;
tsvc.c:20:5: note:   precomputed vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _49 = a_26(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _13 = *_49;
tsvc.c:20:5: note:   precomputed vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _17 = b_28(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _55 = _4 < 0;
tsvc.c:20:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   precomputed vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _8 = e_25(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _57 = _4 >= 0;
tsvc.c:20:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   precomputed vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: _11 = _7 + _9;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   precomputed vectype: vector(8) int
tsvc.c:20:5: note:   nunits = 8
tsvc.c:20:5: note:   ==> examining statement: i_30 = i_35 + 1;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: ivtmp_45 = ivtmp_46 - 1;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: if (ivtmp_45 != 0)
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   vectorization factor = 8
tsvc.c:20:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x51cfb60 *_3 1 times scalar_load costs 12 in body
0x51cfb60 *_47 1 times scalar_load costs 12 in body
0x51cfb60 *_49 1 times scalar_load costs 12 in body
0x51cfb60 _13 + pretmp_48 1 times scalar_stmt costs 4 in body
0x51cfb60 _16 + pretmp_48 1 times scalar_stmt costs 4 in body
0x51cfb60 _4 < 0 1 times scalar_stmt costs 4 in body
0x51cfb60 .MASK_STORE (_17, 32B, _55, _18) 1 times scalar_store costs 12 in body
0x51cfb60 _4 + pretmp_48 1 times scalar_stmt costs 4 in body
0x51cfb60 _4 >= 0 1 times scalar_stmt costs 4 in body
0x51cfb60 .MASK_LOAD (_8, 32B, _57) 1 times scalar_load costs 12 in body
0x51cfb60 _7 + _9 1 times scalar_stmt costs 4 in body
0x51cfb60 .MASK_STORE (_49, 32B, _57, _11) 1 times scalar_store costs 12 in body
tsvc.c:20:5: note:   === vect_analyze_slp ===
tsvc.c:20:5: note:   === vect_make_slp_decision ===
tsvc.c:20:5: note:  vectorization_factor = 8, niters = 65535
tsvc.c:20:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:20:5: note:   accesses have the same alignment: *_49 and *_49
tsvc.c:20:5: note:   recording new base alignment for c_23(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:20:5: note:   recording new base alignment for d_24(D)
  alignment:    4
  misalignment: 0
  based on:     pretmp_48 = *_47;
tsvc.c:20:5: note:   recording new base alignment for a_26(D)
  alignment:    4
  misalignment: 0
  based on:     _13 = *_49;
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_3
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_47
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_49
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_17
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_8
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_49
tsvc.c:20:5: note:   === vect_prune_runtime_alias_test_list ===
found equal ranges *_49, *_17 and *_49, *_17
merged alias checks:
  reference:      *_3 vs. *_49
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_3 vs. *_17
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_47 vs. *_49
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_47 vs. *_17
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_8 vs. *_49
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_17 vs. *_8
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW
  reference:      *_49 vs. *_17
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR WAW ARBITRARY
tsvc.c:20:5: note:   improved number of alias checks from 8 to 7
tsvc.c:20:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:20:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:20:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:20:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:20:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:20:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:20:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:20:5: note:   vect_can_advance_ivs_p:
tsvc.c:20:5: note:   Analyze phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   Analyze phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   reduc or virtual phi. skip.
tsvc.c:20:5: note:   Analyze phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_load_cost: aligned.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_store_cost: aligned.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_store_cost: aligned.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:20:5: note:   Setting misalignment to unknown (-1).
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:20:5: note:   Vectorizing an unaligned access.
tsvc.c:20:5: note:   Vectorizing an unaligned access.
tsvc.c:20:5: note:   Vectorizing an unaligned access.
tsvc.c:20:5: note:   Vectorizing an unaligned access.
tsvc.c:20:5: note:   Vectorizing an unaligned access.
tsvc.c:20:5: note:   Vectorizing an unaligned access.
tsvc.c:20:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:20:5: note:   === vect_analyze_loop_operations ===
tsvc.c:20:5: note:   examining phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   examining phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   examining phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   ==> examining statement: _1 = (long unsigned int) i_35;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _3 = c_23(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _47 = d_24(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: pretmp_48 = *_47;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _49 = a_26(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _13 = *_49;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _17 = b_28(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand _13 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _55 = _4 < 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:20:5: note:   vect_is_simple_use: operand _16 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _8 = e_25(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _57 = _4 >= 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:20:5: note:   ==> examining statement: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _11 = _7 + _9;
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_is_simple_use: operand .MASK_LOAD (_8, 32B, _57), type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:20:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: i_30 = i_35 + 1;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: ivtmp_45 = ivtmp_46 - 1;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: if (ivtmp_45 != 0)
tsvc.c:20:5: note:   irrelevant.
0x5028ee0 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x5028ee0 *_47 1 times unaligned_load (misalign -1) costs 20 in body
0x5028ee0 *_49 1 times unaligned_load (misalign -1) costs 20 in body
0x5028ee0 _13 + pretmp_48 1 times vector_stmt costs 4 in body
0x5028ee0 _16 + pretmp_48 1 times vector_stmt costs 4 in body
0x5028ee0 _4 < 0 1 times scalar_to_vec costs 4 in prologue
0x5028ee0 _4 < 0 1 times vector_stmt costs 4 in body
0x5028ee0 .MASK_STORE (_17, 32B, _55, _18) 1 times unaligned_store (misalign -1) costs 20 in body
0x5028ee0 _4 + pretmp_48 1 times vector_stmt costs 4 in body
0x5028ee0 _4 >= 0 1 times scalar_to_vec costs 4 in prologue
0x5028ee0 _4 >= 0 1 times vector_stmt costs 4 in body
0x5028ee0 .MASK_LOAD (_8, 32B, _57) 1 times unaligned_load (misalign -1) costs 20 in body
0x5028ee0 _7 + _9 1 times vector_stmt costs 4 in body
0x5028ee0 .MASK_STORE (_49, 32B, _57, _11) 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Statement (exit)if (ivtmp_45 != 0)
 is executed at most 65534 (bounded by 65534) + 1 times in loop 1.
Induction variable (int *) c_23(D) + 4 * iteration does not wrap in statement _3 = c_23(D) + _2;
 in loop 1.
Statement _3 = c_23(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_24(D) + 4 * iteration does not wrap in statement _47 = d_24(D) + _2;
 in loop 1.
Statement _47 = d_24(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) a_26(D) + 4 * iteration does not wrap in statement _49 = a_26(D) + _2;
 in loop 1.
Statement _49 = a_26(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_28(D) + 4 * iteration does not wrap in statement _17 = b_28(D) + _2;
 in loop 1.
Statement _17 = b_28(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) e_25(D) + 4 * iteration does not wrap in statement _8 = e_25(D) + _2;
 in loop 1.
Statement _8 = e_25(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_30 = i_35 + 1;
 in loop 1.
Statement i_30 = i_35 + 1;
 is executed at most 65534 (bounded by 65534) + 1 times in loop 1.
tsvc.c:20:5: note:  not using a fully-masked loop.
0x5028ee0 <unknown> 7 times vector_stmt costs 28 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x5028ee0 <unknown> 1 times cond_branch_taken costs 16 in prologue
0x5028ee0 *_3 7 times scalar_load costs 84 in epilogue
0x5028ee0 *_47 7 times scalar_load costs 84 in epilogue
0x5028ee0 *_49 7 times scalar_load costs 84 in epilogue
0x5028ee0 _13 + pretmp_48 7 times scalar_stmt costs 28 in epilogue
0x5028ee0 _16 + pretmp_48 7 times scalar_stmt costs 28 in epilogue
0x5028ee0 _4 < 0 7 times scalar_stmt costs 28 in epilogue
0x5028ee0 .MASK_STORE (_17, 32B, _55, _18) 7 times scalar_store costs 84 in epilogue
0x5028ee0 _4 + pretmp_48 7 times scalar_stmt costs 28 in epilogue
0x5028ee0 _4 >= 0 7 times scalar_stmt costs 28 in epilogue
0x5028ee0 .MASK_LOAD (_8, 32B, _57) 7 times scalar_load costs 84 in epilogue
0x5028ee0 _7 + _9 7 times scalar_stmt costs 28 in epilogue
0x5028ee0 .MASK_STORE (_49, 32B, _57, _11) 7 times scalar_store costs 84 in epilogue
tsvc.c:20:5: note:  Cost model analysis: 
  Vector inside of loop cost: 144
  Vector prologue cost: 52
  Vector epilogue cost: 672
  Scalar iteration cost: 96
  Scalar outside cost: 8
  Vector outside cost: 724
  prologue iterations: 0
  epilogue iterations: 7
  Calculated minimum iters for profitability: 8
tsvc.c:20:5: note:    Runtime profitability threshold = 8
tsvc.c:20:5: note:    Static estimate profitability threshold = 8
tsvc.c:20:5: note:  epilog loop required
tsvc.c:20:5: note:  vect_can_advance_ivs_p:
tsvc.c:20:5: note:  Analyze phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:  Analyze phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:  reduc or virtual phi. skip.
tsvc.c:20:5: note:  Analyze phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:20:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:20:5: note:  ***** Re-trying analysis with vector mode V16QI
tsvc.c:20:5: note:   === vect_analyze_loop_form ===
tsvc.c:20:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
tsvc.c:20:5: note:   === vect_analyze_data_refs ===
tsvc.c:20:5: note:   got vectype for stmt: _4 = *_3;
vector(4) int
tsvc.c:20:5: note:   got vectype for stmt: pretmp_48 = *_47;
vector(4) int
tsvc.c:20:5: note:   got vectype for stmt: _13 = *_49;
vector(4) int
tsvc.c:20:5: note:   got vectype for stmt: .MASK_STORE (_17, 32B, _55, _18);
vector(4) int
tsvc.c:20:5: note:   got vectype for stmt: _9 = .MASK_LOAD (_8, 32B, _57);
vector(4) int
tsvc.c:20:5: note:   got vectype for stmt: .MASK_STORE (_49, 32B, _57, _11);
vector(4) int
tsvc.c:20:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:20:5: note:   Analyze phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:20:5: note:   step: 1,  init: 0
tsvc.c:20:5: note:   Detected induction.
tsvc.c:20:5: note:   Analyze phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   Analyze phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:20:5: note:   step: 4294967295,  init: 65535
tsvc.c:20:5: note:   Detected induction.
tsvc.c:20:5: note:   === vect_determine_precisions ===
tsvc.c:20:5: note:   ivtmp_45 has no range info
tsvc.c:20:5: note:   i_30 has range [0x1, 0xffff]
tsvc.c:20:5: note:   can narrow to unsigned:16 without loss of precision: i_30 = i_35 + 1;
tsvc.c:20:5: note:   _11 has no range info
tsvc.c:20:5: note:   using boolean precision 32 for _57 = _4 >= 0;
tsvc.c:20:5: note:   _7 has no range info
tsvc.c:20:5: note:   using boolean precision 32 for _55 = _4 < 0;
tsvc.c:20:5: note:   _18 has no range info
tsvc.c:20:5: note:   _16 has no range info
tsvc.c:20:5: note:   _13 has no range info
tsvc.c:20:5: note:   pretmp_48 has no range info
tsvc.c:20:5: note:   _4 has no range info
tsvc.c:20:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:20:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:20:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:20:5: note:   === vect_pattern_recog ===
tsvc.c:20:5: note:   vect_is_simple_use: operand (long unsigned int) i_35, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: operand i_35 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:20:5: note:   vect_is_simple_use: operand (long unsigned int) i_35, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: operand i_35 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:20:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:20:5: note:   widen_mult pattern recognized: patt_59 = (long unsigned int) patt_58;
tsvc.c:20:5: note:   extra pattern stmt: patt_58 = i_35 w* 4;
tsvc.c:20:5: note:   vect_is_simple_use: operand i_35 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:20:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:20:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:20:5: note:   init: phi relevant? i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   init: phi relevant? .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   init: phi relevant? ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   init: stmt relevant? _1 = (long unsigned int) i_35;
tsvc.c:20:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:20:5: note:   init: stmt relevant? _3 = c_23(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:20:5: note:   init: stmt relevant? _47 = d_24(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? pretmp_48 = *_47;
tsvc.c:20:5: note:   init: stmt relevant? _49 = a_26(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _13 = *_49;
tsvc.c:20:5: note:   init: stmt relevant? _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   init: stmt relevant? _17 = b_28(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   init: stmt relevant? _55 = _4 < 0;
tsvc.c:20:5: note:   init: stmt relevant? .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:20:5: note:   mark relevant 5, live 0: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   init: stmt relevant? _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   init: stmt relevant? _8 = e_25(D) + _2;
tsvc.c:20:5: note:   init: stmt relevant? _57 = _4 >= 0;
tsvc.c:20:5: note:   init: stmt relevant? _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   init: stmt relevant? _11 = _7 + _9;
tsvc.c:20:5: note:   init: stmt relevant? .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:20:5: note:   mark relevant 5, live 0: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   init: stmt relevant? i_30 = i_35 + 1;
tsvc.c:20:5: note:   init: stmt relevant? ivtmp_45 = ivtmp_46 - 1;
tsvc.c:20:5: note:   init: stmt relevant? if (ivtmp_45 != 0)
tsvc.c:20:5: note:   worklist: examine stmt: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _57 = _4 >= 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _11 = _7 + _9;
tsvc.c:20:5: note:   worklist: examine stmt: _11 = _7 + _9;
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand .MASK_LOAD (_8, 32B, _57), type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   worklist: examine stmt: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _57 = _4 >= 0;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: pretmp_48 = *_47;
tsvc.c:20:5: note:   worklist: examine stmt: pretmp_48 = *_47;
tsvc.c:20:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:20:5: note:   worklist: examine stmt: _57 = _4 >= 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _55 = _4 < 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand _16 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   worklist: examine stmt: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand _13 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: pretmp_48 = *_47;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _13 = *_49;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: pretmp_48 = *_47;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   worklist: examine stmt: _13 = *_49;
tsvc.c:20:5: note:   worklist: examine stmt: _55 = _4 < 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:20:5: note:   already marked relevant/live.
tsvc.c:20:5: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:20:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:20:5: note:   ==> examining phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   ==> examining phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   ==> examining phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   ==> examining statement: _1 = (long unsigned int) i_35;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining pattern def stmt: patt_58 = i_35 w* 4;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining pattern statement: patt_59 = (long unsigned int) patt_58;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _3 = c_23(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:20:5: note:   precomputed vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _47 = d_24(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: pretmp_48 = *_47;
tsvc.c:20:5: note:   precomputed vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _49 = a_26(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _13 = *_49;
tsvc.c:20:5: note:   precomputed vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _17 = b_28(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _55 = _4 < 0;
tsvc.c:20:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   precomputed vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _8 = e_25(D) + _2;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: _57 = _4 >= 0;
tsvc.c:20:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   precomputed vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: _11 = _7 + _9;
tsvc.c:20:5: note:   get vectype for scalar type: int
tsvc.c:20:5: note:   vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   precomputed vectype: vector(4) int
tsvc.c:20:5: note:   nunits = 4
tsvc.c:20:5: note:   ==> examining statement: i_30 = i_35 + 1;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: ivtmp_45 = ivtmp_46 - 1;
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   ==> examining statement: if (ivtmp_45 != 0)
tsvc.c:20:5: note:   skip.
tsvc.c:20:5: note:   vectorization factor = 4
tsvc.c:20:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x51cfb60 *_3 1 times scalar_load costs 12 in body
0x51cfb60 *_47 1 times scalar_load costs 12 in body
0x51cfb60 *_49 1 times scalar_load costs 12 in body
0x51cfb60 _13 + pretmp_48 1 times scalar_stmt costs 4 in body
0x51cfb60 _16 + pretmp_48 1 times scalar_stmt costs 4 in body
0x51cfb60 _4 < 0 1 times scalar_stmt costs 4 in body
0x51cfb60 .MASK_STORE (_17, 32B, _55, _18) 1 times scalar_store costs 12 in body
0x51cfb60 _4 + pretmp_48 1 times scalar_stmt costs 4 in body
0x51cfb60 _4 >= 0 1 times scalar_stmt costs 4 in body
0x51cfb60 .MASK_LOAD (_8, 32B, _57) 1 times scalar_load costs 12 in body
0x51cfb60 _7 + _9 1 times scalar_stmt costs 4 in body
0x51cfb60 .MASK_STORE (_49, 32B, _57, _11) 1 times scalar_store costs 12 in body
tsvc.c:20:5: note:   === vect_analyze_slp ===
tsvc.c:20:5: note:   === vect_make_slp_decision ===
tsvc.c:20:5: note:  vectorization_factor = 4, niters = 65535
tsvc.c:20:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:20:5: note:   accesses have the same alignment: *_49 and *_49
tsvc.c:20:5: note:   recording new base alignment for c_23(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:20:5: note:   recording new base alignment for d_24(D)
  alignment:    4
  misalignment: 0
  based on:     pretmp_48 = *_47;
tsvc.c:20:5: note:   recording new base alignment for a_26(D)
  alignment:    4
  misalignment: 0
  based on:     _13 = *_49;
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_3
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_47
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_49
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_17
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_8
tsvc.c:20:5: note:   vect_compute_data_ref_alignment:
tsvc.c:20:5: note:   can't force alignment of ref: *_49
tsvc.c:20:5: note:   === vect_prune_runtime_alias_test_list ===
tsvc.c:20:5: note:  Vectorizing an unaligned access.
tsvc.c:20:5: note:  Vectorizing an unaligned access.
tsvc.c:20:5: note:  Vectorizing an unaligned access.
tsvc.c:20:5: note:  Vectorizing an unaligned access.
tsvc.c:20:5: note:  Vectorizing an unaligned access.
tsvc.c:20:5: note:  Vectorizing an unaligned access.
tsvc.c:20:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:20:5: note:   === vect_analyze_loop_operations ===
tsvc.c:20:5: note:   examining phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:   examining phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:   examining phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:   ==> examining statement: _1 = (long unsigned int) i_35;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _3 = c_23(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _47 = d_24(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: pretmp_48 = *_47;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _49 = a_26(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _13 = *_49;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: unknown
tsvc.c:20:5: missed:   Unsupported pattern.
tsvc.c:20:5: missed:   use not simple.
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_49, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _17 = b_28(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand _13 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _55 = _4 < 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:20:5: note:   vect_is_simple_use: operand _16 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _8 = e_25(D) + _2;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: _57 = _4 >= 0;
tsvc.c:20:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:20:5: note:   ==> examining statement: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:20:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: _11 = _7 + _9;
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 + pretmp_48, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_is_simple_use: operand .MASK_LOAD (_8, 32B, _57), type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:    === vectorizable_operation ===
tsvc.c:20:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:   vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:20:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:20:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:20:5: note:   vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:20:5: note:   ==> examining statement: i_30 = i_35 + 1;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: ivtmp_45 = ivtmp_46 - 1;
tsvc.c:20:5: note:   irrelevant.
tsvc.c:20:5: note:   ==> examining statement: if (ivtmp_45 != 0)
tsvc.c:20:5: note:   irrelevant.
0x51eb380 *_3 1 times unaligned_load (misalign -1) costs 12 in body
0x51eb380 *_47 1 times unaligned_load (misalign -1) costs 12 in body
0x51eb380 *_49 1 times unaligned_load (misalign -1) costs 12 in body
0x51eb380 _13 + pretmp_48 1 times vector_stmt costs 4 in body
0x51eb380 _16 + pretmp_48 1 times vector_stmt costs 4 in body
0x51eb380 _4 < 0 1 times scalar_to_vec costs 4 in prologue
0x51eb380 _4 < 0 1 times vector_stmt costs 4 in body
0x51eb380 .MASK_STORE (_17, 32B, _55, _18) 1 times unaligned_store (misalign -1) costs 12 in body
0x51eb380 _4 + pretmp_48 1 times vector_stmt costs 4 in body
0x51eb380 _4 >= 0 1 times scalar_to_vec costs 4 in prologue
0x51eb380 _4 >= 0 1 times vector_stmt costs 4 in body
0x51eb380 .MASK_LOAD (_8, 32B, _57) 1 times unaligned_load (misalign -1) costs 12 in body
0x51eb380 _7 + _9 1 times vector_stmt costs 4 in body
0x51eb380 .MASK_STORE (_49, 32B, _57, _11) 1 times unaligned_store (misalign -1) costs 12 in body
tsvc.c:20:5: note:  not using a fully-masked loop.
0x51eb380 *_3 3 times scalar_load costs 36 in epilogue
0x51eb380 *_47 3 times scalar_load costs 36 in epilogue
0x51eb380 *_49 3 times scalar_load costs 36 in epilogue
0x51eb380 _13 + pretmp_48 3 times scalar_stmt costs 12 in epilogue
0x51eb380 _16 + pretmp_48 3 times scalar_stmt costs 12 in epilogue
0x51eb380 _4 < 0 3 times scalar_stmt costs 12 in epilogue
0x51eb380 .MASK_STORE (_17, 32B, _55, _18) 3 times scalar_store costs 36 in epilogue
0x51eb380 _4 + pretmp_48 3 times scalar_stmt costs 12 in epilogue
0x51eb380 _4 >= 0 3 times scalar_stmt costs 12 in epilogue
0x51eb380 .MASK_LOAD (_8, 32B, _57) 3 times scalar_load costs 36 in epilogue
0x51eb380 _7 + _9 3 times scalar_stmt costs 12 in epilogue
0x51eb380 .MASK_STORE (_49, 32B, _57, _11) 3 times scalar_store costs 36 in epilogue
tsvc.c:20:5: note:  Cost model analysis: 
  Vector inside of loop cost: 96
  Vector prologue cost: 8
  Vector epilogue cost: 288
  Scalar iteration cost: 96
  Scalar outside cost: 0
  Vector outside cost: 296
  prologue iterations: 0
  epilogue iterations: 3
  Calculated minimum iters for profitability: 4
tsvc.c:20:5: note:    Runtime profitability threshold = 4
tsvc.c:20:5: note:    Static estimate profitability threshold = 4
tsvc.c:20:5: note:  epilog loop required
tsvc.c:20:5: note:  vect_can_advance_ivs_p:
tsvc.c:20:5: note:  Analyze phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:  Analyze phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:  reduc or virtual phi. skip.
tsvc.c:20:5: note:  Analyze phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:  ***** Analysis succeeded with vector mode V16QI
tsvc.c:20:5: note:  ***** Choosing vector mode V8SI
tsvc.c:20:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:20:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_49
using an address-based WAR/WAW test
create runtime check for data references *_3 and *_17
using an address-based WAR/WAW test
create runtime check for data references *_47 and *_49
using an address-based WAR/WAW test
create runtime check for data references *_47 and *_17
using an address-based WAR/WAW test
create runtime check for data references *_8 and *_49
using an address-based WAR/WAW test
create runtime check for data references *_17 and *_8
using an address-based overlap test
create runtime check for data references *_49 and *_17
using an address-based overlap test
tsvc.c:20:5: note:  created 7 versioning for alias checks.
tsvc.c:20:5: note:  trying to apply versioning to outer loop 0
tsvc.c:20:5: note:  reusing loop version created by if conversion
tsvc.c:20:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
Removing basic block 19
;; basic block 19, loop depth 0
;;  pred:       15
;;  succ:      


tsvc.c:20:5: note:  vect_can_advance_ivs_p:
tsvc.c:20:5: note:  Analyze phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:  Analyze phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:  reduc or virtual phi. skip.
tsvc.c:20:5: note:  Analyze phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:  vect_update_ivs_after_vectorizer: phi: i_35 = PHI <i_30(8), 0(15)>
tsvc.c:20:5: note:  vect_update_ivs_after_vectorizer: phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(15)>
tsvc.c:20:5: note:  reduc or virtual phi. skip.
tsvc.c:20:5: note:  vect_update_ivs_after_vectorizer: phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(15)>
tsvc.c:20:5: note:  ------>vectorizing phi: i_35 = PHI <i_30(8), 0(23)>
tsvc.c:20:5: note:  ------>vectorizing phi: .MEM_36 = PHI <.MEM_27(8), .MEM_22(D)(23)>
tsvc.c:20:5: note:  ------>vectorizing phi: ivtmp_46 = PHI <ivtmp_45(8), 65535(23)>
tsvc.c:20:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_35;
tsvc.c:20:5: note:  ------>vectorizing statement: patt_56 = i_35 w* 4;
tsvc.c:20:5: note:  ------>vectorizing statement: patt_20 = (long unsigned int) patt_56;
tsvc.c:20:5: note:  ------>vectorizing statement: _3 = c_23(D) + _2;
tsvc.c:20:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_23(D)
tsvc.c:20:5: note:  created c_23(D)
tsvc.c:20:5: note:  add new stmt: vect__4.111_123 = MEM <vector(8) int> [(int *)vectp_c.109_121];
tsvc.c:20:5: note:  ------>vectorizing statement: _47 = d_24(D) + _2;
tsvc.c:20:5: note:  ------>vectorizing statement: pretmp_48 = *_47;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_24(D)
tsvc.c:20:5: note:  created d_24(D)
tsvc.c:20:5: note:  add new stmt: vect_pretmp_48.114_126 = MEM <vector(8) int> [(int *)vectp_d.112_124];
tsvc.c:20:5: note:  ------>vectorizing statement: _49 = a_26(D) + _2;
tsvc.c:20:5: note:  ------>vectorizing statement: _13 = *_49;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_26(D)
tsvc.c:20:5: note:  created a_26(D)
tsvc.c:20:5: note:  add new stmt: vect__13.117_129 = MEM <vector(8) int> [(int *)vectp_a.115_127];
tsvc.c:20:5: note:  ------>vectorizing statement: _16 = _13 + pretmp_48;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_49, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _13
tsvc.c:20:5: note:  vect_is_simple_use: operand *_49, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _13 = *_49;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: pretmp_48
tsvc.c:20:5: note:  vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:    def_stmt =  pretmp_48 = *_47;
tsvc.c:20:5: note:  add new stmt: vect__16.118_130 = vect__13.117_129 + vect_pretmp_48.114_126;
tsvc.c:20:5: note:  ------>vectorizing statement: _17 = b_28(D) + _2;
tsvc.c:20:5: note:  ------>vectorizing statement: _18 = _16 + pretmp_48;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _13 + pretmp_48, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _16
tsvc.c:20:5: note:  vect_is_simple_use: operand _13 + pretmp_48, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _16 = _13 + pretmp_48;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: pretmp_48
tsvc.c:20:5: note:  vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:    def_stmt =  pretmp_48 = *_47;
tsvc.c:20:5: note:  add new stmt: vect__18.119_131 = vect__16.118_130 + vect_pretmp_48.114_126;
tsvc.c:20:5: note:  ------>vectorizing statement: _55 = _4 < 0;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:20:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _4 = *_3;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  created new init_stmt: vect_cst__132 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:20:5: note:  add new stmt: mask__55.120_133 = vect__4.111_123 < vect_cst__132;
tsvc.c:20:5: note:  ------>vectorizing statement: .MASK_STORE (_17, 32B, _55, _18);
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:20:5: note:  vect_is_simple_use: operand _16 + pretmp_48, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  transform store. ncopies = 1
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _18
tsvc.c:20:5: note:  vect_is_simple_use: operand _16 + pretmp_48, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _18 = _16 + pretmp_48;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _55
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _55 = _4 < 0;
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_28(D)
tsvc.c:20:5: note:  created b_28(D)
tsvc.c:20:5: note:  add new stmt: .MASK_STORE (vectp_b.121_134, 32B, mask__55.120_133, vect__18.119_131);
tsvc.c:20:5: note:  ------>vectorizing statement: _7 = _4 + pretmp_48;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:20:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _4 = *_3;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: pretmp_48
tsvc.c:20:5: note:  vect_is_simple_use: operand *_47, type of def: internal
tsvc.c:20:5: note:    def_stmt =  pretmp_48 = *_47;
tsvc.c:20:5: note:  add new stmt: vect__7.123_137 = vect__4.111_123 + vect_pretmp_48.114_126;
tsvc.c:20:5: note:  ------>vectorizing statement: _8 = e_25(D) + _2;
tsvc.c:20:5: note:  ------>vectorizing statement: _57 = _4 >= 0;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:20:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _4 = *_3;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  created new init_stmt: vect_cst__138 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:20:5: note:  add new stmt: mask__57.124_139 = vect__4.111_123 >= vect_cst__138;
tsvc.c:20:5: note:  ------>vectorizing statement: _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_25(D)
tsvc.c:20:5: note:  created e_25(D)
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _57
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _57 = _4 >= 0;
tsvc.c:20:5: note:  add new stmt: vect__9.127_142 = .MASK_LOAD (vectp_e.125_140, 32B, mask__57.124_139);
tsvc.c:20:5: note:  ------>vectorizing statement: _11 = _7 + _9;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 + pretmp_48, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  vect_is_simple_use: operand .MASK_LOAD (_8, 32B, _57), type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _7
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 + pretmp_48, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _7 = _4 + pretmp_48;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:20:5: note:  vect_is_simple_use: operand .MASK_LOAD (_8, 32B, _57), type of def: internal
tsvc.c:20:5: note:    def_stmt =  _9 = .MASK_LOAD (_8, 32B, _57);
tsvc.c:20:5: note:  add new stmt: vect__11.128_143 = vect__7.123_137 + vect__9.127_142;
tsvc.c:20:5: note:  ------>vectorizing statement: .MASK_STORE (_49, 32B, _57, _11);
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:20:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:20:5: note:  transform store. ncopies = 1
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:20:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _11 = _7 + _9;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _57
tsvc.c:20:5: note:  vect_is_simple_use: operand _4 >= 0, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _57 = _4 >= 0;
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_26(D)
tsvc.c:20:5: note:  created a_26(D)
tsvc.c:20:5: note:  add new stmt: .MASK_STORE (vectp_a.129_144, 32B, mask__57.124_139, vect__11.128_143);
tsvc.c:20:5: note:  ------>vectorizing statement: i_30 = i_35 + 1;
tsvc.c:20:5: note:  ------>vectorizing statement: ivtmp_45 = ivtmp_46 - 1;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_c.109_122 = vectp_c.109_121 + 32;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_d.112_125 = vectp_d.112_124 + 32;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_a.115_128 = vectp_a.115_127 + 32;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_b.121_135 = vectp_b.121_134 + 32;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_e.125_141 = vectp_e.125_140 + 32;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_a.129_145 = vectp_a.129_144 + 32;
tsvc.c:20:5: note:  ------>vectorizing statement: if (ivtmp_45 != 0)
tsvc.c:20:5: note:  New loop exit condition: if (ivtmp_148 < 8191)
tsvc.c:20:5: note:  LOOP VECTORIZED

tsvc.c:20:5: note:   === vect_update_inits_of_dr ===

Analyzing loop at tsvc.c:20
tsvc.c:20:5: optimized: loop vectorized using 16 byte vectors
tsvc.c:20:5: note:  === vec_transform_loop ===
Removing basic block 24
;; basic block 24, loop depth 0
;;  pred:       16
;;  succ:      


tsvc.c:20:5: note:  vect_can_advance_ivs_p:
tsvc.c:20:5: note:  Analyze phi: i_96 = PHI <65528(20), i_118(22)>
tsvc.c:20:5: note:  Analyze phi: .MEM_97 = PHI <.MEM_120(20), .MEM_117(22)>
tsvc.c:20:5: note:  reduc or virtual phi. skip.
tsvc.c:20:5: note:  Analyze phi: ivtmp_98 = PHI <7(20), ivtmp_119(22)>
tsvc.c:20:5: note:  vect_update_ivs_after_vectorizer: phi: i_96 = PHI <65528(20), i_118(22)>
tsvc.c:20:5: note:  vect_update_ivs_after_vectorizer: phi: .MEM_97 = PHI <.MEM_120(20), .MEM_117(22)>
tsvc.c:20:5: note:  reduc or virtual phi. skip.
tsvc.c:20:5: note:  vect_update_ivs_after_vectorizer: phi: ivtmp_98 = PHI <7(20), ivtmp_119(22)>
tsvc.c:20:5: note:  ------>vectorizing phi: i_96 = PHI <i_118(22), 65528(31)>
tsvc.c:20:5: note:  ------>vectorizing phi: .MEM_97 = PHI <.MEM_117(22), .MEM_120(31)>
tsvc.c:20:5: note:  ------>vectorizing phi: ivtmp_98 = PHI <ivtmp_119(22), 7(31)>
tsvc.c:20:5: note:  ------>vectorizing statement: _99 = (long unsigned int) i_96;
tsvc.c:20:5: note:  ------>vectorizing statement: patt_58 = i_96 w* 4;
tsvc.c:20:5: note:  ------>vectorizing statement: patt_59 = (long unsigned int) patt_58;
tsvc.c:20:5: note:  ------>vectorizing statement: _101 = c_23(D) + _100;
tsvc.c:20:5: note:  ------>vectorizing statement: _102 = *_101;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *c_23(D)
tsvc.c:20:5: note:  created vectp_c.134_173
tsvc.c:20:5: note:  add new stmt: vect__102.135_176 = MEM <vector(4) int> [(int *)vectp_c.133_174];
tsvc.c:20:5: note:  ------>vectorizing statement: _103 = d_24(D) + _100;
tsvc.c:20:5: note:  ------>vectorizing statement: pretmp_104 = *_103;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *d_24(D)
tsvc.c:20:5: note:  created vectp_d.137_177
tsvc.c:20:5: note:  add new stmt: vect_pretmp_104.138_180 = MEM <vector(4) int> [(int *)vectp_d.136_178];
tsvc.c:20:5: note:  ------>vectorizing statement: _105 = a_26(D) + _100;
tsvc.c:20:5: note:  ------>vectorizing statement: _106 = *_105;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_26(D)
tsvc.c:20:5: note:  created vectp_a.140_181
tsvc.c:20:5: note:  add new stmt: vect__106.141_184 = MEM <vector(4) int> [(int *)vectp_a.139_182];
tsvc.c:20:5: note:  ------>vectorizing statement: _107 = _106 + pretmp_104;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_105, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  vect_is_simple_use: operand *_103, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _106
tsvc.c:20:5: note:  vect_is_simple_use: operand *_105, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _106 = *_105;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: pretmp_104
tsvc.c:20:5: note:  vect_is_simple_use: operand *_103, type of def: internal
tsvc.c:20:5: note:    def_stmt =  pretmp_104 = *_103;
tsvc.c:20:5: note:  add new stmt: vect__107.142_185 = vect__106.141_184 + vect_pretmp_104.138_180;
tsvc.c:20:5: note:  ------>vectorizing statement: _108 = b_28(D) + _100;
tsvc.c:20:5: note:  ------>vectorizing statement: _109 = _107 + pretmp_104;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _106 + pretmp_104, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  vect_is_simple_use: operand *_103, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _107
tsvc.c:20:5: note:  vect_is_simple_use: operand _106 + pretmp_104, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _107 = _106 + pretmp_104;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: pretmp_104
tsvc.c:20:5: note:  vect_is_simple_use: operand *_103, type of def: internal
tsvc.c:20:5: note:    def_stmt =  pretmp_104 = *_103;
tsvc.c:20:5: note:  add new stmt: vect__109.143_186 = vect__107.142_185 + vect_pretmp_104.138_180;
tsvc.c:20:5: note:  ------>vectorizing statement: _110 = _102 < 0;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_101, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _102
tsvc.c:20:5: note:  vect_is_simple_use: operand *_101, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _102 = *_101;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  created new init_stmt: vect_cst__187 = { 0, 0, 0, 0 };
tsvc.c:20:5: note:  add new stmt: mask__110.144_188 = vect__102.135_176 < vect_cst__187;
tsvc.c:20:5: note:  ------>vectorizing statement: .MASK_STORE (_108, 32B, _110, _109);
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 < 0, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:20:5: note:  vect_is_simple_use: operand _107 + pretmp_104, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  transform store. ncopies = 1
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _109
tsvc.c:20:5: note:  vect_is_simple_use: operand _107 + pretmp_104, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _109 = _107 + pretmp_104;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _110
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 < 0, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _110 = _102 < 0;
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_28(D)
tsvc.c:20:5: note:  created vectp_b.146_189
tsvc.c:20:5: note:  add new stmt: .MASK_STORE (vectp_b.145_190, 32B, mask__110.144_188, vect__109.143_186);
tsvc.c:20:5: note:  ------>vectorizing statement: _112 = _102 + pretmp_104;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_101, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  vect_is_simple_use: operand *_103, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _102
tsvc.c:20:5: note:  vect_is_simple_use: operand *_101, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _102 = *_101;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: pretmp_104
tsvc.c:20:5: note:  vect_is_simple_use: operand *_103, type of def: internal
tsvc.c:20:5: note:    def_stmt =  pretmp_104 = *_103;
tsvc.c:20:5: note:  add new stmt: vect__112.147_193 = vect__102.135_176 + vect_pretmp_104.138_180;
tsvc.c:20:5: note:  ------>vectorizing statement: _113 = e_25(D) + _100;
tsvc.c:20:5: note:  ------>vectorizing statement: _114 = _102 >= 0;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand *_101, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _102
tsvc.c:20:5: note:  vect_is_simple_use: operand *_101, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _102 = *_101;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:20:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:20:5: note:  created new init_stmt: vect_cst__194 = { 0, 0, 0, 0 };
tsvc.c:20:5: note:  add new stmt: mask__114.148_195 = vect__102.135_176 >= vect_cst__194;
tsvc.c:20:5: note:  ------>vectorizing statement: _115 = .MASK_LOAD (_113, 32B, _114);
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 >= 0, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:20:5: note:  transform load. ncopies = 1
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *e_25(D)
tsvc.c:20:5: note:  created vectp_e.150_196
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _114
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 >= 0, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _114 = _102 >= 0;
tsvc.c:20:5: note:  add new stmt: vect__115.151_199 = .MASK_LOAD (vectp_e.149_197, 32B, mask__114.148_195);
tsvc.c:20:5: note:  ------>vectorizing statement: _116 = _112 + _115;
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 + pretmp_104, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  vect_is_simple_use: operand .MASK_LOAD (_113, 32B, _114), type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  transform binary/unary operation.
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _112
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 + pretmp_104, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _112 = _102 + pretmp_104;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _115
tsvc.c:20:5: note:  vect_is_simple_use: operand .MASK_LOAD (_113, 32B, _114), type of def: internal
tsvc.c:20:5: note:    def_stmt =  _115 = .MASK_LOAD (_113, 32B, _114);
tsvc.c:20:5: note:  add new stmt: vect__116.152_200 = vect__112.147_193 + vect__115.151_199;
tsvc.c:20:5: note:  ------>vectorizing statement: .MASK_STORE (_105, 32B, _114, _116);
tsvc.c:20:5: note:  transform statement.
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 >= 0, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) <unnamed type>
tsvc.c:20:5: note:  vect_is_simple_use: operand _112 + _115, type of def: internal
tsvc.c:20:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:20:5: note:  transform store. ncopies = 1
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _116
tsvc.c:20:5: note:  vect_is_simple_use: operand _112 + _115, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _116 = _112 + _115;
tsvc.c:20:5: note:  vect_get_vec_def_for_operand: _114
tsvc.c:20:5: note:  vect_is_simple_use: operand _102 >= 0, type of def: internal
tsvc.c:20:5: note:    def_stmt =  _114 = _102 >= 0;
tsvc.c:20:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_26(D)
tsvc.c:20:5: note:  created vectp_a.154_201
tsvc.c:20:5: note:  add new stmt: .MASK_STORE (vectp_a.153_202, 32B, mask__114.148_195, vect__116.152_200);
tsvc.c:20:5: note:  ------>vectorizing statement: i_118 = i_96 + 1;
tsvc.c:20:5: note:  ------>vectorizing statement: ivtmp_119 = ivtmp_98 - 1;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_c.133_175 = vectp_c.133_174 + 16;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_d.136_179 = vectp_d.136_178 + 16;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_a.139_183 = vectp_a.139_182 + 16;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_b.145_191 = vectp_b.145_190 + 16;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_e.149_198 = vectp_e.149_197 + 16;
tsvc.c:20:5: note:  ------>vectorizing statement: vectp_a.153_203 = vectp_a.153_202 + 16;
tsvc.c:20:5: note:  ------>vectorizing statement: if (ivtmp_119 != 0)
tsvc.c:20:5: note:  New loop exit condition: if (ivtmp_206 < 1)
tsvc.c:20:5: note:  LOOP EPILOGUE VECTORIZED (MODE=V16QI)
tsvc.c:18:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       23


Merging blocks 20 and 31
fix_loop_structure: fixing up loops for function
s1161 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(4) int * vectp_a.154;
  vector(4) int * vectp_a.153;
  vector(4) int vect__116.152;
  vector(4) int vect__115.151;
  vector(4) int * vectp_e.150;
  vector(4) int * vectp_e.149;
  vector(4) <unnamed type> mask__114.148;
  vector(4) int vect__112.147;
  vector(4) int * vectp_b.146;
  vector(4) int * vectp_b.145;
  vector(4) <unnamed type> mask__110.144;
  vector(4) int vect__109.143;
  vector(4) int vect__107.142;
  vector(4) int vect__106.141;
  vector(4) int * vectp_a.140;
  vector(4) int * vectp_a.139;
  vector(4) int vect_pretmp_104.138;
  vector(4) int * vectp_d.137;
  vector(4) int * vectp_d.136;
  vector(4) int vect__102.135;
  vector(4) int * vectp_c.134;
  vector(4) int * vectp_c.133;
  unsigned int tmp.132;
  int tmp.131;
  vector(8) int * vectp_a.130;
  vector(8) int * vectp_a.129;
  vector(8) int vect__11.128;
  vector(8) int vect__9.127;
  vector(8) int * vectp_e.126;
  vector(8) int * vectp_e.125;
  vector(8) <unnamed type> mask__57.124;
  vector(8) int vect__7.123;
  vector(8) int * vectp_b.122;
  vector(8) int * vectp_b.121;
  vector(8) <unnamed type> mask__55.120;
  vector(8) int vect__18.119;
  vector(8) int vect__16.118;
  vector(8) int vect__13.117;
  vector(8) int * vectp_a.116;
  vector(8) int * vectp_a.115;
  vector(8) int vect_pretmp_48.114;
  vector(8) int * vectp_d.113;
  vector(8) int * vectp_d.112;
  vector(8) int vect__4.111;
  vector(8) int * vectp_c.110;
  vector(8) int * vectp_c.109;
  unsigned int tmp.108;
  int tmp.107;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int _5;
  int _7;
  int * _8;
  int _9;
  int _10;
  int _11;
  int _12;
  int _13;
  int * _14;
  int _15;
  int _16;
  int * _17;
  int _18;
  int _19;
  int * _21;
  int pretmp_31;
  int * _32;
  long unsigned int _33;
  long unsigned int _34;
  int _37;
  int * _38;
  int _39;
  int * _40;
  unsigned int ivtmp_41;
  _Bool _44;
  unsigned int ivtmp_45;
  unsigned int ivtmp_46;
  int * _47;
  int pretmp_48;
  int * _49;
  unsigned int ivtmp_53;
  _Bool _55;
  _Bool _57;
  int * _61;
  ssizetype _62;
  sizetype _63;
  _Bool _64;
  int * _65;
  ssizetype _66;
  sizetype _67;
  _Bool _68;
  _Bool _69;
  int * _70;
  ssizetype _71;
  sizetype _72;
  _Bool _73;
  _Bool _74;
  int * _75;
  ssizetype _76;
  sizetype _77;
  _Bool _78;
  _Bool _79;
  int * _80;
  ssizetype _81;
  sizetype _82;
  _Bool _83;
  _Bool _84;
  int * _85;
  ssizetype _86;
  sizetype _87;
  _Bool _88;
  _Bool _89;
  int * _90;
  ssizetype _91;
  sizetype _92;
  _Bool _93;
  _Bool _94;
  unsigned int ivtmp_98;
  long unsigned int _99;
  long unsigned int _100;
  int * _101;
  int _102;
  int * _103;
  int pretmp_104;
  int * _105;
  int _106;
  int _107;
  int * _108;
  int _109;
  _Bool _110;
  int _112;
  int * _113;
  _Bool _114;
  int _115;
  int _116;
  unsigned int ivtmp_119;
  vector(8) int vect_cst__132;
  vector(8) int vect_cst__138;
  unsigned int ivtmp_147;
  unsigned int ivtmp_148;
  unsigned int ivtmp_151;
  long unsigned int _152;
  long unsigned int _153;
  int * _154;
  int _155;
  int * _156;
  int pretmp_157;
  int * _158;
  unsigned int ivtmp_161;
  int _162;
  int * _163;
  int _164;
  int _165;
  int _167;
  int _168;
  int * _169;
  int _170;
  vector(4) int vect_cst__187;
  vector(4) int vect_cst__194;
  unsigned int ivtmp_205;
  unsigned int ivtmp_206;

  <bb 2> [local count: 10737414]:
  _61 = c_23(D) + 4;
  _62 = a_26(D) - _61;
  _63 = (sizetype) _62;
  _64 = _63 > 24;
  _65 = c_23(D) + 4;
  _66 = b_28(D) - _65;
  _67 = (sizetype) _66;
  _68 = _67 > 24;
  _69 = _64 & _68;
  _70 = d_24(D) + 4;
  _71 = a_26(D) - _70;
  _72 = (sizetype) _71;
  _73 = _72 > 24;
  _74 = _69 & _73;
  _75 = d_24(D) + 4;
  _76 = b_28(D) - _75;
  _77 = (sizetype) _76;
  _78 = _77 > 24;
  _79 = _74 & _78;
  _80 = e_25(D) + 4;
  _81 = a_26(D) - _80;
  _82 = (sizetype) _81;
  _83 = _82 > 24;
  _84 = _79 & _83;
  _85 = e_25(D) + 31;
  _86 = _85 - b_28(D);
  _87 = (sizetype) _86;
  _88 = _87 > 62;
  _89 = _84 & _88;
  _90 = a_26(D) + 31;
  _91 = _90 - b_28(D);
  _92 = (sizetype) _91;
  _93 = _92 > 62;
  _94 = _89 & _93;
  _44 = 1;
  if (_94 != 0)
    goto <bb 23>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 23> [local count: 10737414]:
  vect_cst__132 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__138 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374140]:
  # i_35 = PHI <i_30(8), 0(23)>
  # ivtmp_46 = PHI <ivtmp_45(8), 65535(23)>
  # vectp_c.109_121 = PHI <vectp_c.109_122(8), c_23(D)(23)>
  # vectp_d.112_124 = PHI <vectp_d.112_125(8), d_24(D)(23)>
  # vectp_a.115_127 = PHI <vectp_a.115_128(8), a_26(D)(23)>
  # vectp_b.121_134 = PHI <vectp_b.121_135(8), b_28(D)(23)>
  # vectp_e.125_140 = PHI <vectp_e.125_141(8), e_25(D)(23)>
  # vectp_a.129_144 = PHI <vectp_a.129_145(8), a_26(D)(23)>
  # ivtmp_147 = PHI <ivtmp_148(8), 0(23)>
  _1 = (long unsigned int) i_35;
  _2 = _1 * 4;
  _3 = c_23(D) + _2;
  vect__4.111_123 = MEM <vector(8) int> [(int *)vectp_c.109_121];
  _4 = *_3;
  _47 = d_24(D) + _2;
  vect_pretmp_48.114_126 = MEM <vector(8) int> [(int *)vectp_d.112_124];
  pretmp_48 = *_47;
  _49 = a_26(D) + _2;
  vect__13.117_129 = MEM <vector(8) int> [(int *)vectp_a.115_127];
  _13 = *_49;
  vect__16.118_130 = vect__13.117_129 + vect_pretmp_48.114_126;
  _16 = _13 + pretmp_48;
  _17 = b_28(D) + _2;
  vect__18.119_131 = vect__16.118_130 + vect_pretmp_48.114_126;
  _18 = _16 + pretmp_48;
  mask__55.120_133 = vect__4.111_123 < vect_cst__132;
  _55 = _4 < 0;
  .MASK_STORE (vectp_b.121_134, 32B, mask__55.120_133, vect__18.119_131);
  vect__7.123_137 = vect__4.111_123 + vect_pretmp_48.114_126;
  _7 = _4 + pretmp_48;
  _8 = e_25(D) + _2;
  mask__57.124_139 = vect__4.111_123 >= vect_cst__138;
  _57 = _4 >= 0;
  vect__9.127_142 = .MASK_LOAD (vectp_e.125_140, 32B, mask__57.124_139);
  _9 = 0;
  vect__11.128_143 = vect__7.123_137 + vect__9.127_142;
  _11 = _7 + _9;
  .MASK_STORE (vectp_a.129_144, 32B, mask__57.124_139, vect__11.128_143);
  i_30 = i_35 + 1;
  ivtmp_45 = ivtmp_46 - 1;
  vectp_c.109_122 = vectp_c.109_121 + 32;
  vectp_d.112_125 = vectp_d.112_124 + 32;
  vectp_a.115_128 = vectp_a.115_127 + 32;
  vectp_b.121_135 = vectp_b.121_134 + 32;
  vectp_e.125_141 = vectp_e.125_140 + 32;
  vectp_a.129_145 = vectp_a.129_144 + 32;
  ivtmp_148 = ivtmp_147 + 1;
  if (ivtmp_148 < 8191)
    goto <bb 8>; [90.00%]
  else
    goto <bb 20>; [10.00%]

  <bb 8> [local count: 96636725]:
  goto <bb 3>; [100.00%]

  <bb 20> [local count: 10737414]:
  vectp_c.134_173 = c_23(D) + 262112;
  vectp_d.137_177 = d_24(D) + 262112;
  vectp_a.140_181 = a_26(D) + 262112;
  vect_cst__187 = { 0, 0, 0, 0 };
  vectp_b.146_189 = b_28(D) + 262112;
  vect_cst__194 = { 0, 0, 0, 0 };
  vectp_e.150_196 = e_25(D) + 262112;
  vectp_a.154_201 = a_26(D) + 262112;

  <bb 21> [local count: 21474827]:
  # i_96 = PHI <i_118(22), 65528(20)>
  # ivtmp_98 = PHI <ivtmp_119(22), 7(20)>
  # vectp_c.133_174 = PHI <vectp_c.133_175(22), vectp_c.134_173(20)>
  # vectp_d.136_178 = PHI <vectp_d.136_179(22), vectp_d.137_177(20)>
  # vectp_a.139_182 = PHI <vectp_a.139_183(22), vectp_a.140_181(20)>
  # vectp_b.145_190 = PHI <vectp_b.145_191(22), vectp_b.146_189(20)>
  # vectp_e.149_197 = PHI <vectp_e.149_198(22), vectp_e.150_196(20)>
  # vectp_a.153_202 = PHI <vectp_a.153_203(22), vectp_a.154_201(20)>
  # ivtmp_205 = PHI <ivtmp_206(22), 0(20)>
  _99 = (long unsigned int) i_96;
  _100 = _99 * 4;
  _101 = c_23(D) + _100;
  vect__102.135_176 = MEM <vector(4) int> [(int *)vectp_c.133_174];
  _102 = *_101;
  _103 = d_24(D) + _100;
  vect_pretmp_104.138_180 = MEM <vector(4) int> [(int *)vectp_d.136_178];
  pretmp_104 = *_103;
  _105 = a_26(D) + _100;
  vect__106.141_184 = MEM <vector(4) int> [(int *)vectp_a.139_182];
  _106 = *_105;
  vect__107.142_185 = vect__106.141_184 + vect_pretmp_104.138_180;
  _107 = _106 + pretmp_104;
  _108 = b_28(D) + _100;
  vect__109.143_186 = vect__107.142_185 + vect_pretmp_104.138_180;
  _109 = _107 + pretmp_104;
  mask__110.144_188 = vect__102.135_176 < vect_cst__187;
  _110 = _102 < 0;
  .MASK_STORE (vectp_b.145_190, 32B, mask__110.144_188, vect__109.143_186);
  vect__112.147_193 = vect__102.135_176 + vect_pretmp_104.138_180;
  _112 = _102 + pretmp_104;
  _113 = e_25(D) + _100;
  mask__114.148_195 = vect__102.135_176 >= vect_cst__194;
  _114 = _102 >= 0;
  vect__115.151_199 = .MASK_LOAD (vectp_e.149_197, 32B, mask__114.148_195);
  _115 = 0;
  vect__116.152_200 = vect__112.147_193 + vect__115.151_199;
  _116 = _112 + _115;
  .MASK_STORE (vectp_a.153_202, 32B, mask__114.148_195, vect__116.152_200);
  i_118 = i_96 + 1;
  ivtmp_119 = ivtmp_98 - 1;
  vectp_c.133_175 = vectp_c.133_174 + 16;
  vectp_d.136_179 = vectp_d.136_178 + 16;
  vectp_a.139_183 = vectp_a.139_182 + 16;
  vectp_b.145_191 = vectp_b.145_190 + 16;
  vectp_e.149_198 = vectp_e.149_197 + 16;
  vectp_a.153_203 = vectp_a.153_202 + 16;
  ivtmp_206 = ivtmp_205 + 1;
  if (ivtmp_206 < 1)
    goto <bb 22>; [50.00%]
  else
    goto <bb 25>; [50.00%]

  <bb 22> [local count: 10737413]:
  goto <bb 21>; [100.00%]

  <bb 25> [local count: 10737414]:

  <bb 26> [local count: 212600877]:
  # i_149 = PHI <65532(25), i_160(27)>
  # ivtmp_151 = PHI <3(25), ivtmp_161(27)>
  _152 = (long unsigned int) i_149;
  _153 = _152 * 4;
  _154 = c_23(D) + _153;
  _155 = *_154;
  _156 = d_24(D) + _153;
  pretmp_157 = *_156;
  _158 = a_26(D) + _153;
  if (_155 < 0)
    goto <bb 30>; [41.00%]
  else
    goto <bb 29>; [59.00%]

  <bb 27> [local count: 210453395]:
  goto <bb 26>; [100.00%]

  <bb 28> [local count: 212600877]:
  i_160 = i_149 + 1;
  ivtmp_161 = ivtmp_151 - 1;
  if (ivtmp_161 != 0)
    goto <bb 27>; [98.99%]
  else
    goto <bb 17>; [1.01%]

  <bb 29> [local count: 125434518]:
  _162 = _155 + pretmp_157;
  _163 = e_25(D) + _153;
  _164 = *_163;
  _165 = _162 + _164;
  *_158 = _165;
  goto <bb 28>; [100.00%]

  <bb 30> [local count: 87166359]:
  _167 = *_158;
  _168 = _167 + pretmp_157;
  _169 = b_28(D) + _153;
  _170 = _168 + pretmp_157;
  *_169 = _170;
  goto <bb 28>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 212600877]:
  # i_43 = PHI <i_52(13), 0(16)>
  # ivtmp_41 = PHI <ivtmp_53(13), 65535(16)>
  _34 = (long unsigned int) i_43;
  _33 = _34 * 4;
  _21 = c_23(D) + _33;
  _19 = *_21;
  _40 = d_24(D) + _33;
  pretmp_31 = *_40;
  _32 = a_26(D) + _33;
  if (_19 < 0)
    goto <bb 11>; [41.00%]
  else
    goto <bb 10>; [59.00%]

  <bb 11> [local count: 87166359]:
  _10 = *_32;
  _12 = _10 + pretmp_31;
  _14 = b_28(D) + _33;
  _15 = _12 + pretmp_31;
  *_14 = _15;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 125434518]:
  _39 = _19 + pretmp_31;
  _38 = e_25(D) + _33;
  _37 = *_38;
  _5 = _39 + _37;
  *_32 = _5;

  <bb 12> [local count: 212600877]:
  i_52 = i_43 + 1;
  ivtmp_53 = ivtmp_41 - 1;
  if (ivtmp_53 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 7>; [100.00%]

  <bb 13> [local count: 210453395]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s162 (s162, funcdef_no=24, decl_uid=3547, cgraph_uid=25, symbol_order=24)


Analyzing loop at tsvc.c:35
tsvc.c:35:5: note:  === analyze_loop_nest ===
tsvc.c:35:5: note:   === vect_analyze_loop_form ===
tsvc.c:35:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Creating dr for *_3
analyze_innermost: success.
	base_address: a_14(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_14(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_15(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_8
analyze_innermost: success.
	base_address: c_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_16(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_14(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_14(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:35:5: note:   === vect_analyze_data_refs ===
tsvc.c:35:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:35:5: note:   got vectype for stmt: _6 = *_5;
vector(8) int
tsvc.c:35:5: note:   got vectype for stmt: _9 = *_8;
vector(8) int
tsvc.c:35:5: note:   got vectype for stmt: *_3 = _10;
vector(8) int
tsvc.c:35:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:35:5: note:   Analyze phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:35:5: note:   step: 1,  init: 0
tsvc.c:35:5: note:   Detected induction.
tsvc.c:35:5: note:   Analyze phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   Analyze phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:35:5: note:   step: 4294967295,  init: 65535
tsvc.c:35:5: note:   Detected induction.
tsvc.c:35:5: note:   === vect_determine_precisions ===
tsvc.c:35:5: note:   ivtmp_31 has no range info
tsvc.c:35:5: note:   i_18 has range [0x1, 0xffff]
tsvc.c:35:5: note:   can narrow to unsigned:16 without loss of precision: i_18 = i_23 + 1;
tsvc.c:35:5: note:   _10 has no range info
tsvc.c:35:5: note:   _9 has no range info
tsvc.c:35:5: note:   _7 has no range info
tsvc.c:35:5: note:   _6 has no range info
tsvc.c:35:5: note:   _4 has no range info
tsvc.c:35:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:35:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:35:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:35:5: note:   === vect_pattern_recog ===
tsvc.c:35:5: note:   vect_is_simple_use: operand (long unsigned int) i_23, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: operand i_23 = PHI <0(2), i_18(5)>, type of def: induction
tsvc.c:35:5: note:   vect_is_simple_use: operand (long unsigned int) i_23, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: operand i_23 = PHI <0(2), i_18(5)>, type of def: induction
tsvc.c:35:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:35:5: note:   widen_mult pattern recognized: patt_29 = (long unsigned int) patt_30;
tsvc.c:35:5: note:   extra pattern stmt: patt_30 = i_23 w* 4;
tsvc.c:35:5: note:   vect_is_simple_use: operand i_23 = PHI <0(2), i_18(5)>, type of def: induction
tsvc.c:35:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:35:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:35:5: note:   init: phi relevant? i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   init: phi relevant? .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   init: phi relevant? ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   init: stmt relevant? _1 = (long unsigned int) i_23;
tsvc.c:35:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:35:5: note:   init: stmt relevant? _3 = a_14(D) + _2;
tsvc.c:35:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:35:5: note:   init: stmt relevant? _5 = b_15(D) + _2;
tsvc.c:35:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:35:5: note:   init: stmt relevant? _7 = _4 + _6;
tsvc.c:35:5: note:   init: stmt relevant? _8 = c_16(D) + _2;
tsvc.c:35:5: note:   init: stmt relevant? _9 = *_8;
tsvc.c:35:5: note:   init: stmt relevant? _10 = _7 + _9;
tsvc.c:35:5: note:   init: stmt relevant? *_3 = _10;
tsvc.c:35:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:35:5: note:   mark relevant 5, live 0: *_3 = _10;
tsvc.c:35:5: note:   init: stmt relevant? i_18 = i_23 + 1;
tsvc.c:35:5: note:   init: stmt relevant? ivtmp_31 = ivtmp_38 - 1;
tsvc.c:35:5: note:   init: stmt relevant? if (ivtmp_31 != 0)
tsvc.c:35:5: note:   worklist: examine stmt: *_3 = _10;
tsvc.c:35:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _10 = _7 + _9;
tsvc.c:35:5: note:   worklist: examine stmt: _10 = _7 + _9;
tsvc.c:35:5: note:   vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _7 = _4 + _6;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _9 = *_8;
tsvc.c:35:5: note:   worklist: examine stmt: _9 = *_8;
tsvc.c:35:5: note:   worklist: examine stmt: _7 = _4 + _6;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:35:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:35:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:35:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _9 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: *_3 = _10;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _9 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: *_3 = _10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: *_3 = _10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _6 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: _9 = *_8;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: *_3 = _10;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:35:5: note:   dependence distance  = 0.
tsvc.c:35:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:37:24: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:37:31: missed:   versioning for alias required: can't determine dependence between *_8 and *_3
consider run-time aliasing test between *_8 and *_3
tsvc.c:35:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:35:5: note:   ==> examining phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   ==> examining phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   ==> examining phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   ==> examining statement: _1 = (long unsigned int) i_23;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining pattern def stmt: patt_30 = i_23 w* 4;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining pattern statement: patt_29 = (long unsigned int) patt_30;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _3 = a_14(D) + _2;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:35:5: note:   precomputed vectype: vector(8) int
tsvc.c:35:5: note:   nunits = 8
tsvc.c:35:5: note:   ==> examining statement: _5 = b_15(D) + _2;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:35:5: note:   precomputed vectype: vector(8) int
tsvc.c:35:5: note:   nunits = 8
tsvc.c:35:5: note:   ==> examining statement: _7 = _4 + _6;
tsvc.c:35:5: note:   get vectype for scalar type: int
tsvc.c:35:5: note:   vectype: vector(8) int
tsvc.c:35:5: note:   nunits = 8
tsvc.c:35:5: note:   ==> examining statement: _8 = c_16(D) + _2;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _9 = *_8;
tsvc.c:35:5: note:   precomputed vectype: vector(8) int
tsvc.c:35:5: note:   nunits = 8
tsvc.c:35:5: note:   ==> examining statement: _10 = _7 + _9;
tsvc.c:35:5: note:   get vectype for scalar type: int
tsvc.c:35:5: note:   vectype: vector(8) int
tsvc.c:35:5: note:   nunits = 8
tsvc.c:35:5: note:   ==> examining statement: *_3 = _10;
tsvc.c:35:5: note:   precomputed vectype: vector(8) int
tsvc.c:35:5: note:   nunits = 8
tsvc.c:35:5: note:   ==> examining statement: i_18 = i_23 + 1;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: ivtmp_31 = ivtmp_38 - 1;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: if (ivtmp_31 != 0)
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   vectorization factor = 8
tsvc.c:35:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x5052f60 *_3 1 times scalar_load costs 12 in body
0x5052f60 *_5 1 times scalar_load costs 12 in body
0x5052f60 _4 + _6 1 times scalar_stmt costs 4 in body
0x5052f60 *_8 1 times scalar_load costs 12 in body
0x5052f60 _7 + _9 1 times scalar_stmt costs 4 in body
0x5052f60 _10 1 times scalar_store costs 12 in body
tsvc.c:35:5: note:   === vect_analyze_slp ===
tsvc.c:35:5: note:   === vect_make_slp_decision ===
tsvc.c:35:5: note:  vectorization_factor = 8, niters = 65535
tsvc.c:35:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:35:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:35:5: note:   recording new base alignment for a_14(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:35:5: note:   recording new base alignment for b_15(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:35:5: note:   recording new base alignment for c_16(D)
  alignment:    4
  misalignment: 0
  based on:     _9 = *_8;
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_3
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_5
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_8
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_3
tsvc.c:35:5: note:   === vect_prune_runtime_alias_test_list ===
merged alias checks:
  reference:      *_5 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_8 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:35:5: note:   improved number of alias checks from 2 to 2
tsvc.c:35:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:35:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:35:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:35:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:35:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:35:5: note:   vect_can_advance_ivs_p:
tsvc.c:35:5: note:   Analyze phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   Analyze phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   reduc or virtual phi. skip.
tsvc.c:35:5: note:   Analyze phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   vect_model_load_cost: aligned.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:35:5: note:   Setting misalignment to unknown (-1).
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:35:5: note:   Setting misalignment to unknown (-1).
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:35:5: note:   vect_model_store_cost: aligned.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:35:5: note:   vect_model_load_cost: aligned.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:35:5: note:   Setting misalignment to unknown (-1).
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:35:5: note:   Setting misalignment to unknown (-1).
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:35:5: note:   vect_model_store_cost: aligned.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:35:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:35:5: note:   Vectorizing an unaligned access.
tsvc.c:35:5: note:   Vectorizing an unaligned access.
tsvc.c:35:5: note:   Vectorizing an unaligned access.
tsvc.c:35:5: note:   Vectorizing an unaligned access.
tsvc.c:35:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:35:5: note:   === vect_analyze_loop_operations ===
tsvc.c:35:5: note:   examining phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   examining phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   examining phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   ==> examining statement: _1 = (long unsigned int) i_23;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _3 = a_14(D) + _2;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _5 = b_15(D) + _2;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _7 = _4 + _6;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:    === vectorizable_operation ===
tsvc.c:35:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _8 = c_16(D) + _2;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _9 = *_8;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _10 = _7 + _9;
tsvc.c:35:5: note:   vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:    === vectorizable_operation ===
tsvc.c:35:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: *_3 = _10;
tsvc.c:35:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: i_18 = i_23 + 1;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: ivtmp_31 = ivtmp_38 - 1;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: if (ivtmp_31 != 0)
tsvc.c:35:5: note:   irrelevant.
0x51c55d0 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x51c55d0 *_5 1 times unaligned_load (misalign -1) costs 20 in body
0x51c55d0 _4 + _6 1 times vector_stmt costs 4 in body
0x51c55d0 *_8 1 times unaligned_load (misalign -1) costs 20 in body
0x51c55d0 _7 + _9 1 times vector_stmt costs 4 in body
0x51c55d0 _10 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Statement (exit)if (ivtmp_31 != 0)
 is executed at most 65534 (bounded by 65534) + 1 times in loop 1.
Induction variable (int *) a_14(D) + 4 * iteration does not wrap in statement _3 = a_14(D) + _2;
 in loop 1.
Statement _3 = a_14(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_15(D) + 4 * iteration does not wrap in statement _5 = b_15(D) + _2;
 in loop 1.
Statement _5 = b_15(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_16(D) + 4 * iteration does not wrap in statement _8 = c_16(D) + _2;
 in loop 1.
Statement _8 = c_16(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_18 = i_23 + 1;
 in loop 1.
Statement i_18 = i_23 + 1;
 is executed at most 65534 (bounded by 65534) + 1 times in loop 1.
tsvc.c:35:5: note:  not using a fully-masked loop.
0x51c55d0 <unknown> 2 times vector_stmt costs 8 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x51c55d0 <unknown> 1 times cond_branch_taken costs 16 in prologue
0x51c55d0 *_3 7 times scalar_load costs 84 in epilogue
0x51c55d0 *_5 7 times scalar_load costs 84 in epilogue
0x51c55d0 _4 + _6 7 times scalar_stmt costs 28 in epilogue
0x51c55d0 *_8 7 times scalar_load costs 84 in epilogue
0x51c55d0 _7 + _9 7 times scalar_stmt costs 28 in epilogue
0x51c55d0 _10 7 times scalar_store costs 84 in epilogue
tsvc.c:35:5: note:  Cost model analysis: 
  Vector inside of loop cost: 88
  Vector prologue cost: 24
  Vector epilogue cost: 392
  Scalar iteration cost: 56
  Scalar outside cost: 8
  Vector outside cost: 416
  prologue iterations: 0
  epilogue iterations: 7
  Calculated minimum iters for profitability: 8
tsvc.c:35:5: note:    Runtime profitability threshold = 8
tsvc.c:35:5: note:    Static estimate profitability threshold = 8
tsvc.c:35:5: note:  epilog loop required
tsvc.c:35:5: note:  vect_can_advance_ivs_p:
tsvc.c:35:5: note:  Analyze phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:  Analyze phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:  reduc or virtual phi. skip.
tsvc.c:35:5: note:  Analyze phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:35:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:35:5: note:  ***** Re-trying analysis with vector mode V16QI
tsvc.c:35:5: note:   === vect_analyze_loop_form ===
tsvc.c:35:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
tsvc.c:35:5: note:   === vect_analyze_data_refs ===
tsvc.c:35:5: note:   got vectype for stmt: _4 = *_3;
vector(4) int
tsvc.c:35:5: note:   got vectype for stmt: _6 = *_5;
vector(4) int
tsvc.c:35:5: note:   got vectype for stmt: _9 = *_8;
vector(4) int
tsvc.c:35:5: note:   got vectype for stmt: *_3 = _10;
vector(4) int
tsvc.c:35:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:35:5: note:   Analyze phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:35:5: note:   step: 1,  init: 0
tsvc.c:35:5: note:   Detected induction.
tsvc.c:35:5: note:   Analyze phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   Analyze phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:35:5: note:   step: 4294967295,  init: 65535
tsvc.c:35:5: note:   Detected induction.
tsvc.c:35:5: note:   === vect_determine_precisions ===
tsvc.c:35:5: note:   ivtmp_31 has no range info
tsvc.c:35:5: note:   i_18 has range [0x1, 0xffff]
tsvc.c:35:5: note:   can narrow to unsigned:16 without loss of precision: i_18 = i_23 + 1;
tsvc.c:35:5: note:   _10 has no range info
tsvc.c:35:5: note:   _9 has no range info
tsvc.c:35:5: note:   _7 has no range info
tsvc.c:35:5: note:   _6 has no range info
tsvc.c:35:5: note:   _4 has no range info
tsvc.c:35:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:35:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:35:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:35:5: note:   === vect_pattern_recog ===
tsvc.c:35:5: note:   vect_is_simple_use: operand (long unsigned int) i_23, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: operand i_23 = PHI <0(2), i_18(5)>, type of def: induction
tsvc.c:35:5: note:   vect_is_simple_use: operand (long unsigned int) i_23, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: operand i_23 = PHI <0(2), i_18(5)>, type of def: induction
tsvc.c:35:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:35:5: note:   widen_mult pattern recognized: patt_27 = (long unsigned int) patt_28;
tsvc.c:35:5: note:   extra pattern stmt: patt_28 = i_23 w* 4;
tsvc.c:35:5: note:   vect_is_simple_use: operand i_23 = PHI <0(2), i_18(5)>, type of def: induction
tsvc.c:35:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:35:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:35:5: note:   init: phi relevant? i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   init: phi relevant? .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   init: phi relevant? ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   init: stmt relevant? _1 = (long unsigned int) i_23;
tsvc.c:35:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:35:5: note:   init: stmt relevant? _3 = a_14(D) + _2;
tsvc.c:35:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:35:5: note:   init: stmt relevant? _5 = b_15(D) + _2;
tsvc.c:35:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:35:5: note:   init: stmt relevant? _7 = _4 + _6;
tsvc.c:35:5: note:   init: stmt relevant? _8 = c_16(D) + _2;
tsvc.c:35:5: note:   init: stmt relevant? _9 = *_8;
tsvc.c:35:5: note:   init: stmt relevant? _10 = _7 + _9;
tsvc.c:35:5: note:   init: stmt relevant? *_3 = _10;
tsvc.c:35:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:35:5: note:   mark relevant 5, live 0: *_3 = _10;
tsvc.c:35:5: note:   init: stmt relevant? i_18 = i_23 + 1;
tsvc.c:35:5: note:   init: stmt relevant? ivtmp_31 = ivtmp_38 - 1;
tsvc.c:35:5: note:   init: stmt relevant? if (ivtmp_31 != 0)
tsvc.c:35:5: note:   worklist: examine stmt: *_3 = _10;
tsvc.c:35:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _10 = _7 + _9;
tsvc.c:35:5: note:   worklist: examine stmt: _10 = _7 + _9;
tsvc.c:35:5: note:   vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _7 = _4 + _6;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _9 = *_8;
tsvc.c:35:5: note:   worklist: examine stmt: _9 = *_8;
tsvc.c:35:5: note:   worklist: examine stmt: _7 = _4 + _6;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:35:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:35:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:35:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:35:5: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:35:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:35:5: note:   ==> examining phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   ==> examining phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   ==> examining phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   ==> examining statement: _1 = (long unsigned int) i_23;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining pattern def stmt: patt_28 = i_23 w* 4;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining pattern statement: patt_27 = (long unsigned int) patt_28;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _3 = a_14(D) + _2;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:35:5: note:   precomputed vectype: vector(4) int
tsvc.c:35:5: note:   nunits = 4
tsvc.c:35:5: note:   ==> examining statement: _5 = b_15(D) + _2;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:35:5: note:   precomputed vectype: vector(4) int
tsvc.c:35:5: note:   nunits = 4
tsvc.c:35:5: note:   ==> examining statement: _7 = _4 + _6;
tsvc.c:35:5: note:   get vectype for scalar type: int
tsvc.c:35:5: note:   vectype: vector(4) int
tsvc.c:35:5: note:   nunits = 4
tsvc.c:35:5: note:   ==> examining statement: _8 = c_16(D) + _2;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: _9 = *_8;
tsvc.c:35:5: note:   precomputed vectype: vector(4) int
tsvc.c:35:5: note:   nunits = 4
tsvc.c:35:5: note:   ==> examining statement: _10 = _7 + _9;
tsvc.c:35:5: note:   get vectype for scalar type: int
tsvc.c:35:5: note:   vectype: vector(4) int
tsvc.c:35:5: note:   nunits = 4
tsvc.c:35:5: note:   ==> examining statement: *_3 = _10;
tsvc.c:35:5: note:   precomputed vectype: vector(4) int
tsvc.c:35:5: note:   nunits = 4
tsvc.c:35:5: note:   ==> examining statement: i_18 = i_23 + 1;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: ivtmp_31 = ivtmp_38 - 1;
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   ==> examining statement: if (ivtmp_31 != 0)
tsvc.c:35:5: note:   skip.
tsvc.c:35:5: note:   vectorization factor = 4
tsvc.c:35:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x5089590 *_3 1 times scalar_load costs 12 in body
0x5089590 *_5 1 times scalar_load costs 12 in body
0x5089590 _4 + _6 1 times scalar_stmt costs 4 in body
0x5089590 *_8 1 times scalar_load costs 12 in body
0x5089590 _7 + _9 1 times scalar_stmt costs 4 in body
0x5089590 _10 1 times scalar_store costs 12 in body
tsvc.c:35:5: note:   === vect_analyze_slp ===
tsvc.c:35:5: note:   === vect_make_slp_decision ===
tsvc.c:35:5: note:  vectorization_factor = 4, niters = 65535
tsvc.c:35:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:35:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:35:5: note:   recording new base alignment for a_14(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:35:5: note:   recording new base alignment for b_15(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:35:5: note:   recording new base alignment for c_16(D)
  alignment:    4
  misalignment: 0
  based on:     _9 = *_8;
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_3
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_5
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_8
tsvc.c:35:5: note:   vect_compute_data_ref_alignment:
tsvc.c:35:5: note:   can't force alignment of ref: *_3
tsvc.c:35:5: note:   === vect_prune_runtime_alias_test_list ===
tsvc.c:35:5: note:  Vectorizing an unaligned access.
tsvc.c:35:5: note:  Vectorizing an unaligned access.
tsvc.c:35:5: note:  Vectorizing an unaligned access.
tsvc.c:35:5: note:  Vectorizing an unaligned access.
tsvc.c:35:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:35:5: note:   === vect_analyze_loop_operations ===
tsvc.c:35:5: note:   examining phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:   examining phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:   examining phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:   ==> examining statement: _1 = (long unsigned int) i_23;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _3 = a_14(D) + _2;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _5 = b_15(D) + _2;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _7 = _4 + _6;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:    === vectorizable_operation ===
tsvc.c:35:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _8 = c_16(D) + _2;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: _9 = *_8;
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:35:5: missed:   Unsupported pattern.
tsvc.c:35:5: missed:   use not simple.
tsvc.c:35:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_load_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: _10 = _7 + _9;
tsvc.c:35:5: note:   vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:    === vectorizable_operation ===
tsvc.c:35:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: *_3 = _10;
tsvc.c:35:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:35:5: note:   vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:35:5: note:   vect_model_store_cost: inside_cost = 12, prologue_cost = 0 .
tsvc.c:35:5: note:   ==> examining statement: i_18 = i_23 + 1;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: ivtmp_31 = ivtmp_38 - 1;
tsvc.c:35:5: note:   irrelevant.
tsvc.c:35:5: note:   ==> examining statement: if (ivtmp_31 != 0)
tsvc.c:35:5: note:   irrelevant.
0x518c860 *_3 1 times unaligned_load (misalign -1) costs 12 in body
0x518c860 *_5 1 times unaligned_load (misalign -1) costs 12 in body
0x518c860 _4 + _6 1 times vector_stmt costs 4 in body
0x518c860 *_8 1 times unaligned_load (misalign -1) costs 12 in body
0x518c860 _7 + _9 1 times vector_stmt costs 4 in body
0x518c860 _10 1 times unaligned_store (misalign -1) costs 12 in body
tsvc.c:35:5: note:  not using a fully-masked loop.
0x518c860 *_3 3 times scalar_load costs 36 in epilogue
0x518c860 *_5 3 times scalar_load costs 36 in epilogue
0x518c860 _4 + _6 3 times scalar_stmt costs 12 in epilogue
0x518c860 *_8 3 times scalar_load costs 36 in epilogue
0x518c860 _7 + _9 3 times scalar_stmt costs 12 in epilogue
0x518c860 _10 3 times scalar_store costs 36 in epilogue
tsvc.c:35:5: note:  Cost model analysis: 
  Vector inside of loop cost: 56
  Vector prologue cost: 0
  Vector epilogue cost: 168
  Scalar iteration cost: 56
  Scalar outside cost: 0
  Vector outside cost: 168
  prologue iterations: 0
  epilogue iterations: 3
  Calculated minimum iters for profitability: 4
tsvc.c:35:5: note:    Runtime profitability threshold = 4
tsvc.c:35:5: note:    Static estimate profitability threshold = 4
tsvc.c:35:5: note:  epilog loop required
tsvc.c:35:5: note:  vect_can_advance_ivs_p:
tsvc.c:35:5: note:  Analyze phi: i_23 = PHI <0(2), i_18(5)>
tsvc.c:35:5: note:  Analyze phi: .MEM_24 = PHI <.MEM_13(D)(2), .MEM_17(5)>
tsvc.c:35:5: note:  reduc or virtual phi. skip.
tsvc.c:35:5: note:  Analyze phi: ivtmp_38 = PHI <65535(2), ivtmp_31(5)>
tsvc.c:35:5: note:  ***** Analysis succeeded with vector mode V16QI
tsvc.c:35:5: note:  ***** Choosing vector mode V8SI
tsvc.c:35:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:35:5: note:  === vec_transform_loop ===
create runtime check for data references *_5 and *_3
using an address-based WAR/WAW test
create runtime check for data references *_8 and *_3
using an address-based WAR/WAW test
tsvc.c:35:5: note:  created 2 versioning for alias checks.
tsvc.c:35:5: note:  trying to apply versioning to outer loop 0

Updating SSA:
creating PHI node in block #4 for .MEM_17
Registering new PHI nodes in block #8
Registering new PHI nodes in block #9
Registering new PHI nodes in block #3
Updating SSA information for statement _1 = (long unsigned int) i_23;
Updating SSA information for statement _2 = _1 * 4;
Updating SSA information for statement _3 = a_14(D) + _2;
Updating SSA information for statement _4 = *_3;
Updating SSA information for statement _5 = b_15(D) + _2;
Updating SSA information for statement _6 = *_5;
Updating SSA information for statement _7 = _4 + _6;
Updating SSA information for statement _8 = c_16(D) + _2;
Updating SSA information for statement _9 = *_8;
Updating SSA information for statement _10 = _7 + _9;
Updating SSA information for statement *_3 = _10;
Updating SSA information for statement i_18 = i_23 + 1;
Updating SSA information for statement ivtmp_31 = ivtmp_38 - 1;
Updating SSA information for statement if (ivtmp_31 != 0)
Registering new PHI nodes in block #11
Registering new PHI nodes in block #5
Registering new PHI nodes in block #10
Registering new PHI nodes in block #6
Updating SSA information for statement _35 = (long unsigned int) i_23;
Updating SSA information for statement _34 = _1 * 4;
Updating SSA information for statement _39 = a_14(D) + _2;
Updating SSA information for statement _40 = *_3;
Updating SSA information for statement _41 = b_15(D) + _2;
Updating SSA information for statement _42 = *_5;
Updating SSA information for statement _43 = _4 + _6;
Updating SSA information for statement _44 = c_16(D) + _2;
Updating SSA information for statement _45 = *_8;
Updating SSA information for statement _46 = _7 + _9;
Updating SSA information for statement *_3 = _10;
Updating SSA information for statement i_48 = i_23 + 1;
Updating SSA information for statement ivtmp_49 = ivtmp_38 - 1;
Updating SSA information for statement if (ivtmp_31 != 0)
Registering new PHI nodes in block #7
Registering new PHI nodes in block #4
Updating SSA information for statement return;

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

i_32 -> { i_23 }
.MEM_33 -> { .MEM_24 }
_34 -> { _2 }
_35 -> { _1 }
ivtmp_36 -> { ivtmp_38 }
_39 -> { _3 }
_40 -> { _4 }
_41 -> { _5 }
_42 -> { _6 }
_43 -> { _7 }
_44 -> { _8 }
_45 -> { _9 }
_46 -> { _10 }
.MEM_47 -> { .MEM_17 }
i_48 -> { i_18 }
ivtmp_49 -> { ivtmp_31 }
.MEM_50 -> { .MEM_17 }
Incremental SSA update started at block: 8
Number of blocks in CFG: 12
Number of blocks to update: 8 ( 67%)
Affected blocks: 3 4 5 6 7 9 10 11


tsvc.c:35:5: optimized:  loop versioned for vectorization because of possible aliasing
Removing basic block 12
;; basic block 12, loop depth 0
;;  pred:       9
;;  succ:      


tsvc.c:35:5: note:  vect_can_advance_ivs_p:
tsvc.c:35:5: note:  Analyze phi: i_23 = PHI <i_18(5), 0(9)>
tsvc.c:35:5: note:  Analyze phi: .MEM_24 = PHI <.MEM_17(5), .MEM_13(D)(9)>
tsvc.c:35:5: note:  reduc or virtual phi. skip.
tsvc.c:35:5: note:  Analyze phi: ivtmp_38 = PHI <ivtmp_31(5), 65535(9)>
tsvc.c:35:5: note:  vect_update_ivs_after_vectorizer: phi: i_23 = PHI <i_18(5), 0(9)>
tsvc.c:35:5: note:  vect_update_ivs_after_vectorizer: phi: .MEM_24 = PHI <.MEM_17(5), .MEM_13(D)(9)>
tsvc.c:35:5: note:  reduc or virtual phi. skip.
tsvc.c:35:5: note:  vect_update_ivs_after_vectorizer: phi: ivtmp_38 = PHI <ivtmp_31(5), 65535(9)>
tsvc.c:35:5: note:  ------>vectorizing phi: i_23 = PHI <i_18(5), 0(16)>
tsvc.c:35:5: note:  ------>vectorizing phi: .MEM_24 = PHI <.MEM_17(5), .MEM_13(D)(16)>
tsvc.c:35:5: note:  ------>vectorizing phi: ivtmp_38 = PHI <ivtmp_31(5), 65535(16)>
tsvc.c:35:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_23;
tsvc.c:35:5: note:  ------>vectorizing statement: patt_30 = i_23 w* 4;
tsvc.c:35:5: note:  ------>vectorizing statement: patt_29 = (long unsigned int) patt_30;
tsvc.c:35:5: note:  ------>vectorizing statement: _3 = a_14(D) + _2;
tsvc.c:35:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  transform load. ncopies = 1
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_14(D)
tsvc.c:35:5: note:  created a_14(D)
tsvc.c:35:5: note:  add new stmt: vect__4.188_71 = MEM <vector(8) int> [(int *)vectp_a.186_69];
tsvc.c:35:5: note:  ------>vectorizing statement: _5 = b_15(D) + _2;
tsvc.c:35:5: note:  ------>vectorizing statement: _6 = *_5;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  transform load. ncopies = 1
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_15(D)
tsvc.c:35:5: note:  created b_15(D)
tsvc.c:35:5: note:  add new stmt: vect__6.191_74 = MEM <vector(8) int> [(int *)vectp_b.189_72];
tsvc.c:35:5: note:  ------>vectorizing statement: _7 = _4 + _6;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:  transform binary/unary operation.
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:35:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _4 = *_3;
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:35:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _6 = *_5;
tsvc.c:35:5: note:  add new stmt: vect__7.192_75 = vect__4.188_71 + vect__6.191_74;
tsvc.c:35:5: note:  ------>vectorizing statement: _8 = c_16(D) + _2;
tsvc.c:35:5: note:  ------>vectorizing statement: _9 = *_8;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  transform load. ncopies = 1
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_16(D)
tsvc.c:35:5: note:  created c_16(D)
tsvc.c:35:5: note:  add new stmt: vect__9.195_78 = MEM <vector(8) int> [(int *)vectp_c.193_76];
tsvc.c:35:5: note:  ------>vectorizing statement: _10 = _7 + _9;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:  vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:  transform binary/unary operation.
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _7
tsvc.c:35:5: note:  vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _7 = _4 + _6;
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:35:5: note:  vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _9 = *_8;
tsvc.c:35:5: note:  add new stmt: vect__10.196_79 = vect__7.192_75 + vect__9.195_78;
tsvc.c:35:5: note:  ------>vectorizing statement: *_3 = _10;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:35:5: note:  transform store. ncopies = 1
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:35:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _10 = _7 + _9;
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_14(D)
tsvc.c:35:5: note:  created a_14(D)
tsvc.c:35:5: note:  add new stmt: MEM <vector(8) int> [(int *)vectp_a.197_80] = vect__10.196_79;
tsvc.c:35:5: note:  ------>vectorizing statement: i_18 = i_23 + 1;
tsvc.c:35:5: note:  ------>vectorizing statement: ivtmp_31 = ivtmp_38 - 1;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_a.186_70 = vectp_a.186_69 + 32;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_b.189_73 = vectp_b.189_72 + 32;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_c.193_77 = vectp_c.193_76 + 32;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_a.197_81 = vectp_a.197_80 + 32;
tsvc.c:35:5: note:  ------>vectorizing statement: if (ivtmp_31 != 0)
tsvc.c:35:5: note:  New loop exit condition: if (ivtmp_84 < 8191)
tsvc.c:35:5: note:  LOOP VECTORIZED

tsvc.c:35:5: note:   === vect_update_inits_of_dr ===

Analyzing loop at tsvc.c:35
tsvc.c:35:5: optimized: loop vectorized using 16 byte vectors
tsvc.c:35:5: note:  === vec_transform_loop ===
Removing basic block 17
;; basic block 17, loop depth 0
;;  pred:       13
;;  succ:      


tsvc.c:35:5: note:  vect_can_advance_ivs_p:
tsvc.c:35:5: note:  Analyze phi: i_52 = PHI <i_66(15), 65528(13)>
tsvc.c:35:5: note:  Analyze phi: .MEM_53 = PHI <.MEM_65(15), .MEM_68(13)>
tsvc.c:35:5: note:  reduc or virtual phi. skip.
tsvc.c:35:5: note:  Analyze phi: ivtmp_54 = PHI <ivtmp_67(15), 7(13)>
tsvc.c:35:5: note:  vect_update_ivs_after_vectorizer: phi: i_52 = PHI <i_66(15), 65528(13)>
tsvc.c:35:5: note:  vect_update_ivs_after_vectorizer: phi: .MEM_53 = PHI <.MEM_65(15), .MEM_68(13)>
tsvc.c:35:5: note:  reduc or virtual phi. skip.
tsvc.c:35:5: note:  vect_update_ivs_after_vectorizer: phi: ivtmp_54 = PHI <ivtmp_67(15), 7(13)>
tsvc.c:35:5: note:  ------>vectorizing phi: i_52 = PHI <i_66(15), 65528(21)>
tsvc.c:35:5: note:  ------>vectorizing phi: .MEM_53 = PHI <.MEM_65(15), .MEM_68(21)>
tsvc.c:35:5: note:  ------>vectorizing phi: ivtmp_54 = PHI <ivtmp_67(15), 7(21)>
tsvc.c:35:5: note:  ------>vectorizing statement: _55 = (long unsigned int) i_52;
tsvc.c:35:5: note:  ------>vectorizing statement: patt_28 = i_52 w* 4;
tsvc.c:35:5: note:  ------>vectorizing statement: patt_27 = (long unsigned int) patt_28;
tsvc.c:35:5: note:  ------>vectorizing statement: _57 = a_14(D) + _56;
tsvc.c:35:5: note:  ------>vectorizing statement: _58 = *_57;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  transform load. ncopies = 1
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_14(D)
tsvc.c:35:5: note:  created vectp_a.202_102
tsvc.c:35:5: note:  add new stmt: vect__58.203_105 = MEM <vector(4) int> [(int *)vectp_a.201_103];
tsvc.c:35:5: note:  ------>vectorizing statement: _59 = b_15(D) + _56;
tsvc.c:35:5: note:  ------>vectorizing statement: _60 = *_59;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  transform load. ncopies = 1
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *b_15(D)
tsvc.c:35:5: note:  created vectp_b.205_106
tsvc.c:35:5: note:  add new stmt: vect__60.206_109 = MEM <vector(4) int> [(int *)vectp_b.204_107];
tsvc.c:35:5: note:  ------>vectorizing statement: _61 = _58 + _60;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:  vect_is_simple_use: operand *_59, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:  transform binary/unary operation.
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _58
tsvc.c:35:5: note:  vect_is_simple_use: operand *_57, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _58 = *_57;
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _60
tsvc.c:35:5: note:  vect_is_simple_use: operand *_59, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _60 = *_59;
tsvc.c:35:5: note:  add new stmt: vect__61.207_110 = vect__58.203_105 + vect__60.206_109;
tsvc.c:35:5: note:  ------>vectorizing statement: _62 = c_16(D) + _56;
tsvc.c:35:5: note:  ------>vectorizing statement: _63 = *_62;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  transform load. ncopies = 1
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *c_16(D)
tsvc.c:35:5: note:  created vectp_c.209_111
tsvc.c:35:5: note:  add new stmt: vect__63.210_114 = MEM <vector(4) int> [(int *)vectp_c.208_112];
tsvc.c:35:5: note:  ------>vectorizing statement: _64 = _61 + _63;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  vect_is_simple_use: operand _58 + _60, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:  vect_is_simple_use: operand *_62, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:  transform binary/unary operation.
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _61
tsvc.c:35:5: note:  vect_is_simple_use: operand _58 + _60, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _61 = _58 + _60;
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _63
tsvc.c:35:5: note:  vect_is_simple_use: operand *_62, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _63 = *_62;
tsvc.c:35:5: note:  add new stmt: vect__64.211_115 = vect__61.207_110 + vect__63.210_114;
tsvc.c:35:5: note:  ------>vectorizing statement: *_57 = _64;
tsvc.c:35:5: note:  transform statement.
tsvc.c:35:5: note:  vect_is_simple_use: operand _61 + _63, type of def: internal
tsvc.c:35:5: note:  vect_is_simple_use: vectype vector(4) int
tsvc.c:35:5: note:  transform store. ncopies = 1
tsvc.c:35:5: note:  vect_get_vec_def_for_operand: _64
tsvc.c:35:5: note:  vect_is_simple_use: operand _61 + _63, type of def: internal
tsvc.c:35:5: note:    def_stmt =  _64 = _61 + _63;
tsvc.c:35:5: note:  create vector_type-pointer variable to type: vector(4) int  vectorizing a pointer ref: *a_14(D)
tsvc.c:35:5: note:  created vectp_a.213_116
tsvc.c:35:5: note:  add new stmt: MEM <vector(4) int> [(int *)vectp_a.212_117] = vect__64.211_115;
tsvc.c:35:5: note:  ------>vectorizing statement: i_66 = i_52 + 1;
tsvc.c:35:5: note:  ------>vectorizing statement: ivtmp_67 = ivtmp_54 - 1;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_a.201_104 = vectp_a.201_103 + 16;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_b.204_108 = vectp_b.204_107 + 16;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_c.208_113 = vectp_c.208_112 + 16;
tsvc.c:35:5: note:  ------>vectorizing statement: vectp_a.212_118 = vectp_a.212_117 + 16;
tsvc.c:35:5: note:  ------>vectorizing statement: if (ivtmp_67 != 0)
tsvc.c:35:5: note:  New loop exit condition: if (ivtmp_121 < 1)
tsvc.c:35:5: note:  LOOP EPILOGUE VECTORIZED (MODE=V16QI)
tsvc.c:33:6: note: vectorized 1 loops in function.
Merging blocks 2 and 8
Removing basic block 9
;; basic block 9, loop depth 0
;;  pred:      
;;  succ:       16


Merging blocks 13 and 21
fix_loop_structure: fixing up loops for function
s162 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(4) int * vectp_a.213;
  vector(4) int * vectp_a.212;
  vector(4) int vect__64.211;
  vector(4) int vect__63.210;
  vector(4) int * vectp_c.209;
  vector(4) int * vectp_c.208;
  vector(4) int vect__61.207;
  vector(4) int vect__60.206;
  vector(4) int * vectp_b.205;
  vector(4) int * vectp_b.204;
  vector(4) int vect__58.203;
  vector(4) int * vectp_a.202;
  vector(4) int * vectp_a.201;
  unsigned int tmp.200;
  int tmp.199;
  vector(8) int * vectp_a.198;
  vector(8) int * vectp_a.197;
  vector(8) int vect__10.196;
  vector(8) int vect__9.195;
  vector(8) int * vectp_c.194;
  vector(8) int * vectp_c.193;
  vector(8) int vect__7.192;
  vector(8) int vect__6.191;
  vector(8) int * vectp_b.190;
  vector(8) int * vectp_b.189;
  vector(8) int vect__4.188;
  vector(8) int * vectp_a.187;
  vector(8) int * vectp_a.186;
  unsigned int tmp.185;
  int tmp.184;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int _7;
  int * _8;
  int _9;
  int _10;
  _Bool _11;
  sizetype _12;
  ssizetype _19;
  int * _20;
  _Bool _21;
  sizetype _22;
  ssizetype _25;
  int * _26;
  unsigned int ivtmp_31;
  long unsigned int _34;
  long unsigned int _35;
  unsigned int ivtmp_36;
  _Bool _37;
  unsigned int ivtmp_38;
  int * _39;
  int _40;
  int * _41;
  int _42;
  int _43;
  int * _44;
  int _45;
  int _46;
  unsigned int ivtmp_49;
  unsigned int ivtmp_54;
  long unsigned int _55;
  long unsigned int _56;
  int * _57;
  int _58;
  int * _59;
  int _60;
  int _61;
  int * _62;
  int _63;
  int _64;
  unsigned int ivtmp_67;
  unsigned int ivtmp_83;
  unsigned int ivtmp_84;
  unsigned int ivtmp_87;
  long unsigned int _88;
  long unsigned int _89;
  int * _90;
  int _91;
  int * _92;
  int _93;
  int _94;
  int * _95;
  int _96;
  int _97;
  unsigned int ivtmp_100;
  unsigned int ivtmp_120;
  unsigned int ivtmp_121;

  <bb 2> [local count: 10737416]:
  _26 = b_15(D) + 4;
  _25 = a_14(D) - _26;
  _22 = (sizetype) _25;
  _21 = _22 > 24;
  _20 = c_16(D) + 4;
  _19 = a_14(D) - _20;
  _12 = (sizetype) _19;
  _11 = _12 > 24;
  _37 = _11 & _21;
  if (_37 != 0)
    goto <bb 16>; [80.00%]
  else
    goto <bb 10>; [20.00%]

  <bb 16> [local count: 8589933]:

  <bb 3> [local count: 111669131]:
  # i_23 = PHI <i_18(5), 0(16)>
  # ivtmp_38 = PHI <ivtmp_31(5), 65535(16)>
  # vectp_a.186_69 = PHI <vectp_a.186_70(5), a_14(D)(16)>
  # vectp_b.189_72 = PHI <vectp_b.189_73(5), b_15(D)(16)>
  # vectp_c.193_76 = PHI <vectp_c.193_77(5), c_16(D)(16)>
  # vectp_a.197_80 = PHI <vectp_a.197_81(5), a_14(D)(16)>
  # ivtmp_83 = PHI <ivtmp_84(5), 0(16)>
  _1 = (long unsigned int) i_23;
  _2 = _1 * 4;
  _3 = a_14(D) + _2;
  vect__4.188_71 = MEM <vector(8) int> [(int *)vectp_a.186_69];
  _4 = *_3;
  _5 = b_15(D) + _2;
  vect__6.191_74 = MEM <vector(8) int> [(int *)vectp_b.189_72];
  _6 = *_5;
  vect__7.192_75 = vect__4.188_71 + vect__6.191_74;
  _7 = _4 + _6;
  _8 = c_16(D) + _2;
  vect__9.195_78 = MEM <vector(8) int> [(int *)vectp_c.193_76];
  _9 = *_8;
  vect__10.196_79 = vect__7.192_75 + vect__9.195_78;
  _10 = _7 + _9;
  MEM <vector(8) int> [(int *)vectp_a.197_80] = vect__10.196_79;
  i_18 = i_23 + 1;
  ivtmp_31 = ivtmp_38 - 1;
  vectp_a.186_70 = vectp_a.186_69 + 32;
  vectp_b.189_73 = vectp_b.189_72 + 32;
  vectp_c.193_77 = vectp_c.193_76 + 32;
  vectp_a.197_81 = vectp_a.197_80 + 32;
  ivtmp_84 = ivtmp_83 + 1;
  if (ivtmp_84 < 8191)
    goto <bb 5>; [92.31%]
  else
    goto <bb 13>; [7.69%]

  <bb 5> [local count: 103079197]:
  goto <bb 3>; [100.00%]

  <bb 13> [local count: 8589933]:
  vectp_a.202_102 = a_14(D) + 262112;
  vectp_b.205_106 = b_15(D) + 262112;
  vectp_c.209_111 = c_16(D) + 262112;
  vectp_a.213_116 = a_14(D) + 262112;

  <bb 14> [local count: 17179868]:
  # i_52 = PHI <i_66(15), 65528(13)>
  # ivtmp_54 = PHI <ivtmp_67(15), 7(13)>
  # vectp_a.201_103 = PHI <vectp_a.201_104(15), vectp_a.202_102(13)>
  # vectp_b.204_107 = PHI <vectp_b.204_108(15), vectp_b.205_106(13)>
  # vectp_c.208_112 = PHI <vectp_c.208_113(15), vectp_c.209_111(13)>
  # vectp_a.212_117 = PHI <vectp_a.212_118(15), vectp_a.213_116(13)>
  # ivtmp_120 = PHI <ivtmp_121(15), 0(13)>
  _55 = (long unsigned int) i_52;
  _56 = _55 * 4;
  _57 = a_14(D) + _56;
  vect__58.203_105 = MEM <vector(4) int> [(int *)vectp_a.201_103];
  _58 = *_57;
  _59 = b_15(D) + _56;
  vect__60.206_109 = MEM <vector(4) int> [(int *)vectp_b.204_107];
  _60 = *_59;
  vect__61.207_110 = vect__58.203_105 + vect__60.206_109;
  _61 = _58 + _60;
  _62 = c_16(D) + _56;
  vect__63.210_114 = MEM <vector(4) int> [(int *)vectp_c.208_112];
  _63 = *_62;
  vect__64.211_115 = vect__61.207_110 + vect__63.210_114;
  _64 = _61 + _63;
  MEM <vector(4) int> [(int *)vectp_a.212_117] = vect__64.211_115;
  i_66 = i_52 + 1;
  ivtmp_67 = ivtmp_54 - 1;
  vectp_a.201_104 = vectp_a.201_103 + 16;
  vectp_b.204_108 = vectp_b.204_107 + 16;
  vectp_c.208_113 = vectp_c.208_112 + 16;
  vectp_a.212_118 = vectp_a.212_117 + 16;
  ivtmp_121 = ivtmp_120 + 1;
  if (ivtmp_121 < 1)
    goto <bb 15>; [50.00%]
  else
    goto <bb 18>; [50.00%]

  <bb 15> [local count: 8589934]:
  goto <bb 14>; [100.00%]

  <bb 18> [local count: 8589933]:

  <bb 19> [local count: 850403532]:
  # i_85 = PHI <65532(18), i_99(20)>
  # ivtmp_87 = PHI <3(18), ivtmp_100(20)>
  _88 = (long unsigned int) i_85;
  _89 = _88 * 4;
  _90 = a_14(D) + _89;
  _91 = *_90;
  _92 = b_15(D) + _89;
  _93 = *_92;
  _94 = _91 + _93;
  _95 = c_16(D) + _89;
  _96 = *_95;
  _97 = _94 + _96;
  *_90 = _97;
  i_99 = i_85 + 1;
  ivtmp_100 = ivtmp_87 - 1;
  if (ivtmp_100 != 0)
    goto <bb 20>; [98.99%]
  else
    goto <bb 11>; [1.01%]

  <bb 20> [local count: 841813602]:
  goto <bb 19>; [100.00%]

  <bb 10> [local count: 2147483]:

  <bb 6> [local count: 212600877]:
  # i_32 = PHI <i_48(7), 0(10)>
  # ivtmp_36 = PHI <ivtmp_49(7), 65535(10)>
  _35 = (long unsigned int) i_32;
  _34 = _35 * 4;
  _39 = a_14(D) + _34;
  _40 = *_39;
  _41 = b_15(D) + _34;
  _42 = *_41;
  _43 = _40 + _42;
  _44 = c_16(D) + _34;
  _45 = *_44;
  _46 = _43 + _45;
  *_39 = _46;
  i_48 = i_32 + 1;
  ivtmp_49 = ivtmp_36 - 1;
  if (ivtmp_49 != 0)
    goto <bb 7>; [98.99%]
  else
    goto <bb 4>; [1.01%]

  <bb 7> [local count: 210453394]:
  goto <bb 6>; [100.00%]

  <bb 11> [local count: 8589931]:

  <bb 4> [local count: 10737416]:
  return;

}



;; Function s271 (s271, funcdef_no=25, decl_uid=3565, cgraph_uid=26, symbol_order=25)


Analyzing loop at tsvc.c:42
tsvc.c:42:5: note:  === analyze_loop_nest ===
tsvc.c:42:5: note:   === vect_analyze_loop_form ===
tsvc.c:42:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: b_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_15(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_17(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:42:5: note:   === vect_analyze_data_refs ===
tsvc.c:42:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:42:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _41);
vector(8) int
tsvc.c:42:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _41);
vector(8) int
tsvc.c:42:5: note:   got vectype for stmt: .MASK_STORE (_5, 32B, _41, _10);
vector(8) int
tsvc.c:42:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:42:5: note:   Analyze phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:42:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:42:5: note:   step: 1,  init: 0
tsvc.c:42:5: note:   Detected induction.
tsvc.c:42:5: note:   Analyze phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:42:5: note:   Analyze phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:42:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:42:5: note:   step: 4294967295,  init: 65536
tsvc.c:42:5: note:   Detected induction.
tsvc.c:42:5: note:   === vect_determine_precisions ===
tsvc.c:42:5: note:   ivtmp_29 has no range info
tsvc.c:42:5: note:   i_19 has range [0x1, 0x10000]
tsvc.c:42:5: note:   can narrow to unsigned:17 without loss of precision: i_19 = i_25 + 1;
tsvc.c:42:5: note:   _10 has no range info
tsvc.c:42:5: note:   _9 has no range info
tsvc.c:42:5: note:   using boolean precision 32 for _41 = _4 > 0;
tsvc.c:42:5: note:   _4 has no range info
tsvc.c:42:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:42:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:42:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:42:5: note:   === vect_pattern_recog ===
tsvc.c:42:5: note:   vect_is_simple_use: operand (long unsigned int) i_25, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: operand i_25 = PHI <i_19(7), 0(15)>, type of def: induction
tsvc.c:42:5: note:   vect_is_simple_use: operand (long unsigned int) i_25, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: operand i_25 = PHI <i_19(7), 0(15)>, type of def: induction
tsvc.c:42:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:42:5: note:   widen_mult pattern recognized: patt_42 = (long unsigned int) patt_12;
tsvc.c:42:5: note:   extra pattern stmt: patt_12 = i_25 w* 4;
tsvc.c:42:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:42:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:42:5: note:   init: phi relevant? i_25 = PHI <i_19(7), 0(15)>
tsvc.c:42:5: note:   init: phi relevant? .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:42:5: note:   init: phi relevant? ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:42:5: note:   init: stmt relevant? _1 = (long unsigned int) i_25;
tsvc.c:42:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:42:5: note:   init: stmt relevant? _3 = b_15(D) + _2;
tsvc.c:42:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:42:5: note:   init: stmt relevant? _5 = a_16(D) + _2;
tsvc.c:42:5: note:   init: stmt relevant? _41 = _4 > 0;
tsvc.c:42:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:42:5: note:   init: stmt relevant? _7 = c_17(D) + _2;
tsvc.c:42:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:42:5: note:   init: stmt relevant? _9 = _4 + _8;
tsvc.c:42:5: note:   init: stmt relevant? _10 = _6 + _9;
tsvc.c:42:5: note:   init: stmt relevant? .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:42:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:42:5: note:   mark relevant 5, live 0: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:42:5: note:   init: stmt relevant? i_19 = i_25 + 1;
tsvc.c:42:5: note:   init: stmt relevant? ivtmp_29 = ivtmp_30 - 1;
tsvc.c:42:5: note:   init: stmt relevant? if (ivtmp_29 != 0)
tsvc.c:42:5: note:   worklist: examine stmt: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _41 = _4 > 0;
tsvc.c:42:5: note:   vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _10 = _6 + _9;
tsvc.c:42:5: note:   worklist: examine stmt: _10 = _6 + _9;
tsvc.c:42:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _9 = _4 + _8;
tsvc.c:42:5: note:   worklist: examine stmt: _9 = _4 + _8;
tsvc.c:42:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:42:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:42:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _41 = _4 > 0;
tsvc.c:42:5: note:   already marked relevant/live.
tsvc.c:42:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:42:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _41 = _4 > 0;
tsvc.c:42:5: note:   already marked relevant/live.
tsvc.c:42:5: note:   worklist: examine stmt: _41 = _4 > 0;
tsvc.c:42:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:42:5: note:   already marked relevant/live.
tsvc.c:42:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _41);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _41);
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _41);
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _41);
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _41);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _41);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _41, _10);
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:44:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:42:5: note:   dependence distance  = 0.
tsvc.c:42:5: note:   dependence distance == 0 between *_5 and *_5
tsvc.c:46:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:42:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:42:5: note:   ==> examining phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:42:5: note:   ==> examining phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:42:5: note:   ==> examining phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:42:5: note:   ==> examining statement: _1 = (long unsigned int) i_25;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining pattern def stmt: patt_12 = i_25 w* 4;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining pattern statement: patt_42 = (long unsigned int) patt_12;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining statement: _3 = b_15(D) + _2;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:42:5: note:   precomputed vectype: vector(8) int
tsvc.c:42:5: note:   nunits = 8
tsvc.c:42:5: note:   ==> examining statement: _5 = a_16(D) + _2;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining statement: _41 = _4 > 0;
tsvc.c:42:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:42:5: note:   nunits = 8
tsvc.c:42:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:42:5: note:   precomputed vectype: vector(8) int
tsvc.c:42:5: note:   nunits = 8
tsvc.c:42:5: note:   ==> examining statement: _7 = c_17(D) + _2;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:42:5: note:   precomputed vectype: vector(8) int
tsvc.c:42:5: note:   nunits = 8
tsvc.c:42:5: note:   ==> examining statement: _9 = _4 + _8;
tsvc.c:42:5: note:   get vectype for scalar type: int
tsvc.c:42:5: note:   vectype: vector(8) int
tsvc.c:42:5: note:   nunits = 8
tsvc.c:42:5: note:   ==> examining statement: _10 = _6 + _9;
tsvc.c:42:5: note:   get vectype for scalar type: int
tsvc.c:42:5: note:   vectype: vector(8) int
tsvc.c:42:5: note:   nunits = 8
tsvc.c:42:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:42:5: note:   precomputed vectype: vector(8) int
tsvc.c:42:5: note:   nunits = 8
tsvc.c:42:5: note:   ==> examining statement: i_19 = i_25 + 1;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining statement: ivtmp_29 = ivtmp_30 - 1;
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   ==> examining statement: if (ivtmp_29 != 0)
tsvc.c:42:5: note:   skip.
tsvc.c:42:5: note:   vectorization factor = 8
tsvc.c:42:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x51ba4d0 *_3 1 times scalar_load costs 12 in body
0x51ba4d0 _4 > 0 1 times scalar_stmt costs 4 in body
0x51ba4d0 .MASK_LOAD (_5, 32B, _41) 1 times scalar_load costs 12 in body
0x51ba4d0 .MASK_LOAD (_7, 32B, _41) 1 times scalar_load costs 12 in body
0x51ba4d0 _4 + _8 1 times scalar_stmt costs 4 in body
0x51ba4d0 _6 + _9 1 times scalar_stmt costs 4 in body
0x51ba4d0 .MASK_STORE (_5, 32B, _41, _10) 1 times scalar_store costs 12 in body
tsvc.c:42:5: note:   === vect_analyze_slp ===
tsvc.c:42:5: note:   === vect_make_slp_decision ===
tsvc.c:42:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:42:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:42:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:42:5: note:   recording new base alignment for b_15(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:42:5: note:   vect_compute_data_ref_alignment:
tsvc.c:42:5: note:   can't force alignment of ref: *_3
tsvc.c:42:5: note:   vect_compute_data_ref_alignment:
tsvc.c:42:5: note:   can't force alignment of ref: *_5
tsvc.c:42:5: note:   vect_compute_data_ref_alignment:
tsvc.c:42:5: note:   can't force alignment of ref: *_7
tsvc.c:42:5: note:   vect_compute_data_ref_alignment:
tsvc.c:42:5: note:   can't force alignment of ref: *_5
tsvc.c:42:5: note:   === vect_prune_runtime_alias_test_list ===
merged alias checks:
  reference:      *_3 vs. *_5
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_7 vs. *_5
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:42:5: note:   improved number of alias checks from 2 to 2
tsvc.c:42:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:42:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:42:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:42:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:42:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:42:5: note:   vect_can_advance_ivs_p:
tsvc.c:42:5: note:   Analyze phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:42:5: note:   Analyze phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:42:5: note:   reduc or virtual phi. skip.
tsvc.c:42:5: note:   Analyze phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:42:5: note:   Setting misalignment to unknown (-1).
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_load_cost: aligned.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:42:5: note:   Setting misalignment to unknown (-1).
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_store_cost: aligned.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:42:5: note:   Setting misalignment to unknown (-1).
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_load_cost: aligned.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:42:5: note:   Setting misalignment to unknown (-1).
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_store_cost: aligned.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:42:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:42:5: note:   Vectorizing an unaligned access.
tsvc.c:42:5: note:   Vectorizing an unaligned access.
tsvc.c:42:5: note:   Vectorizing an unaligned access.
tsvc.c:42:5: note:   Vectorizing an unaligned access.
tsvc.c:42:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:42:5: note:   === vect_analyze_loop_operations ===
tsvc.c:42:5: note:   examining phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:42:5: note:   examining phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:42:5: note:   examining phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:42:5: note:   ==> examining statement: _1 = (long unsigned int) i_25;
tsvc.c:42:5: note:   irrelevant.
tsvc.c:42:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:42:5: note:   irrelevant.
tsvc.c:42:5: note:   ==> examining statement: _3 = b_15(D) + _2;
tsvc.c:42:5: note:   irrelevant.
tsvc.c:42:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:42:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:42:5: missed:   Unsupported pattern.
tsvc.c:42:5: missed:   use not simple.
tsvc.c:42:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:42:5: missed:   Unsupported pattern.
tsvc.c:42:5: missed:   use not simple.
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:42:5: note:   ==> examining statement: _5 = a_16(D) + _2;
tsvc.c:42:5: note:   irrelevant.
tsvc.c:42:5: note:   ==> examining statement: _41 = _4 > 0;
tsvc.c:42:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:42:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:42:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:42:5: note:   ==> examining statement: _7 = c_17(D) + _2;
tsvc.c:42:5: note:   irrelevant.
tsvc.c:42:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:42:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:42:5: note:   ==> examining statement: _9 = _4 + _8;
tsvc.c:42:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:    === vectorizable_operation ===
tsvc.c:42:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:42:5: note:   ==> examining statement: _10 = _6 + _9;
tsvc.c:42:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:    === vectorizable_operation ===
tsvc.c:42:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:42:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:42:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:42:5: note:   vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:42:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:42:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:42:5: note:   ==> examining statement: i_19 = i_25 + 1;
tsvc.c:42:5: note:   irrelevant.
tsvc.c:42:5: note:   ==> examining statement: ivtmp_29 = ivtmp_30 - 1;
tsvc.c:42:5: note:   irrelevant.
tsvc.c:42:5: note:   ==> examining statement: if (ivtmp_29 != 0)
tsvc.c:42:5: note:   irrelevant.
0x51c55d0 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x51c55d0 _4 > 0 1 times scalar_to_vec costs 4 in prologue
0x51c55d0 _4 > 0 1 times vector_stmt costs 4 in body
0x51c55d0 .MASK_LOAD (_5, 32B, _41) 1 times unaligned_load (misalign -1) costs 20 in body
0x51c55d0 .MASK_LOAD (_7, 32B, _41) 1 times unaligned_load (misalign -1) costs 20 in body
0x51c55d0 _4 + _8 1 times vector_stmt costs 4 in body
0x51c55d0 _6 + _9 1 times vector_stmt costs 4 in body
0x51c55d0 .MASK_STORE (_5, 32B, _41, _10) 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_29 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) b_15(D) + 4 * iteration does not wrap in statement _3 = b_15(D) + _2;
 in loop 1.
Statement _3 = b_15(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) a_16(D) + 4 * iteration does not wrap in statement _5 = a_16(D) + _2;
 in loop 1.
Statement _5 = a_16(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_17(D) + 4 * iteration does not wrap in statement _7 = c_17(D) + _2;
 in loop 1.
Statement _7 = c_17(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_19 = i_25 + 1;
 in loop 1.
Statement i_19 = i_25 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:42:5: note:  not using a fully-masked loop.
0x51c55d0 <unknown> 2 times vector_stmt costs 8 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x51c55d0 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:42:5: note:  Cost model analysis: 
  Vector inside of loop cost: 92
  Vector prologue cost: 28
  Vector epilogue cost: 0
  Scalar iteration cost: 60
  Scalar outside cost: 8
  Vector outside cost: 28
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:42:5: note:    Runtime profitability threshold = 8
tsvc.c:42:5: note:    Static estimate profitability threshold = 8
tsvc.c:42:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:42:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:42:5: note:  ***** Choosing vector mode V8SI
tsvc.c:42:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:42:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_5
using an address-based WAR/WAW test
create runtime check for data references *_7 and *_5
using an address-based WAR/WAW test
tsvc.c:42:5: note:  created 2 versioning for alias checks.
tsvc.c:42:5: note:  trying to apply versioning to outer loop 0
tsvc.c:42:5: note:  reusing loop version created by if conversion
tsvc.c:42:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:42:5: note:  ------>vectorizing phi: i_25 = PHI <i_19(7), 0(19)>
tsvc.c:42:5: note:  ------>vectorizing phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(19)>
tsvc.c:42:5: note:  ------>vectorizing phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(19)>
tsvc.c:42:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_25;
tsvc.c:42:5: note:  ------>vectorizing statement: patt_12 = i_25 w* 4;
tsvc.c:42:5: note:  ------>vectorizing statement: patt_42 = (long unsigned int) patt_12;
tsvc.c:42:5: note:  ------>vectorizing statement: _3 = b_15(D) + _2;
tsvc.c:42:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:42:5: note:  transform statement.
tsvc.c:42:5: note:  transform load. ncopies = 1
tsvc.c:42:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_15(D)
tsvc.c:42:5: note:  created b_15(D)
tsvc.c:42:5: note:  add new stmt: vect__4.240_56 = MEM <vector(8) int> [(int *)vectp_b.238_54];
tsvc.c:42:5: note:  ------>vectorizing statement: _5 = a_16(D) + _2;
tsvc.c:42:5: note:  ------>vectorizing statement: _41 = _4 > 0;
tsvc.c:42:5: note:  transform statement.
tsvc.c:42:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:42:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:    def_stmt =  _4 = *_3;
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:42:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:42:5: note:  created new init_stmt: vect_cst__57 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:42:5: note:  add new stmt: mask__41.241_58 = vect__4.240_56 > vect_cst__57;
tsvc.c:42:5: note:  ------>vectorizing statement: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:42:5: note:  transform statement.
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:42:5: note:  transform load. ncopies = 1
tsvc.c:42:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_16(D)
tsvc.c:42:5: note:  created a_16(D)
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:    def_stmt =  _41 = _4 > 0;
tsvc.c:42:5: note:  add new stmt: vect__6.244_61 = .MASK_LOAD (vectp_a.242_59, 32B, mask__41.241_58);
tsvc.c:42:5: note:  ------>vectorizing statement: _7 = c_17(D) + _2;
tsvc.c:42:5: note:  ------>vectorizing statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:42:5: note:  transform statement.
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:42:5: note:  transform load. ncopies = 1
tsvc.c:42:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_17(D)
tsvc.c:42:5: note:  created c_17(D)
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:    def_stmt =  _41 = _4 > 0;
tsvc.c:42:5: note:  add new stmt: vect__8.247_64 = .MASK_LOAD (vectp_c.245_62, 32B, mask__41.241_58);
tsvc.c:42:5: note:  ------>vectorizing statement: _9 = _4 + _8;
tsvc.c:42:5: note:  transform statement.
tsvc.c:42:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:  transform binary/unary operation.
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:42:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:42:5: note:    def_stmt =  _4 = *_3;
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _8
tsvc.c:42:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:42:5: note:    def_stmt =  _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:42:5: note:  add new stmt: vect__9.248_65 = vect__4.240_56 + vect__8.247_64;
tsvc.c:42:5: note:  ------>vectorizing statement: _10 = _6 + _9;
tsvc.c:42:5: note:  transform statement.
tsvc.c:42:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:  transform binary/unary operation.
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:42:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:42:5: note:    def_stmt =  _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:42:5: note:    def_stmt =  _9 = _4 + _8;
tsvc.c:42:5: note:  add new stmt: vect__10.249_66 = vect__6.244_61 + vect__9.248_65;
tsvc.c:42:5: note:  ------>vectorizing statement: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:42:5: note:  transform statement.
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:42:5: note:  vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:42:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:42:5: note:  transform store. ncopies = 1
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:42:5: note:  vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:42:5: note:    def_stmt =  _10 = _6 + _9;
tsvc.c:42:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:42:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:42:5: note:    def_stmt =  _41 = _4 > 0;
tsvc.c:42:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_16(D)
tsvc.c:42:5: note:  created a_16(D)
tsvc.c:42:5: note:  add new stmt: .MASK_STORE (vectp_a.250_67, 32B, mask__41.241_58, vect__10.249_66);
tsvc.c:42:5: note:  ------>vectorizing statement: i_19 = i_25 + 1;
tsvc.c:42:5: note:  ------>vectorizing statement: ivtmp_29 = ivtmp_30 - 1;
tsvc.c:42:5: note:  ------>vectorizing statement: vectp_b.238_55 = vectp_b.238_54 + 32;
tsvc.c:42:5: note:  ------>vectorizing statement: vectp_a.242_60 = vectp_a.242_59 + 32;
tsvc.c:42:5: note:  ------>vectorizing statement: vectp_c.245_63 = vectp_c.245_62 + 32;
tsvc.c:42:5: note:  ------>vectorizing statement: vectp_a.250_68 = vectp_a.250_67 + 32;
tsvc.c:42:5: note:  ------>vectorizing statement: if (ivtmp_29 != 0)
tsvc.c:42:5: note:  New loop exit condition: if (ivtmp_71 < 8192)
tsvc.c:42:5: note:  LOOP VECTORIZED

tsvc.c:40:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       19


fix_loop_structure: fixing up loops for function
s271 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_a.251;
  vector(8) int * vectp_a.250;
  vector(8) int vect__10.249;
  vector(8) int vect__9.248;
  vector(8) int vect__8.247;
  vector(8) int * vectp_c.246;
  vector(8) int * vectp_c.245;
  vector(8) int vect__6.244;
  vector(8) int * vectp_a.243;
  vector(8) int * vectp_a.242;
  vector(8) <unnamed type> mask__41.241;
  vector(8) int vect__4.240;
  vector(8) int * vectp_b.239;
  vector(8) int * vectp_b.238;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  long unsigned int _11;
  unsigned int ivtmp_13;
  int * _20;
  int _21;
  int * _22;
  long unsigned int _23;
  _Bool _28;
  unsigned int ivtmp_29;
  unsigned int ivtmp_30;
  int _31;
  int * _32;
  int _33;
  int _34;
  int _35;
  unsigned int ivtmp_39;
  _Bool _41;
  int * _44;
  ssizetype _45;
  sizetype _46;
  _Bool _47;
  int * _48;
  ssizetype _49;
  sizetype _50;
  _Bool _51;
  _Bool _52;
  vector(8) int vect_cst__57;
  unsigned int ivtmp_70;
  unsigned int ivtmp_71;

  <bb 2> [local count: 10737414]:
  _44 = b_15(D) + 4;
  _45 = a_16(D) - _44;
  _46 = (sizetype) _45;
  _47 = _46 > 24;
  _48 = c_17(D) + 4;
  _49 = a_16(D) - _48;
  _50 = (sizetype) _49;
  _51 = _50 > 24;
  _52 = _47 & _51;
  _28 = 1;
  if (_52 != 0)
    goto <bb 19>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 19> [local count: 10737414]:
  vect_cst__57 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374140]:
  # i_25 = PHI <i_19(7), 0(19)>
  # ivtmp_30 = PHI <ivtmp_29(7), 65536(19)>
  # vectp_b.238_54 = PHI <vectp_b.238_55(7), b_15(D)(19)>
  # vectp_a.242_59 = PHI <vectp_a.242_60(7), a_16(D)(19)>
  # vectp_c.245_62 = PHI <vectp_c.245_63(7), c_17(D)(19)>
  # vectp_a.250_67 = PHI <vectp_a.250_68(7), a_16(D)(19)>
  # ivtmp_70 = PHI <ivtmp_71(7), 0(19)>
  _1 = (long unsigned int) i_25;
  _2 = _1 * 4;
  _3 = b_15(D) + _2;
  vect__4.240_56 = MEM <vector(8) int> [(int *)vectp_b.238_54];
  _4 = *_3;
  _5 = a_16(D) + _2;
  mask__41.241_58 = vect__4.240_56 > vect_cst__57;
  _41 = _4 > 0;
  vect__6.244_61 = .MASK_LOAD (vectp_a.242_59, 32B, mask__41.241_58);
  _6 = 0;
  _7 = c_17(D) + _2;
  vect__8.247_64 = .MASK_LOAD (vectp_c.245_62, 32B, mask__41.241_58);
  _8 = 0;
  vect__9.248_65 = vect__4.240_56 + vect__8.247_64;
  _9 = _4 + _8;
  vect__10.249_66 = vect__6.244_61 + vect__9.248_65;
  _10 = _6 + _9;
  .MASK_STORE (vectp_a.250_67, 32B, mask__41.241_58, vect__10.249_66);
  i_19 = i_25 + 1;
  ivtmp_29 = ivtmp_30 - 1;
  vectp_b.238_55 = vectp_b.238_54 + 32;
  vectp_a.242_60 = vectp_a.242_59 + 32;
  vectp_c.245_63 = vectp_c.245_62 + 32;
  vectp_a.250_68 = vectp_a.250_67 + 32;
  ivtmp_71 = ivtmp_70 + 1;
  if (ivtmp_71 < 8192)
    goto <bb 7>; [90.00%]
  else
    goto <bb 17>; [10.00%]

  <bb 7> [local count: 96636725]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 212600877]:
  # i_27 = PHI <i_38(13), 0(16)>
  # ivtmp_13 = PHI <ivtmp_39(13), 65536(16)>
  _11 = (long unsigned int) i_27;
  _23 = _11 * 4;
  _22 = b_15(D) + _23;
  _21 = *_22;
  if (_21 > 0)
    goto <bb 11>; [59.00%]
  else
    goto <bb 12>; [41.00%]

  <bb 11> [local count: 125434518]:
  _20 = a_16(D) + _23;
  _31 = *_20;
  _32 = c_17(D) + _23;
  _33 = *_32;
  _34 = _21 + _33;
  _35 = _31 + _34;
  *_20 = _35;

  <bb 12> [local count: 212600877]:
  i_38 = i_27 + 1;
  ivtmp_39 = ivtmp_13 - 1;
  if (ivtmp_39 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 6>; [100.00%]

  <bb 13> [local count: 210453395]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s272 (s272, funcdef_no=26, decl_uid=3583, cgraph_uid=27, symbol_order=26)


Analyzing loop at tsvc.c:52
tsvc.c:52:5: note:  === analyze_loop_nest ===
tsvc.c:52:5: note:   === vect_analyze_loop_form ===
tsvc.c:52:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: e_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_9
analyze_innermost: success.
	base_address: d_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_13
analyze_innermost: success.
	base_address: b_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_13
analyze_innermost: success.
	base_address: b_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_27(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:52:5: note:   === vect_analyze_data_refs ===
tsvc.c:52:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:52:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _59);
vector(8) int
tsvc.c:52:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _59);
vector(8) int
tsvc.c:52:5: note:   got vectype for stmt: _10 = .MASK_LOAD (_9, 32B, _59);
vector(8) int
tsvc.c:52:5: note:   got vectype for stmt: .MASK_STORE (_5, 32B, _59, _12);
vector(8) int
tsvc.c:52:5: note:   got vectype for stmt: _14 = .MASK_LOAD (_13, 32B, _59);
vector(8) int
tsvc.c:52:5: note:   got vectype for stmt: _15 = .MASK_LOAD (_7, 32B, _59);
vector(8) int
tsvc.c:52:5: note:   got vectype for stmt: .MASK_STORE (_13, 32B, _59, _17);
vector(8) int
tsvc.c:52:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:52:5: note:   Analyze phi: i_36 = PHI <i_29(7), 0(15)>
tsvc.c:52:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:52:5: note:   step: 1,  init: 0
tsvc.c:52:5: note:   Detected induction.
tsvc.c:52:5: note:   Analyze phi: .MEM_37 = PHI <.MEM_28(7), .MEM_21(D)(15)>
tsvc.c:52:5: note:   Analyze phi: ivtmp_40 = PHI <ivtmp_39(7), 65536(15)>
tsvc.c:52:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:52:5: note:   step: 4294967295,  init: 65536
tsvc.c:52:5: note:   Detected induction.
tsvc.c:52:5: note:   === vect_determine_precisions ===
tsvc.c:52:5: note:   ivtmp_39 has no range info
tsvc.c:52:5: note:   i_29 has range [0x1, 0x10000]
tsvc.c:52:5: note:   can narrow to unsigned:17 without loss of precision: i_29 = i_36 + 1;
tsvc.c:52:5: note:   _17 has no range info
tsvc.c:52:5: note:   _16 has no range info
tsvc.c:52:5: note:   _12 has no range info
tsvc.c:52:5: note:   _11 has no range info
tsvc.c:52:5: note:   using boolean precision 32 for _59 = _4 > 499;
tsvc.c:52:5: note:   _4 has no range info
tsvc.c:52:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:52:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:52:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:52:5: note:   === vect_pattern_recog ===
tsvc.c:52:5: note:   vect_is_simple_use: operand (long unsigned int) i_36, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: operand i_36 = PHI <i_29(7), 0(15)>, type of def: induction
tsvc.c:52:5: note:   vect_is_simple_use: operand (long unsigned int) i_36, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: operand i_36 = PHI <i_29(7), 0(15)>, type of def: induction
tsvc.c:52:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:52:5: note:   widen_mult pattern recognized: patt_60 = (long unsigned int) patt_19;
tsvc.c:52:5: note:   extra pattern stmt: patt_19 = i_36 w* 4;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:52:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:52:5: note:   Queuing group with duplicate access for fixup
tsvc.c:52:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:52:5: note:   init: phi relevant? i_36 = PHI <i_29(7), 0(15)>
tsvc.c:52:5: note:   init: phi relevant? .MEM_37 = PHI <.MEM_28(7), .MEM_21(D)(15)>
tsvc.c:52:5: note:   init: phi relevant? ivtmp_40 = PHI <ivtmp_39(7), 65536(15)>
tsvc.c:52:5: note:   init: stmt relevant? _1 = (long unsigned int) i_36;
tsvc.c:52:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:52:5: note:   init: stmt relevant? _3 = e_22(D) + _2;
tsvc.c:52:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:52:5: note:   init: stmt relevant? _5 = a_23(D) + _2;
tsvc.c:52:5: note:   init: stmt relevant? _59 = _4 > 499;
tsvc.c:52:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _59);
tsvc.c:52:5: note:   init: stmt relevant? _7 = c_24(D) + _2;
tsvc.c:52:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   init: stmt relevant? _9 = d_25(D) + _2;
tsvc.c:52:5: note:   init: stmt relevant? _10 = .MASK_LOAD (_9, 32B, _59);
tsvc.c:52:5: note:   init: stmt relevant? _11 = _8 + _10;
tsvc.c:52:5: note:   init: stmt relevant? _12 = _6 + _11;
tsvc.c:52:5: note:   init: stmt relevant? .MASK_STORE (_5, 32B, _59, _12);
tsvc.c:52:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:52:5: note:   mark relevant 5, live 0: .MASK_STORE (_5, 32B, _59, _12);
tsvc.c:52:5: note:   init: stmt relevant? _13 = b_27(D) + _2;
tsvc.c:52:5: note:   init: stmt relevant? _14 = .MASK_LOAD (_13, 32B, _59);
tsvc.c:52:5: note:   init: stmt relevant? _15 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   init: stmt relevant? _16 = _15 * 2;
tsvc.c:52:5: note:   init: stmt relevant? _17 = _14 + _16;
tsvc.c:52:5: note:   init: stmt relevant? .MASK_STORE (_13, 32B, _59, _17);
tsvc.c:52:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:52:5: note:   mark relevant 5, live 0: .MASK_STORE (_13, 32B, _59, _17);
tsvc.c:52:5: note:   init: stmt relevant? i_29 = i_36 + 1;
tsvc.c:52:5: note:   init: stmt relevant? ivtmp_39 = ivtmp_40 - 1;
tsvc.c:52:5: note:   init: stmt relevant? if (ivtmp_39 != 0)
tsvc.c:52:5: note:   worklist: examine stmt: .MASK_STORE (_13, 32B, _59, _17);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _59 = _4 > 499;
tsvc.c:52:5: note:   vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _17 = _14 + _16;
tsvc.c:52:5: note:   worklist: examine stmt: _17 = _14 + _16;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_13, 32B, _59), type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _14 = .MASK_LOAD (_13, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _15 * 2, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _16 = _15 * 2;
tsvc.c:52:5: note:   worklist: examine stmt: _16 = _15 * 2;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _15 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   worklist: examine stmt: _15 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _59 = _4 > 499;
tsvc.c:52:5: note:   already marked relevant/live.
tsvc.c:52:5: note:   worklist: examine stmt: _14 = .MASK_LOAD (_13, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _59 = _4 > 499;
tsvc.c:52:5: note:   already marked relevant/live.
tsvc.c:52:5: note:   worklist: examine stmt: _59 = _4 > 499;
tsvc.c:52:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:52:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:52:5: note:   worklist: examine stmt: .MASK_STORE (_5, 32B, _59, _12);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _59 = _4 > 499;
tsvc.c:52:5: note:   already marked relevant/live.
tsvc.c:52:5: note:   vect_is_simple_use: operand _6 + _11, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _12 = _6 + _11;
tsvc.c:52:5: note:   worklist: examine stmt: _12 = _6 + _11;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _59), type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _8 + _10, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _11 = _8 + _10;
tsvc.c:52:5: note:   worklist: examine stmt: _11 = _8 + _10;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _59), type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _10 = .MASK_LOAD (_9, 32B, _59);
tsvc.c:52:5: note:   worklist: examine stmt: _10 = .MASK_LOAD (_9, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _59 = _4 > 499;
tsvc.c:52:5: note:   already marked relevant/live.
tsvc.c:52:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _59 = _4 > 499;
tsvc.c:52:5: note:   already marked relevant/live.
tsvc.c:52:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   mark relevant 5, live 0: _59 = _4 > 499;
tsvc.c:52:5: note:   already marked relevant/live.
tsvc.c:52:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_5, 32B, _59, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _14 = .MASK_LOAD (_13, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _15 = .MASK_LOAD (_7, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _59);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _59);
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _59);
  stmt_b: .MASK_STORE (_5, 32B, _59, _12);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _59);
  stmt_b: _14 = .MASK_LOAD (_13, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _59);
  stmt_b: _15 = .MASK_LOAD (_7, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _59);
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: .MASK_STORE (_5, 32B, _59, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: _14 = .MASK_LOAD (_13, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: _15 = .MASK_LOAD (_7, 32B, _59);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _59);
  stmt_b: .MASK_STORE (_5, 32B, _59, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _59);
  stmt_b: _14 = .MASK_LOAD (_13, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _59);
  stmt_b: _15 = .MASK_LOAD (_7, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _59);
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _59, _12);
  stmt_b: _14 = .MASK_LOAD (_13, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _59, _12);
  stmt_b: _15 = .MASK_LOAD (_7, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _59, _12);
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = .MASK_LOAD (_13, 32B, _59);
  stmt_b: _15 = .MASK_LOAD (_7, 32B, _59);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = .MASK_LOAD (_13, 32B, _59);
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _15 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _59);
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _59);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _59);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _59);
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _59);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _59, _12);
  stmt_b: .MASK_STORE (_5, 32B, _59, _12);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _14 = .MASK_LOAD (_13, 32B, _59);
  stmt_b: _14 = .MASK_LOAD (_13, 32B, _59);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _15 = .MASK_LOAD (_7, 32B, _59);
  stmt_b: _15 = .MASK_LOAD (_7, 32B, _59);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_13, 32B, _59, _17);
  stmt_b: .MASK_STORE (_13, 32B, _59, _17);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:54:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:54:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_13
consider run-time aliasing test between *_3 and *_13
tsvc.c:52:5: note:   dependence distance  = 0.
tsvc.c:52:5: note:   dependence distance == 0 between *_5 and *_5
tsvc.c:56:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_13
consider run-time aliasing test between *_5 and *_13
tsvc.c:56:22: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:56:22: missed:   versioning for alias required: can't determine dependence between *_7 and *_13
consider run-time aliasing test between *_7 and *_13
tsvc.c:56:29: missed:   versioning for alias required: can't determine dependence between *_9 and *_5
consider run-time aliasing test between *_9 and *_5
tsvc.c:56:29: missed:   versioning for alias required: can't determine dependence between *_9 and *_13
consider run-time aliasing test between *_9 and *_13
tsvc.c:56:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_13
consider run-time aliasing test between *_5 and *_13
tsvc.c:56:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_7
consider run-time aliasing test between *_5 and *_7
tsvc.c:56:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_13
consider run-time aliasing test between *_5 and *_13
tsvc.c:52:5: note:   dependence distance  = 0.
tsvc.c:52:5: note:   dependence distance == 0 between *_13 and *_13
tsvc.c:57:22: missed:   versioning for alias required: can't determine dependence between *_7 and *_13
consider run-time aliasing test between *_7 and *_13
tsvc.c:52:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:52:5: note:   ==> examining phi: i_36 = PHI <i_29(7), 0(15)>
tsvc.c:52:5: note:   ==> examining phi: .MEM_37 = PHI <.MEM_28(7), .MEM_21(D)(15)>
tsvc.c:52:5: note:   ==> examining phi: ivtmp_40 = PHI <ivtmp_39(7), 65536(15)>
tsvc.c:52:5: note:   ==> examining statement: _1 = (long unsigned int) i_36;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining pattern def stmt: patt_19 = i_36 w* 4;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining pattern statement: patt_60 = (long unsigned int) patt_19;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: _3 = e_22(D) + _2;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _5 = a_23(D) + _2;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: _59 = _4 > 499;
tsvc.c:52:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _59);
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _7 = c_24(D) + _2;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _9 = d_25(D) + _2;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: _10 = .MASK_LOAD (_9, 32B, _59);
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _11 = _8 + _10;
tsvc.c:52:5: note:   get vectype for scalar type: int
tsvc.c:52:5: note:   vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _12 = _6 + _11;
tsvc.c:52:5: note:   get vectype for scalar type: int
tsvc.c:52:5: note:   vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _59, _12);
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _13 = b_27(D) + _2;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: _14 = .MASK_LOAD (_13, 32B, _59);
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _15 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _16 = _15 * 2;
tsvc.c:52:5: note:   get vectype for scalar type: int
tsvc.c:52:5: note:   vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: _17 = _14 + _16;
tsvc.c:52:5: note:   get vectype for scalar type: int
tsvc.c:52:5: note:   vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: .MASK_STORE (_13, 32B, _59, _17);
tsvc.c:52:5: note:   precomputed vectype: vector(8) int
tsvc.c:52:5: note:   nunits = 8
tsvc.c:52:5: note:   ==> examining statement: i_29 = i_36 + 1;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: ivtmp_39 = ivtmp_40 - 1;
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   ==> examining statement: if (ivtmp_39 != 0)
tsvc.c:52:5: note:   skip.
tsvc.c:52:5: note:   vectorization factor = 8
tsvc.c:52:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x51e8af0 *_3 1 times scalar_load costs 12 in body
0x51e8af0 _4 > 499 1 times scalar_stmt costs 4 in body
0x51e8af0 .MASK_LOAD (_5, 32B, _59) 1 times scalar_load costs 12 in body
0x51e8af0 .MASK_LOAD (_7, 32B, _59) 1 times scalar_load costs 12 in body
0x51e8af0 .MASK_LOAD (_9, 32B, _59) 1 times scalar_load costs 12 in body
0x51e8af0 _8 + _10 1 times scalar_stmt costs 4 in body
0x51e8af0 _6 + _11 1 times scalar_stmt costs 4 in body
0x51e8af0 .MASK_STORE (_5, 32B, _59, _12) 1 times scalar_store costs 12 in body
0x51e8af0 .MASK_LOAD (_13, 32B, _59) 1 times scalar_load costs 12 in body
0x51e8af0 .MASK_LOAD (_7, 32B, _59) 1 times scalar_load costs 12 in body
0x51e8af0 _15 * 2 1 times scalar_stmt costs 12 in body
0x51e8af0 _14 + _16 1 times scalar_stmt costs 4 in body
0x51e8af0 .MASK_STORE (_13, 32B, _59, _17) 1 times scalar_store costs 12 in body
tsvc.c:52:5: note:   === vect_analyze_slp ===
tsvc.c:52:5: note:   === vect_make_slp_decision ===
tsvc.c:52:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:52:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:52:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:52:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:52:5: note:   accesses have the same alignment: *_13 and *_13
tsvc.c:52:5: note:   recording new base alignment for e_22(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_3
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_5
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_7
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_9
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_5
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_13
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_7
tsvc.c:52:5: note:   vect_compute_data_ref_alignment:
tsvc.c:52:5: note:   can't force alignment of ref: *_13
tsvc.c:52:5: note:   === vect_prune_runtime_alias_test_list ===
found equal ranges *_5, *_7 and *_5, *_7
found equal ranges *_5, *_13 and *_5, *_13
found equal ranges *_5, *_13 and *_5, *_13
found equal ranges *_7, *_13 and *_7, *_13
merged alias checks:
  reference:      *_3 vs. *_5
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_3 vs. *_13
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_5 vs. *_7
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_9 vs. *_5
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_5 vs. *_13
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW
  reference:      *_7 vs. *_13
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_9 vs. *_13
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:52:5: note:   improved number of alias checks from 11 to 7
tsvc.c:52:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:52:5: note:   vect_can_advance_ivs_p:
tsvc.c:52:5: note:   Analyze phi: i_36 = PHI <i_29(7), 0(15)>
tsvc.c:52:5: note:   Analyze phi: .MEM_37 = PHI <.MEM_28(7), .MEM_21(D)(15)>
tsvc.c:52:5: note:   reduc or virtual phi. skip.
tsvc.c:52:5: note:   Analyze phi: ivtmp_40 = PHI <ivtmp_39(7), 65536(15)>
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: aligned.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_store_cost: aligned.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: aligned.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_store_cost: aligned.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:52:5: note:   Setting misalignment to unknown (-1).
tsvc.c:52:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:52:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   Vectorizing an unaligned access.
tsvc.c:52:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:52:5: note:   === vect_analyze_loop_operations ===
tsvc.c:52:5: note:   examining phi: i_36 = PHI <i_29(7), 0(15)>
tsvc.c:52:5: note:   examining phi: .MEM_37 = PHI <.MEM_28(7), .MEM_21(D)(15)>
tsvc.c:52:5: note:   examining phi: ivtmp_40 = PHI <ivtmp_39(7), 65536(15)>
tsvc.c:52:5: note:   ==> examining statement: _1 = (long unsigned int) i_36;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: _3 = e_22(D) + _2;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:52:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:52:5: missed:   Unsupported pattern.
tsvc.c:52:5: missed:   use not simple.
tsvc.c:52:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:52:5: missed:   Unsupported pattern.
tsvc.c:52:5: missed:   use not simple.
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _5 = a_23(D) + _2;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: _59 = _4 > 499;
tsvc.c:52:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:   vect_is_simple_use: operand 499, type of def: constant
tsvc.c:52:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:52:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _7 = c_24(D) + _2;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _9 = d_25(D) + _2;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: _10 = .MASK_LOAD (_9, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _11 = _8 + _10;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _59), type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:    === vectorizable_operation ===
tsvc.c:52:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _12 = _6 + _11;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _59), type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:   vect_is_simple_use: operand _8 + _10, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:    === vectorizable_operation ===
tsvc.c:52:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _59, _12);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:   vect_is_simple_use: operand _6 + _11, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _13 = b_27(D) + _2;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: _14 = .MASK_LOAD (_13, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _15 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: _16 = _15 * 2;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:   vect_is_simple_use: operand 2, type of def: constant
tsvc.c:52:5: note:    === vectorizable_operation ===
tsvc.c:52:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:52:5: note:   ==> examining statement: _17 = _14 + _16;
tsvc.c:52:5: note:   vect_is_simple_use: operand .MASK_LOAD (_13, 32B, _59), type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:   vect_is_simple_use: operand _15 * 2, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:    === vectorizable_operation ===
tsvc.c:52:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: .MASK_STORE (_13, 32B, _59, _17);
tsvc.c:52:5: note:   vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:   vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:52:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:52:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:52:5: note:   ==> examining statement: i_29 = i_36 + 1;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: ivtmp_39 = ivtmp_40 - 1;
tsvc.c:52:5: note:   irrelevant.
tsvc.c:52:5: note:   ==> examining statement: if (ivtmp_39 != 0)
tsvc.c:52:5: note:   irrelevant.
0x521c450 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x521c450 _4 > 499 1 times scalar_to_vec costs 4 in prologue
0x521c450 _4 > 499 1 times vector_stmt costs 4 in body
0x521c450 .MASK_LOAD (_5, 32B, _59) 1 times unaligned_load (misalign -1) costs 20 in body
0x521c450 .MASK_LOAD (_7, 32B, _59) 1 times unaligned_load (misalign -1) costs 20 in body
0x521c450 .MASK_LOAD (_9, 32B, _59) 1 times unaligned_load (misalign -1) costs 20 in body
0x521c450 _8 + _10 1 times vector_stmt costs 4 in body
0x521c450 _6 + _11 1 times vector_stmt costs 4 in body
0x521c450 .MASK_STORE (_5, 32B, _59, _12) 1 times unaligned_store (misalign -1) costs 20 in body
0x521c450 .MASK_LOAD (_13, 32B, _59) 1 times unaligned_load (misalign -1) costs 20 in body
0x521c450 .MASK_LOAD (_7, 32B, _59) 1 times unaligned_load (misalign -1) costs 20 in body
0x521c450 _15 * 2 1 times scalar_to_vec costs 4 in prologue
0x521c450 _15 * 2 1 times vector_stmt costs 16 in body
0x521c450 _14 + _16 1 times vector_stmt costs 4 in body
0x521c450 .MASK_STORE (_13, 32B, _59, _17) 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_39 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) e_22(D) + 4 * iteration does not wrap in statement _3 = e_22(D) + _2;
 in loop 1.
Statement _3 = e_22(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) a_23(D) + 4 * iteration does not wrap in statement _5 = a_23(D) + _2;
 in loop 1.
Statement _5 = a_23(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_24(D) + 4 * iteration does not wrap in statement _7 = c_24(D) + _2;
 in loop 1.
Statement _7 = c_24(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_25(D) + 4 * iteration does not wrap in statement _9 = d_25(D) + _2;
 in loop 1.
Statement _9 = d_25(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_27(D) + 4 * iteration does not wrap in statement _13 = b_27(D) + _2;
 in loop 1.
Statement _13 = b_27(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_29 = i_36 + 1;
 in loop 1.
Statement i_29 = i_36 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:52:5: note:  not using a fully-masked loop.
0x521c450 <unknown> 7 times vector_stmt costs 28 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x521c450 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:52:5: note:  Cost model analysis: 
  Vector inside of loop cost: 192
  Vector prologue cost: 52
  Vector epilogue cost: 0
  Scalar iteration cost: 124
  Scalar outside cost: 8
  Vector outside cost: 52
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:52:5: note:    Runtime profitability threshold = 8
tsvc.c:52:5: note:    Static estimate profitability threshold = 8
tsvc.c:52:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:52:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:52:5: note:  ***** Choosing vector mode V8SI
tsvc.c:52:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:52:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_5
using an address-based WAR/WAW test
create runtime check for data references *_3 and *_13
using an address-based WAR/WAW test
create runtime check for data references *_5 and *_7
using an address-based overlap test
create runtime check for data references *_9 and *_5
using an address-based WAR/WAW test
create runtime check for data references *_5 and *_13
using an address-based overlap test
create runtime check for data references *_7 and *_13
using an address-based WAR/WAW test
create runtime check for data references *_9 and *_13
using an address-based WAR/WAW test
tsvc.c:52:5: note:  created 7 versioning for alias checks.
tsvc.c:52:5: note:  trying to apply versioning to outer loop 0
tsvc.c:52:5: note:  reusing loop version created by if conversion
tsvc.c:52:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:52:5: note:  ------>vectorizing phi: i_36 = PHI <i_29(7), 0(19)>
tsvc.c:52:5: note:  ------>vectorizing phi: .MEM_37 = PHI <.MEM_28(7), .MEM_21(D)(19)>
tsvc.c:52:5: note:  ------>vectorizing phi: ivtmp_40 = PHI <ivtmp_39(7), 65536(19)>
tsvc.c:52:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_36;
tsvc.c:52:5: note:  ------>vectorizing statement: patt_19 = i_36 w* 4;
tsvc.c:52:5: note:  ------>vectorizing statement: patt_60 = (long unsigned int) patt_19;
tsvc.c:52:5: note:  ------>vectorizing statement: _3 = e_22(D) + _2;
tsvc.c:52:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  transform load. ncopies = 1
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_22(D)
tsvc.c:52:5: note:  created e_22(D)
tsvc.c:52:5: note:  add new stmt: vect__4.278_99 = MEM <vector(8) int> [(int *)vectp_e.276_97];
tsvc.c:52:5: note:  ------>vectorizing statement: _5 = a_23(D) + _2;
tsvc.c:52:5: note:  ------>vectorizing statement: _59 = _4 > 499;
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  vect_is_simple_use: operand 499, type of def: constant
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:52:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _4 = *_3;
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: 499
tsvc.c:52:5: note:  vect_is_simple_use: operand 499, type of def: constant
tsvc.c:52:5: note:  created new init_stmt: vect_cst__100 = { 499, 499, 499, 499, 499, 499, 499, 499 };
tsvc.c:52:5: note:  add new stmt: mask__59.279_101 = vect__4.278_99 > vect_cst__100;
tsvc.c:52:5: note:  ------>vectorizing statement: _6 = .MASK_LOAD (_5, 32B, _59);
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:  transform load. ncopies = 1
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_23(D)
tsvc.c:52:5: note:  created a_23(D)
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _59
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _59 = _4 > 499;
tsvc.c:52:5: note:  add new stmt: vect__6.282_104 = .MASK_LOAD (vectp_a.280_102, 32B, mask__59.279_101);
tsvc.c:52:5: note:  ------>vectorizing statement: _7 = c_24(D) + _2;
tsvc.c:52:5: note:  ------>vectorizing statement: _8 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:  transform load. ncopies = 1
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_24(D)
tsvc.c:52:5: note:  created c_24(D)
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _59
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _59 = _4 > 499;
tsvc.c:52:5: note:  add new stmt: vect__8.285_107 = .MASK_LOAD (vectp_c.283_105, 32B, mask__59.279_101);
tsvc.c:52:5: note:  ------>vectorizing statement: _9 = d_25(D) + _2;
tsvc.c:52:5: note:  ------>vectorizing statement: _10 = .MASK_LOAD (_9, 32B, _59);
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:  transform load. ncopies = 1
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_25(D)
tsvc.c:52:5: note:  created d_25(D)
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _59
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _59 = _4 > 499;
tsvc.c:52:5: note:  add new stmt: vect__10.288_110 = .MASK_LOAD (vectp_d.286_108, 32B, mask__59.279_101);
tsvc.c:52:5: note:  ------>vectorizing statement: _11 = _8 + _10;
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _59), type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  transform binary/unary operation.
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _8
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:    def_stmt =  _8 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _59), type of def: internal
tsvc.c:52:5: note:    def_stmt =  _10 = .MASK_LOAD (_9, 32B, _59);
tsvc.c:52:5: note:  add new stmt: vect__11.289_111 = vect__8.285_107 + vect__10.288_110;
tsvc.c:52:5: note:  ------>vectorizing statement: _12 = _6 + _11;
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _59), type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  vect_is_simple_use: operand _8 + _10, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  transform binary/unary operation.
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _59), type of def: internal
tsvc.c:52:5: note:    def_stmt =  _6 = .MASK_LOAD (_5, 32B, _59);
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:52:5: note:  vect_is_simple_use: operand _8 + _10, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _11 = _8 + _10;
tsvc.c:52:5: note:  add new stmt: vect__12.290_112 = vect__6.282_104 + vect__11.289_111;
tsvc.c:52:5: note:  ------>vectorizing statement: .MASK_STORE (_5, 32B, _59, _12);
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:  vect_is_simple_use: operand _6 + _11, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  transform store. ncopies = 1
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _12
tsvc.c:52:5: note:  vect_is_simple_use: operand _6 + _11, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _12 = _6 + _11;
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _59
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _59 = _4 > 499;
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_23(D)
tsvc.c:52:5: note:  created a_23(D)
tsvc.c:52:5: note:  add new stmt: .MASK_STORE (vectp_a.291_113, 32B, mask__59.279_101, vect__12.290_112);
tsvc.c:52:5: note:  ------>vectorizing statement: _13 = b_27(D) + _2;
tsvc.c:52:5: note:  ------>vectorizing statement: _14 = .MASK_LOAD (_13, 32B, _59);
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:  transform load. ncopies = 1
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_27(D)
tsvc.c:52:5: note:  created b_27(D)
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _59
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _59 = _4 > 499;
tsvc.c:52:5: note:  add new stmt: vect__14.295_118 = .MASK_LOAD (vectp_b.293_116, 32B, mask__59.279_101);
tsvc.c:52:5: note:  ------>vectorizing statement: _15 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:  transform load. ncopies = 1
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_24(D)
tsvc.c:52:5: note:  created c_24(D)
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _59
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _59 = _4 > 499;
tsvc.c:52:5: note:  add new stmt: vect__15.298_121 = .MASK_LOAD (vectp_c.296_119, 32B, mask__59.279_101);
tsvc.c:52:5: note:  ------>vectorizing statement: _16 = _15 * 2;
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  vect_is_simple_use: operand 2, type of def: constant
tsvc.c:52:5: note:  transform binary/unary operation.
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _15
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _59), type of def: internal
tsvc.c:52:5: note:    def_stmt =  _15 = .MASK_LOAD (_7, 32B, _59);
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: 2
tsvc.c:52:5: note:  vect_is_simple_use: operand 2, type of def: constant
tsvc.c:52:5: note:  created new init_stmt: vect_cst__122 = { 2, 2, 2, 2, 2, 2, 2, 2 };
tsvc.c:52:5: note:  add new stmt: vect__16.299_123 = vect__15.298_121 * vect_cst__122;
tsvc.c:52:5: note:  ------>vectorizing statement: _17 = _14 + _16;
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_13, 32B, _59), type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  vect_is_simple_use: operand _15 * 2, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  transform binary/unary operation.
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _14
tsvc.c:52:5: note:  vect_is_simple_use: operand .MASK_LOAD (_13, 32B, _59), type of def: internal
tsvc.c:52:5: note:    def_stmt =  _14 = .MASK_LOAD (_13, 32B, _59);
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _16
tsvc.c:52:5: note:  vect_is_simple_use: operand _15 * 2, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _16 = _15 * 2;
tsvc.c:52:5: note:  add new stmt: vect__17.300_124 = vect__14.295_118 + vect__16.299_123;
tsvc.c:52:5: note:  ------>vectorizing statement: .MASK_STORE (_13, 32B, _59, _17);
tsvc.c:52:5: note:  transform statement.
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:52:5: note:  vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:52:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:52:5: note:  transform store. ncopies = 1
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _17
tsvc.c:52:5: note:  vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _17 = _14 + _16;
tsvc.c:52:5: note:  vect_get_vec_def_for_operand: _59
tsvc.c:52:5: note:  vect_is_simple_use: operand _4 > 499, type of def: internal
tsvc.c:52:5: note:    def_stmt =  _59 = _4 > 499;
tsvc.c:52:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_27(D)
tsvc.c:52:5: note:  created b_27(D)
tsvc.c:52:5: note:  add new stmt: .MASK_STORE (vectp_b.301_125, 32B, mask__59.279_101, vect__17.300_124);
tsvc.c:52:5: note:  ------>vectorizing statement: i_29 = i_36 + 1;
tsvc.c:52:5: note:  ------>vectorizing statement: ivtmp_39 = ivtmp_40 - 1;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_e.276_98 = vectp_e.276_97 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_a.280_103 = vectp_a.280_102 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_c.283_106 = vectp_c.283_105 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_d.286_109 = vectp_d.286_108 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_a.291_114 = vectp_a.291_113 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_b.293_117 = vectp_b.293_116 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_c.296_120 = vectp_c.296_119 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: vectp_b.301_126 = vectp_b.301_125 + 32;
tsvc.c:52:5: note:  ------>vectorizing statement: if (ivtmp_39 != 0)
tsvc.c:52:5: note:  New loop exit condition: if (ivtmp_129 < 8192)
tsvc.c:52:5: note:  LOOP VECTORIZED

tsvc.c:50:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       19


fix_loop_structure: fixing up loops for function
s272 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_b.302;
  vector(8) int * vectp_b.301;
  vector(8) int vect__17.300;
  vector(8) int vect__16.299;
  vector(8) int vect__15.298;
  vector(8) int * vectp_c.297;
  vector(8) int * vectp_c.296;
  vector(8) int vect__14.295;
  vector(8) int * vectp_b.294;
  vector(8) int * vectp_b.293;
  vector(8) int * vectp_a.292;
  vector(8) int * vectp_a.291;
  vector(8) int vect__12.290;
  vector(8) int vect__11.289;
  vector(8) int vect__10.288;
  vector(8) int * vectp_d.287;
  vector(8) int * vectp_d.286;
  vector(8) int vect__8.285;
  vector(8) int * vectp_c.284;
  vector(8) int * vectp_c.283;
  vector(8) int vect__6.282;
  vector(8) int * vectp_a.281;
  vector(8) int * vectp_a.280;
  vector(8) <unnamed type> mask__59.279;
  vector(8) int vect__4.278;
  vector(8) int * vectp_e.277;
  vector(8) int * vectp_e.276;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int * _9;
  int _10;
  int _11;
  int _12;
  int * _13;
  int _14;
  int _15;
  int _16;
  int _17;
  long unsigned int _18;
  unsigned int ivtmp_20;
  int * _30;
  int _31;
  int * _32;
  long unsigned int _34;
  _Bool _38;
  unsigned int ivtmp_39;
  unsigned int ivtmp_40;
  int _41;
  int * _42;
  int _43;
  int * _44;
  int _45;
  int _46;
  int _47;
  int * _49;
  int _50;
  int _51;
  int _52;
  int _53;
  unsigned int ivtmp_57;
  _Bool _59;
  int * _62;
  ssizetype _63;
  sizetype _64;
  _Bool _65;
  int * _66;
  ssizetype _67;
  sizetype _68;
  _Bool _69;
  _Bool _70;
  int * _71;
  ssizetype _72;
  sizetype _73;
  _Bool _74;
  _Bool _75;
  int * _76;
  ssizetype _77;
  sizetype _78;
  _Bool _79;
  _Bool _80;
  int * _81;
  ssizetype _82;
  sizetype _83;
  _Bool _84;
  _Bool _85;
  int * _86;
  ssizetype _87;
  sizetype _88;
  _Bool _89;
  _Bool _90;
  int * _91;
  ssizetype _92;
  sizetype _93;
  _Bool _94;
  _Bool _95;
  vector(8) int vect_cst__100;
  vector(8) int vect_cst__122;
  unsigned int ivtmp_128;
  unsigned int ivtmp_129;

  <bb 2> [local count: 10737416]:
  _62 = e_22(D) + 4;
  _63 = a_23(D) - _62;
  _64 = (sizetype) _63;
  _65 = _64 > 24;
  _66 = e_22(D) + 4;
  _67 = b_27(D) - _66;
  _68 = (sizetype) _67;
  _69 = _68 > 24;
  _70 = _65 & _69;
  _71 = a_23(D) + 31;
  _72 = _71 - c_24(D);
  _73 = (sizetype) _72;
  _74 = _73 > 62;
  _75 = _70 & _74;
  _76 = d_25(D) + 4;
  _77 = a_23(D) - _76;
  _78 = (sizetype) _77;
  _79 = _78 > 24;
  _80 = _75 & _79;
  _81 = a_23(D) + 31;
  _82 = _81 - b_27(D);
  _83 = (sizetype) _82;
  _84 = _83 > 62;
  _85 = _80 & _84;
  _86 = c_24(D) + 4;
  _87 = b_27(D) - _86;
  _88 = (sizetype) _87;
  _89 = _88 > 24;
  _90 = _85 & _89;
  _91 = d_25(D) + 4;
  _92 = b_27(D) - _91;
  _93 = (sizetype) _92;
  _94 = _93 > 24;
  _95 = _90 & _94;
  _38 = 1;
  if (_95 != 0)
    goto <bb 19>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 19> [local count: 10737416]:
  vect_cst__100 = { 499, 499, 499, 499, 499, 499, 499, 499 };
  vect_cst__122 = { 2, 2, 2, 2, 2, 2, 2, 2 };

  <bb 3> [local count: 107374159]:
  # i_36 = PHI <i_29(7), 0(19)>
  # ivtmp_40 = PHI <ivtmp_39(7), 65536(19)>
  # vectp_e.276_97 = PHI <vectp_e.276_98(7), e_22(D)(19)>
  # vectp_a.280_102 = PHI <vectp_a.280_103(7), a_23(D)(19)>
  # vectp_c.283_105 = PHI <vectp_c.283_106(7), c_24(D)(19)>
  # vectp_d.286_108 = PHI <vectp_d.286_109(7), d_25(D)(19)>
  # vectp_a.291_113 = PHI <vectp_a.291_114(7), a_23(D)(19)>
  # vectp_b.293_116 = PHI <vectp_b.293_117(7), b_27(D)(19)>
  # vectp_c.296_119 = PHI <vectp_c.296_120(7), c_24(D)(19)>
  # vectp_b.301_125 = PHI <vectp_b.301_126(7), b_27(D)(19)>
  # ivtmp_128 = PHI <ivtmp_129(7), 0(19)>
  _1 = (long unsigned int) i_36;
  _2 = _1 * 4;
  _3 = e_22(D) + _2;
  vect__4.278_99 = MEM <vector(8) int> [(int *)vectp_e.276_97];
  _4 = *_3;
  _5 = a_23(D) + _2;
  mask__59.279_101 = vect__4.278_99 > vect_cst__100;
  _59 = _4 > 499;
  vect__6.282_104 = .MASK_LOAD (vectp_a.280_102, 32B, mask__59.279_101);
  _6 = 0;
  _7 = c_24(D) + _2;
  vect__8.285_107 = .MASK_LOAD (vectp_c.283_105, 32B, mask__59.279_101);
  _8 = 0;
  _9 = d_25(D) + _2;
  vect__10.288_110 = .MASK_LOAD (vectp_d.286_108, 32B, mask__59.279_101);
  _10 = 0;
  vect__11.289_111 = vect__8.285_107 + vect__10.288_110;
  _11 = _8 + _10;
  vect__12.290_112 = vect__6.282_104 + vect__11.289_111;
  _12 = _6 + _11;
  .MASK_STORE (vectp_a.291_113, 32B, mask__59.279_101, vect__12.290_112);
  _13 = b_27(D) + _2;
  vect__14.295_118 = .MASK_LOAD (vectp_b.293_116, 32B, mask__59.279_101);
  _14 = 0;
  vect__15.298_121 = .MASK_LOAD (vectp_c.296_119, 32B, mask__59.279_101);
  _15 = 0;
  vect__16.299_123 = vect__15.298_121 * vect_cst__122;
  _16 = _15 * 2;
  vect__17.300_124 = vect__14.295_118 + vect__16.299_123;
  _17 = _14 + _16;
  .MASK_STORE (vectp_b.301_125, 32B, mask__59.279_101, vect__17.300_124);
  i_29 = i_36 + 1;
  ivtmp_39 = ivtmp_40 - 1;
  vectp_e.276_98 = vectp_e.276_97 + 32;
  vectp_a.280_103 = vectp_a.280_102 + 32;
  vectp_c.283_106 = vectp_c.283_105 + 32;
  vectp_d.286_109 = vectp_d.286_108 + 32;
  vectp_a.291_114 = vectp_a.291_113 + 32;
  vectp_b.293_117 = vectp_b.293_116 + 32;
  vectp_c.296_120 = vectp_c.296_119 + 32;
  vectp_b.301_126 = vectp_b.301_125 + 32;
  ivtmp_129 = ivtmp_128 + 1;
  if (ivtmp_129 < 8192)
    goto <bb 7>; [90.00%]
  else
    goto <bb 17>; [10.00%]

  <bb 7> [local count: 96636743]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737416]:

  <bb 9> [local count: 212600877]:
  # i_35 = PHI <i_56(13), 0(16)>
  # ivtmp_20 = PHI <ivtmp_57(13), 65536(16)>
  _18 = (long unsigned int) i_35;
  _34 = _18 * 4;
  _32 = e_22(D) + _34;
  _31 = *_32;
  if (_31 > 499)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 106300438]:
  _30 = a_23(D) + _34;
  _41 = *_30;
  _42 = c_24(D) + _34;
  _43 = *_42;
  _44 = d_25(D) + _34;
  _45 = *_44;
  _46 = _43 + _45;
  _47 = _41 + _46;
  *_30 = _47;
  _49 = b_27(D) + _34;
  _50 = *_49;
  _51 = *_42;
  _52 = _51 * 2;
  _53 = _50 + _52;
  *_49 = _53;

  <bb 12> [local count: 212600877]:
  i_56 = i_35 + 1;
  ivtmp_57 = ivtmp_20 - 1;
  if (ivtmp_57 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 6>; [100.00%]

  <bb 13> [local count: 210453394]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s273 (s273, funcdef_no=27, decl_uid=3601, cgraph_uid=28, symbol_order=27)


Analyzing loop at tsvc.c:63
tsvc.c:63:5: note:  === analyze_loop_nest ===
tsvc.c:63:5: note:   === vect_analyze_loop_form ===
tsvc.c:63:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: a_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: d_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: e_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_11
analyze_innermost: success.
	base_address: b_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: d_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: e_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_11
analyze_innermost: success.
	base_address: b_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_27(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_27(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_17
analyze_innermost: success.
	base_address: c_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_33(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: d_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_17
analyze_innermost: success.
	base_address: c_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_33(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:63:5: note:   === vect_analyze_data_refs ===
tsvc.c:63:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: _6 = *_5;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: _8 = *_7;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: *_3 = _10;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: _12 = .MASK_LOAD (_11, 32B, _73);
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: _13 = *_5;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: _14 = *_7;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: .MASK_STORE (_11, 32B, _73, _16);
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: pretmp_63 = *_3;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: _18 = *_17;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: _20 = *_5;
vector(8) int
tsvc.c:63:5: note:   got vectype for stmt: *_17 = _22;
vector(8) int
tsvc.c:63:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:63:5: note:   Analyze phi: i_44 = PHI <i_35(7), 0(15)>
tsvc.c:63:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:63:5: note:   step: 1,  init: 0
tsvc.c:63:5: note:   Detected induction.
tsvc.c:63:5: note:   Analyze phi: .MEM_45 = PHI <.MEM_34(7), .MEM_26(D)(15)>
tsvc.c:63:5: note:   Analyze phi: ivtmp_55 = PHI <ivtmp_54(7), 65536(15)>
tsvc.c:63:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:63:5: note:   step: 4294967295,  init: 65536
tsvc.c:63:5: note:   Detected induction.
tsvc.c:63:5: note:   === vect_determine_precisions ===
tsvc.c:63:5: note:   ivtmp_54 has no range info
tsvc.c:63:5: note:   i_35 has range [0x1, 0x10000]
tsvc.c:63:5: note:   can narrow to unsigned:17 without loss of precision: i_35 = i_44 + 1;
tsvc.c:63:5: note:   _22 has no range info
tsvc.c:63:5: note:   _21 has no range info
tsvc.c:63:5: note:   _20 has no range info
tsvc.c:63:5: note:   _18 has no range info
tsvc.c:63:5: note:   prephitmp_64 has no range info
tsvc.c:63:5: note:   pretmp_63 has no range info
tsvc.c:63:5: note:   _16 has no range info
tsvc.c:63:5: note:   _15 has no range info
tsvc.c:63:5: note:   _14 has no range info
tsvc.c:63:5: note:   _13 has no range info
tsvc.c:63:5: note:   using boolean precision 32 for _73 = _10 < 0;
tsvc.c:63:5: note:   _10 has no range info
tsvc.c:63:5: note:   _9 has no range info
tsvc.c:63:5: note:   _8 has no range info
tsvc.c:63:5: note:   _6 has no range info
tsvc.c:63:5: note:   _4 has no range info
tsvc.c:63:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:63:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:63:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:63:5: note:   === vect_pattern_recog ===
tsvc.c:63:5: note:   vect_is_simple_use: operand (long unsigned int) i_44, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: operand i_44 = PHI <i_35(7), 0(15)>, type of def: induction
tsvc.c:63:5: note:   vect_is_simple_use: operand (long unsigned int) i_44, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: operand i_44 = PHI <i_35(7), 0(15)>, type of def: induction
tsvc.c:63:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:63:5: note:   widen_mult pattern recognized: patt_74 = (long unsigned int) patt_24;
tsvc.c:63:5: note:   extra pattern stmt: patt_24 = i_44 w* 4;
tsvc.c:63:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:63:5: note:   Detected interleaving load *_3 and *_3
tsvc.c:63:5: note:   Queuing group with duplicate access for fixup
tsvc.c:63:5: note:   Detected interleaving load *_5 and *_5
tsvc.c:63:5: note:   Queuing group with duplicate access for fixup
tsvc.c:63:5: note:   Detected interleaving load *_5 and *_5
tsvc.c:63:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:63:5: note:   Queuing group with duplicate access for fixup
tsvc.c:63:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:63:5: note:   init: phi relevant? i_44 = PHI <i_35(7), 0(15)>
tsvc.c:63:5: note:   init: phi relevant? .MEM_45 = PHI <.MEM_34(7), .MEM_26(D)(15)>
tsvc.c:63:5: note:   init: phi relevant? ivtmp_55 = PHI <ivtmp_54(7), 65536(15)>
tsvc.c:63:5: note:   init: stmt relevant? _1 = (long unsigned int) i_44;
tsvc.c:63:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:63:5: note:   init: stmt relevant? _3 = a_27(D) + _2;
tsvc.c:63:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:63:5: note:   init: stmt relevant? _5 = d_28(D) + _2;
tsvc.c:63:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:63:5: note:   init: stmt relevant? _7 = e_29(D) + _2;
tsvc.c:63:5: note:   init: stmt relevant? _8 = *_7;
tsvc.c:63:5: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:63:5: note:   init: stmt relevant? _10 = _4 + _9;
tsvc.c:63:5: note:   init: stmt relevant? *_3 = _10;
tsvc.c:63:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:63:5: note:   mark relevant 5, live 0: *_3 = _10;
tsvc.c:63:5: note:   init: stmt relevant? _11 = b_31(D) + _2;
tsvc.c:63:5: note:   init: stmt relevant? _73 = _10 < 0;
tsvc.c:63:5: note:   init: stmt relevant? _12 = .MASK_LOAD (_11, 32B, _73);
tsvc.c:63:5: note:   init: stmt relevant? _13 = *_5;
tsvc.c:63:5: note:   init: stmt relevant? _14 = *_7;
tsvc.c:63:5: note:   init: stmt relevant? _15 = _13 + _14;
tsvc.c:63:5: note:   init: stmt relevant? _16 = _12 + _15;
tsvc.c:63:5: note:   init: stmt relevant? .MASK_STORE (_11, 32B, _73, _16);
tsvc.c:63:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:63:5: note:   mark relevant 5, live 0: .MASK_STORE (_11, 32B, _73, _16);
tsvc.c:63:5: note:   init: stmt relevant? pretmp_63 = *_3;
tsvc.c:63:5: note:   init: stmt relevant? prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
tsvc.c:63:5: note:   init: stmt relevant? _17 = c_33(D) + _2;
tsvc.c:63:5: note:   init: stmt relevant? _18 = *_17;
tsvc.c:63:5: note:   init: stmt relevant? _20 = *_5;
tsvc.c:63:5: note:   init: stmt relevant? _21 = _20 + prephitmp_64;
tsvc.c:63:5: note:   init: stmt relevant? _22 = _18 + _21;
tsvc.c:63:5: note:   init: stmt relevant? *_17 = _22;
tsvc.c:63:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:63:5: note:   mark relevant 5, live 0: *_17 = _22;
tsvc.c:63:5: note:   init: stmt relevant? i_35 = i_44 + 1;
tsvc.c:63:5: note:   init: stmt relevant? ivtmp_54 = ivtmp_55 - 1;
tsvc.c:63:5: note:   init: stmt relevant? if (ivtmp_54 != 0)
tsvc.c:63:5: note:   worklist: examine stmt: *_17 = _22;
tsvc.c:63:5: note:   vect_is_simple_use: operand _18 + _21, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _22 = _18 + _21;
tsvc.c:63:5: note:   worklist: examine stmt: _22 = _18 + _21;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_17, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _18 = *_17;
tsvc.c:63:5: note:   vect_is_simple_use: operand _20 + prephitmp_64, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _21 = _20 + prephitmp_64;
tsvc.c:63:5: note:   worklist: examine stmt: _21 = _20 + prephitmp_64;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _20 = *_5;
tsvc.c:63:5: note:   vect_is_simple_use: operand _10 >= 0 ? _10 : pretmp_63, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
tsvc.c:63:5: note:   worklist: examine stmt: prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:63:5: note:   already marked relevant/live.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: pretmp_63 = *_3;
tsvc.c:63:5: note:   worklist: examine stmt: pretmp_63 = *_3;
tsvc.c:63:5: note:   worklist: examine stmt: _10 = _4 + _9;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:63:5: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:63:5: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _8 = *_7;
tsvc.c:63:5: note:   worklist: examine stmt: _8 = *_7;
tsvc.c:63:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:63:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:63:5: note:   worklist: examine stmt: _20 = *_5;
tsvc.c:63:5: note:   worklist: examine stmt: _18 = *_17;
tsvc.c:63:5: note:   worklist: examine stmt: .MASK_STORE (_11, 32B, _73, _16);
tsvc.c:63:5: note:   vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _73 = _10 < 0;
tsvc.c:63:5: note:   vect_is_simple_use: operand _12 + _15, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _16 = _12 + _15;
tsvc.c:63:5: note:   worklist: examine stmt: _16 = _12 + _15;
tsvc.c:63:5: note:   vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _73), type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _12 = .MASK_LOAD (_11, 32B, _73);
tsvc.c:63:5: note:   vect_is_simple_use: operand _13 + _14, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _15 = _13 + _14;
tsvc.c:63:5: note:   worklist: examine stmt: _15 = _13 + _14;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _13 = *_5;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _14 = *_7;
tsvc.c:63:5: note:   worklist: examine stmt: _14 = *_7;
tsvc.c:63:5: note:   worklist: examine stmt: _13 = *_5;
tsvc.c:63:5: note:   worklist: examine stmt: _12 = .MASK_LOAD (_11, 32B, _73);
tsvc.c:63:5: note:   vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _73 = _10 < 0;
tsvc.c:63:5: note:   already marked relevant/live.
tsvc.c:63:5: note:   worklist: examine stmt: _73 = _10 < 0;
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:63:5: note:   already marked relevant/live.
tsvc.c:63:5: note:   worklist: examine stmt: *_3 = _10;
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:63:5: note:   already marked relevant/live.
tsvc.c:63:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _8 = *_7;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: *_3 = _10;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _73);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _13 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _14 = *_7;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_63 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _8 = *_7;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: *_3 = _10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _73);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _13 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _14 = *_7;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: pretmp_63 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _20 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: *_3 = _10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _73);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: _13 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: _14 = *_7;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: pretmp_63 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _73);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: _13 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: _14 = *_7;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: pretmp_63 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: _13 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: _14 = *_7;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: pretmp_63 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_5;
  stmt_b: _14 = *_7;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_5;
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_5;
  stmt_b: pretmp_63 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_5;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = *_5;
  stmt_b: _20 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = *_5;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_7;
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_7;
  stmt_b: pretmp_63 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_7;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_7;
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_7;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_11, 32B, _73, _16);
  stmt_b: pretmp_63 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_11, 32B, _73, _16);
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_11, 32B, _73, _16);
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_11, 32B, _73, _16);
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_63 = *_3;
  stmt_b: _18 = *_17;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_63 = *_3;
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_63 = *_3;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: _20 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: *_17 = _22;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _20 = *_5;
  stmt_b: *_17 = _22;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _6 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = *_7;
  stmt_b: _8 = *_7;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_3 = _10;
  stmt_b: *_3 = _10;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _73);
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _73);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = *_5;
  stmt_b: _13 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _14 = *_7;
  stmt_b: _14 = *_7;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_11, 32B, _73, _16);
  stmt_b: .MASK_STORE (_11, 32B, _73, _16);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_63 = *_3;
  stmt_b: pretmp_63 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _18 = *_17;
  stmt_b: _18 = *_17;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _20 = *_5;
  stmt_b: _20 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_17 = _22;
  stmt_b: *_17 = _22;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:63:5: note:   dependence distance  = 0.
tsvc.c:63:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_11
consider run-time aliasing test between *_3 and *_11
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_17
consider run-time aliasing test between *_3 and *_17
tsvc.c:65:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:65:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_11
consider run-time aliasing test between *_5 and *_11
tsvc.c:65:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_17
consider run-time aliasing test between *_5 and *_17
tsvc.c:65:25: missed:   versioning for alias required: can't determine dependence between *_7 and *_3
consider run-time aliasing test between *_7 and *_3
tsvc.c:65:25: missed:   versioning for alias required: can't determine dependence between *_7 and *_11
consider run-time aliasing test between *_7 and *_11
tsvc.c:65:25: missed:   versioning for alias required: can't determine dependence between *_7 and *_17
consider run-time aliasing test between *_7 and *_17
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_11
consider run-time aliasing test between *_3 and *_11
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_11
consider run-time aliasing test between *_3 and *_11
tsvc.c:63:5: note:   dependence distance  = 0.
tsvc.c:63:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_17
consider run-time aliasing test between *_3 and *_17
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:65:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_17
consider run-time aliasing test between *_3 and *_17
tsvc.c:63:5: note:   dependence distance  = 0.
tsvc.c:63:5: note:   dependence distance == 0 between *_11 and *_11
tsvc.c:67:18: missed:   versioning for alias required: can't determine dependence between *_11 and *_17
consider run-time aliasing test between *_11 and *_17
tsvc.c:67:22: missed:   versioning for alias required: can't determine dependence between *_5 and *_11
consider run-time aliasing test between *_5 and *_11
tsvc.c:67:22: missed:   versioning for alias required: can't determine dependence between *_5 and *_17
consider run-time aliasing test between *_5 and *_17
tsvc.c:67:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_11
consider run-time aliasing test between *_7 and *_11
tsvc.c:67:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_17
consider run-time aliasing test between *_7 and *_17
tsvc.c:67:18: missed:   versioning for alias required: can't determine dependence between *_11 and *_3
consider run-time aliasing test between *_11 and *_3
tsvc.c:67:18: missed:   versioning for alias required: can't determine dependence between *_11 and *_17
consider run-time aliasing test between *_11 and *_17
tsvc.c:67:18: missed:   versioning for alias required: can't determine dependence between *_11 and *_5
consider run-time aliasing test between *_11 and *_5
tsvc.c:67:18: missed:   versioning for alias required: can't determine dependence between *_11 and *_17
consider run-time aliasing test between *_11 and *_17
tsvc.c:68:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_17
consider run-time aliasing test between *_3 and *_17
tsvc.c:63:5: note:   dependence distance  = 0.
tsvc.c:63:5: note:   dependence distance == 0 between *_17 and *_17
tsvc.c:68:25: missed:   versioning for alias required: can't determine dependence between *_5 and *_17
consider run-time aliasing test between *_5 and *_17
tsvc.c:63:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:63:5: note:   ==> examining phi: i_44 = PHI <i_35(7), 0(15)>
tsvc.c:63:5: note:   ==> examining phi: .MEM_45 = PHI <.MEM_34(7), .MEM_26(D)(15)>
tsvc.c:63:5: note:   ==> examining phi: ivtmp_55 = PHI <ivtmp_54(7), 65536(15)>
tsvc.c:63:5: note:   ==> examining statement: _1 = (long unsigned int) i_44;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining pattern def stmt: patt_24 = i_44 w* 4;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining pattern statement: patt_74 = (long unsigned int) patt_24;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: _3 = a_27(D) + _2;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _5 = d_28(D) + _2;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _7 = e_29(D) + _2;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: _8 = *_7;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _9 = _6 + _8;
tsvc.c:63:5: note:   get vectype for scalar type: int
tsvc.c:63:5: note:   vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _10 = _4 + _9;
tsvc.c:63:5: note:   get vectype for scalar type: int
tsvc.c:63:5: note:   vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: *_3 = _10;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _11 = b_31(D) + _2;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: _73 = _10 < 0;
tsvc.c:63:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _12 = .MASK_LOAD (_11, 32B, _73);
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _13 = *_5;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _14 = *_7;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _15 = _13 + _14;
tsvc.c:63:5: note:   get vectype for scalar type: int
tsvc.c:63:5: note:   vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _16 = _12 + _15;
tsvc.c:63:5: note:   get vectype for scalar type: int
tsvc.c:63:5: note:   vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: .MASK_STORE (_11, 32B, _73, _16);
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: pretmp_63 = *_3;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
tsvc.c:63:5: note:   get vectype for scalar type: int
tsvc.c:63:5: note:   vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _17 = c_33(D) + _2;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: _18 = *_17;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _20 = *_5;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _21 = _20 + prephitmp_64;
tsvc.c:63:5: note:   get vectype for scalar type: int
tsvc.c:63:5: note:   vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: _22 = _18 + _21;
tsvc.c:63:5: note:   get vectype for scalar type: int
tsvc.c:63:5: note:   vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: *_17 = _22;
tsvc.c:63:5: note:   precomputed vectype: vector(8) int
tsvc.c:63:5: note:   nunits = 8
tsvc.c:63:5: note:   ==> examining statement: i_35 = i_44 + 1;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: ivtmp_54 = ivtmp_55 - 1;
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   ==> examining statement: if (ivtmp_54 != 0)
tsvc.c:63:5: note:   skip.
tsvc.c:63:5: note:   vectorization factor = 8
tsvc.c:63:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x528c4c0 *_3 1 times scalar_load costs 12 in body
0x528c4c0 *_5 1 times scalar_load costs 12 in body
0x528c4c0 *_7 1 times scalar_load costs 12 in body
0x528c4c0 _6 + _8 1 times scalar_stmt costs 4 in body
0x528c4c0 _4 + _9 1 times scalar_stmt costs 4 in body
0x528c4c0 _10 1 times scalar_store costs 12 in body
0x528c4c0 _10 < 0 1 times scalar_stmt costs 4 in body
0x528c4c0 .MASK_LOAD (_11, 32B, _73) 1 times scalar_load costs 12 in body
0x528c4c0 *_5 1 times scalar_load costs 12 in body
0x528c4c0 *_7 1 times scalar_load costs 12 in body
0x528c4c0 _13 + _14 1 times scalar_stmt costs 4 in body
0x528c4c0 _12 + _15 1 times scalar_stmt costs 4 in body
0x528c4c0 .MASK_STORE (_11, 32B, _73, _16) 1 times scalar_store costs 12 in body
0x528c4c0 *_3 1 times scalar_load costs 12 in body
0x528c4c0 _10 >= 0 ? _10 : pretmp_63 1 times scalar_stmt costs 4 in body
0x528c4c0 *_17 1 times scalar_load costs 12 in body
0x528c4c0 *_5 1 times scalar_load costs 12 in body
0x528c4c0 _20 + prephitmp_64 1 times scalar_stmt costs 4 in body
0x528c4c0 _18 + _21 1 times scalar_stmt costs 4 in body
0x528c4c0 _22 1 times scalar_store costs 12 in body
tsvc.c:63:5: note:   === vect_analyze_slp ===
tsvc.c:63:5: note:   === vect_make_slp_decision ===
tsvc.c:63:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:63:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:63:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:63:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:63:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:63:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:63:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:63:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:63:5: note:   accesses have the same alignment: *_11 and *_11
tsvc.c:63:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:63:5: note:   accesses have the same alignment: *_17 and *_17
tsvc.c:63:5: note:   recording new base alignment for a_27(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:63:5: note:   recording new base alignment for d_28(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:63:5: note:   recording new base alignment for e_29(D)
  alignment:    4
  misalignment: 0
  based on:     _8 = *_7;
tsvc.c:63:5: note:   recording new base alignment for c_33(D)
  alignment:    4
  misalignment: 0
  based on:     _18 = *_17;
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_3
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_5
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_7
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_3
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_11
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_5
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_7
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_11
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_3
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_17
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_5
tsvc.c:63:5: note:   vect_compute_data_ref_alignment:
tsvc.c:63:5: note:   can't force alignment of ref: *_17
tsvc.c:63:5: note:   === vect_prune_runtime_alias_test_list ===
found equal ranges *_3, *_5 and *_3, *_5
found equal ranges *_3, *_5 and *_3, *_5
found equal ranges *_3, *_7 and *_3, *_7
found equal ranges *_3, *_11 and *_3, *_11
found equal ranges *_3, *_11 and *_3, *_11
found equal ranges *_3, *_11 and *_3, *_11
found equal ranges *_3, *_17 and *_3, *_17
found equal ranges *_3, *_17 and *_3, *_17
found equal ranges *_3, *_17 and *_3, *_17
found equal ranges *_5, *_11 and *_5, *_11
found equal ranges *_5, *_11 and *_5, *_11
found equal ranges *_5, *_17 and *_5, *_17
found equal ranges *_5, *_17 and *_5, *_17
found equal ranges *_7, *_11 and *_7, *_11
found equal ranges *_7, *_17 and *_7, *_17
found equal ranges *_11, *_17 and *_11, *_17
found equal ranges *_11, *_17 and *_11, *_17
merged alias checks:
  reference:      *_3 vs. *_5
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_3 vs. *_7
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_3 vs. *_11
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW ARBITRARY
  reference:      *_3 vs. *_17
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW
  reference:      *_5 vs. *_11
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_5 vs. *_17
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_7 vs. *_11
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_7 vs. *_17
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_11 vs. *_17
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW
tsvc.c:63:5: note:   improved number of alias checks from 26 to 9
tsvc.c:63:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:63:5: note:   vect_can_advance_ivs_p:
tsvc.c:63:5: note:   Analyze phi: i_44 = PHI <i_35(7), 0(15)>
tsvc.c:63:5: note:   Analyze phi: .MEM_45 = PHI <.MEM_34(7), .MEM_26(D)(15)>
tsvc.c:63:5: note:   reduc or virtual phi. skip.
tsvc.c:63:5: note:   Analyze phi: ivtmp_55 = PHI <ivtmp_54(7), 65536(15)>
tsvc.c:63:5: note:   vect_model_load_cost: aligned.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_store_cost: aligned.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: aligned.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 220, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 240, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: aligned.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_store_cost: aligned.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: aligned.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 220, outside_cost = 0.
tsvc.c:63:5: note:   Setting misalignment to unknown (-1).
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 240, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 220, outside_cost = 0.
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_get_data_access_cost: inside_cost = 240, outside_cost = 0.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   Vectorizing an unaligned access.
tsvc.c:63:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:63:5: note:   === vect_analyze_loop_operations ===
tsvc.c:63:5: note:   examining phi: i_44 = PHI <i_35(7), 0(15)>
tsvc.c:63:5: note:   examining phi: .MEM_45 = PHI <.MEM_34(7), .MEM_26(D)(15)>
tsvc.c:63:5: note:   examining phi: ivtmp_55 = PHI <ivtmp_54(7), 65536(15)>
tsvc.c:63:5: note:   ==> examining statement: _1 = (long unsigned int) i_44;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: _3 = a_27(D) + _2;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _5 = d_28(D) + _2;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _7 = e_29(D) + _2;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: _8 = *_7;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _9 = _6 + _8;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:    === vectorizable_operation ===
tsvc.c:63:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _10 = _4 + _9;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:    === vectorizable_operation ===
tsvc.c:63:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: *_3 = _10;
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _11 = b_31(D) + _2;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: _73 = _10 < 0;
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:63:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:63:5: note:   ==> examining statement: _12 = .MASK_LOAD (_11, 32B, _73);
tsvc.c:63:5: note:   vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _13 = *_5;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _14 = *_7;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _15 = _13 + _14;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:    === vectorizable_operation ===
tsvc.c:63:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _16 = _12 + _15;
tsvc.c:63:5: note:   vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _73), type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand _13 + _14, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:    === vectorizable_operation ===
tsvc.c:63:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: .MASK_STORE (_11, 32B, _73, _16);
tsvc.c:63:5: note:   vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:63:5: note:   vect_is_simple_use: operand _12 + _15, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: pretmp_63 = *_3;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:63:5: note:   ==> examining statement: _17 = c_33(D) + _2;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: _18 = *_17;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_17, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_17, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _20 = *_5;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:63:5: missed:   Unsupported pattern.
tsvc.c:63:5: missed:   use not simple.
tsvc.c:63:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _21 = _20 + prephitmp_64;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand _10 >= 0 ? _10 : pretmp_63, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:    === vectorizable_operation ===
tsvc.c:63:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: _22 = _18 + _21;
tsvc.c:63:5: note:   vect_is_simple_use: operand *_17, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_is_simple_use: operand _20 + prephitmp_64, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:    === vectorizable_operation ===
tsvc.c:63:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: *_17 = _22;
tsvc.c:63:5: note:   vect_is_simple_use: operand _18 + _21, type of def: internal
tsvc.c:63:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:63:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:63:5: note:   ==> examining statement: i_35 = i_44 + 1;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: ivtmp_54 = ivtmp_55 - 1;
tsvc.c:63:5: note:   irrelevant.
tsvc.c:63:5: note:   ==> examining statement: if (ivtmp_54 != 0)
tsvc.c:63:5: note:   irrelevant.
0x5087290 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 *_5 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 *_7 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 _6 + _8 1 times vector_stmt costs 4 in body
0x5087290 _4 + _9 1 times vector_stmt costs 4 in body
0x5087290 _10 1 times unaligned_store (misalign -1) costs 20 in body
0x5087290 _10 < 0 1 times scalar_to_vec costs 4 in prologue
0x5087290 _10 < 0 1 times vector_stmt costs 4 in body
0x5087290 .MASK_LOAD (_11, 32B, _73) 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 *_5 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 *_7 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 _13 + _14 1 times vector_stmt costs 4 in body
0x5087290 _12 + _15 1 times vector_stmt costs 4 in body
0x5087290 .MASK_STORE (_11, 32B, _73, _16) 1 times unaligned_store (misalign -1) costs 20 in body
0x5087290 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 _10 >= 0 ? _10 : pretmp_63 1 times scalar_to_vec costs 4 in prologue
0x5087290 _10 >= 0 ? _10 : pretmp_63 1 times vector_stmt costs 4 in body
0x5087290 *_17 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 *_5 1 times unaligned_load (misalign -1) costs 20 in body
0x5087290 _20 + prephitmp_64 1 times vector_stmt costs 4 in body
0x5087290 _18 + _21 1 times vector_stmt costs 4 in body
0x5087290 _22 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_54 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) a_27(D) + 4 * iteration does not wrap in statement _3 = a_27(D) + _2;
 in loop 1.
Statement _3 = a_27(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_28(D) + 4 * iteration does not wrap in statement _5 = d_28(D) + _2;
 in loop 1.
Statement _5 = d_28(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) e_29(D) + 4 * iteration does not wrap in statement _7 = e_29(D) + _2;
 in loop 1.
Statement _7 = e_29(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_31(D) + 4 * iteration does not wrap in statement _11 = b_31(D) + _2;
 in loop 1.
Statement _11 = b_31(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_33(D) + 4 * iteration does not wrap in statement _17 = c_33(D) + _2;
 in loop 1.
Statement _17 = c_33(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_35 = i_44 + 1;
 in loop 1.
Statement i_35 = i_44 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:63:5: note:  not using a fully-masked loop.
0x5087290 <unknown> 9 times vector_stmt costs 36 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x5087290 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:63:5: note:  Cost model analysis: 
  Vector inside of loop cost: 272
  Vector prologue cost: 60
  Vector epilogue cost: 0
  Scalar iteration cost: 176
  Scalar outside cost: 8
  Vector outside cost: 60
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:63:5: note:    Runtime profitability threshold = 8
tsvc.c:63:5: note:    Static estimate profitability threshold = 8
tsvc.c:63:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:63:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:63:5: note:  ***** Choosing vector mode V8SI
tsvc.c:63:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:63:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_5
using an address-based overlap test
create runtime check for data references *_3 and *_7
using an address-based overlap test
create runtime check for data references *_3 and *_11
using an address-based overlap test
create runtime check for data references *_3 and *_17
using an address-based overlap test
create runtime check for data references *_5 and *_11
using an address-based overlap test
create runtime check for data references *_5 and *_17
using an address-based WAR/WAW test
create runtime check for data references *_7 and *_11
using an address-based WAR/WAW test
create runtime check for data references *_7 and *_17
using an address-based WAR/WAW test
create runtime check for data references *_11 and *_17
using an address-based overlap test
tsvc.c:63:5: note:  created 9 versioning for alias checks.
tsvc.c:63:5: note:  trying to apply versioning to outer loop 0
tsvc.c:63:5: note:  reusing loop version created by if conversion
tsvc.c:63:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:63:5: note:  ------>vectorizing phi: i_44 = PHI <i_35(7), 0(19)>
tsvc.c:63:5: note:  ------>vectorizing phi: .MEM_45 = PHI <.MEM_34(7), .MEM_26(D)(19)>
tsvc.c:63:5: note:  ------>vectorizing phi: ivtmp_55 = PHI <ivtmp_54(7), 65536(19)>
tsvc.c:63:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_44;
tsvc.c:63:5: note:  ------>vectorizing statement: patt_24 = i_44 w* 4;
tsvc.c:63:5: note:  ------>vectorizing statement: patt_74 = (long unsigned int) patt_24;
tsvc.c:63:5: note:  ------>vectorizing statement: _3 = a_27(D) + _2;
tsvc.c:63:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_27(D)
tsvc.c:63:5: note:  created a_27(D)
tsvc.c:63:5: note:  add new stmt: vect__4.335_123 = MEM <vector(8) int> [(int *)vectp_a.333_121];
tsvc.c:63:5: note:  ------>vectorizing statement: _5 = d_28(D) + _2;
tsvc.c:63:5: note:  ------>vectorizing statement: _6 = *_5;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_28(D)
tsvc.c:63:5: note:  created d_28(D)
tsvc.c:63:5: note:  add new stmt: vect__6.338_126 = MEM <vector(8) int> [(int *)vectp_d.336_124];
tsvc.c:63:5: note:  ------>vectorizing statement: _7 = e_29(D) + _2;
tsvc.c:63:5: note:  ------>vectorizing statement: _8 = *_7;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_29(D)
tsvc.c:63:5: note:  created e_29(D)
tsvc.c:63:5: note:  add new stmt: vect__8.341_129 = MEM <vector(8) int> [(int *)vectp_e.339_127];
tsvc.c:63:5: note:  ------>vectorizing statement: _9 = _6 + _8;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform binary/unary operation.
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:63:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _6 = *_5;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _8
tsvc.c:63:5: note:  vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _8 = *_7;
tsvc.c:63:5: note:  add new stmt: vect__9.342_130 = vect__6.338_126 + vect__8.341_129;
tsvc.c:63:5: note:  ------>vectorizing statement: _10 = _4 + _9;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform binary/unary operation.
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:63:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _4 = *_3;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:63:5: note:  vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _9 = _6 + _8;
tsvc.c:63:5: note:  add new stmt: vect__10.343_131 = vect__4.335_123 + vect__9.342_130;
tsvc.c:63:5: note:  ------>vectorizing statement: *_3 = _10;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform store. ncopies = 1
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _10 = _4 + _9;
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_27(D)
tsvc.c:63:5: note:  created a_27(D)
tsvc.c:63:5: note:  add new stmt: MEM <vector(8) int> [(int *)vectp_a.344_132] = vect__10.343_131;
tsvc.c:63:5: note:  ------>vectorizing statement: _11 = b_31(D) + _2;
tsvc.c:63:5: note:  ------>vectorizing statement: _73 = _10 < 0;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _10 = _4 + _9;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:63:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:63:5: note:  created new init_stmt: vect_cst__135 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:63:5: note:  add new stmt: mask__73.346_136 = vect__10.343_131 < vect_cst__135;
tsvc.c:63:5: note:  ------>vectorizing statement: _12 = .MASK_LOAD (_11, 32B, _73);
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_31(D)
tsvc.c:63:5: note:  created b_31(D)
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _73
tsvc.c:63:5: note:  vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _73 = _10 < 0;
tsvc.c:63:5: note:  add new stmt: vect__12.349_139 = .MASK_LOAD (vectp_b.347_137, 32B, mask__73.346_136);
tsvc.c:63:5: note:  ------>vectorizing statement: _13 = *_5;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_28(D)
tsvc.c:63:5: note:  created d_28(D)
tsvc.c:63:5: note:  add new stmt: vect__13.352_142 = MEM <vector(8) int> [(int *)vectp_d.350_140];
tsvc.c:63:5: note:  ------>vectorizing statement: _14 = *_7;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_29(D)
tsvc.c:63:5: note:  created e_29(D)
tsvc.c:63:5: note:  add new stmt: vect__14.355_145 = MEM <vector(8) int> [(int *)vectp_e.353_143];
tsvc.c:63:5: note:  ------>vectorizing statement: _15 = _13 + _14;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform binary/unary operation.
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _13
tsvc.c:63:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _13 = *_5;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _14
tsvc.c:63:5: note:  vect_is_simple_use: operand *_7, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _14 = *_7;
tsvc.c:63:5: note:  add new stmt: vect__15.356_146 = vect__13.352_142 + vect__14.355_145;
tsvc.c:63:5: note:  ------>vectorizing statement: _16 = _12 + _15;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _73), type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand _13 + _14, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform binary/unary operation.
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _12
tsvc.c:63:5: note:  vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _73), type of def: internal
tsvc.c:63:5: note:    def_stmt =  _12 = .MASK_LOAD (_11, 32B, _73);
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _15
tsvc.c:63:5: note:  vect_is_simple_use: operand _13 + _14, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _15 = _13 + _14;
tsvc.c:63:5: note:  add new stmt: vect__16.357_147 = vect__12.349_139 + vect__15.356_146;
tsvc.c:63:5: note:  ------>vectorizing statement: .MASK_STORE (_11, 32B, _73, _16);
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:63:5: note:  vect_is_simple_use: operand _12 + _15, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform store. ncopies = 1
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _16
tsvc.c:63:5: note:  vect_is_simple_use: operand _12 + _15, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _16 = _12 + _15;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _73
tsvc.c:63:5: note:  vect_is_simple_use: operand _10 < 0, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _73 = _10 < 0;
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_31(D)
tsvc.c:63:5: note:  created b_31(D)
tsvc.c:63:5: note:  add new stmt: .MASK_STORE (vectp_b.358_148, 32B, mask__73.346_136, vect__16.357_147);
tsvc.c:63:5: note:  ------>vectorizing statement: pretmp_63 = *_3;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_27(D)
tsvc.c:63:5: note:  created a_27(D)
tsvc.c:63:5: note:  add new stmt: vect_pretmp_63.362_153 = MEM <vector(8) int> [(int *)vectp_a.360_151];
tsvc.c:63:5: note:  ------>vectorizing statement: prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _10 = _4 + _9;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:63:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:63:5: note:  created new init_stmt: vect_cst__154 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:63:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _10 = _4 + _9;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: pretmp_63
tsvc.c:63:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:63:5: note:    def_stmt =  pretmp_63 = *_3;
tsvc.c:63:5: note:  add new stmt: vect_prephitmp_64.363_155 = VEC_COND_EXPR <vect__10.343_131 >= vect_cst__154, vect__10.343_131, vect_pretmp_63.362_153>;
tsvc.c:63:5: note:  ------>vectorizing statement: _17 = c_33(D) + _2;
tsvc.c:63:5: note:  ------>vectorizing statement: _18 = *_17;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_33(D)
tsvc.c:63:5: note:  created c_33(D)
tsvc.c:63:5: note:  add new stmt: vect__18.366_158 = MEM <vector(8) int> [(int *)vectp_c.364_156];
tsvc.c:63:5: note:  ------>vectorizing statement: _20 = *_5;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  transform load. ncopies = 1
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_28(D)
tsvc.c:63:5: note:  created d_28(D)
tsvc.c:63:5: note:  add new stmt: vect__20.369_161 = MEM <vector(8) int> [(int *)vectp_d.367_159];
tsvc.c:63:5: note:  ------>vectorizing statement: _21 = _20 + prephitmp_64;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand _10 >= 0 ? _10 : pretmp_63, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform binary/unary operation.
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _20
tsvc.c:63:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _20 = *_5;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: prephitmp_64
tsvc.c:63:5: note:  vect_is_simple_use: operand _10 >= 0 ? _10 : pretmp_63, type of def: internal
tsvc.c:63:5: note:    def_stmt =  prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
tsvc.c:63:5: note:  add new stmt: vect__21.370_162 = vect__20.369_161 + vect_prephitmp_64.363_155;
tsvc.c:63:5: note:  ------>vectorizing statement: _22 = _18 + _21;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand *_17, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  vect_is_simple_use: operand _20 + prephitmp_64, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform binary/unary operation.
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _18
tsvc.c:63:5: note:  vect_is_simple_use: operand *_17, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _18 = *_17;
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _21
tsvc.c:63:5: note:  vect_is_simple_use: operand _20 + prephitmp_64, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _21 = _20 + prephitmp_64;
tsvc.c:63:5: note:  add new stmt: vect__22.371_163 = vect__18.366_158 + vect__21.370_162;
tsvc.c:63:5: note:  ------>vectorizing statement: *_17 = _22;
tsvc.c:63:5: note:  transform statement.
tsvc.c:63:5: note:  vect_is_simple_use: operand _18 + _21, type of def: internal
tsvc.c:63:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:63:5: note:  transform store. ncopies = 1
tsvc.c:63:5: note:  vect_get_vec_def_for_operand: _22
tsvc.c:63:5: note:  vect_is_simple_use: operand _18 + _21, type of def: internal
tsvc.c:63:5: note:    def_stmt =  _22 = _18 + _21;
tsvc.c:63:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_33(D)
tsvc.c:63:5: note:  created c_33(D)
tsvc.c:63:5: note:  add new stmt: MEM <vector(8) int> [(int *)vectp_c.372_164] = vect__22.371_163;
tsvc.c:63:5: note:  ------>vectorizing statement: i_35 = i_44 + 1;
tsvc.c:63:5: note:  ------>vectorizing statement: ivtmp_54 = ivtmp_55 - 1;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_a.333_122 = vectp_a.333_121 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_d.336_125 = vectp_d.336_124 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_e.339_128 = vectp_e.339_127 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_a.344_133 = vectp_a.344_132 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_b.347_138 = vectp_b.347_137 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_d.350_141 = vectp_d.350_140 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_e.353_144 = vectp_e.353_143 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_b.358_149 = vectp_b.358_148 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_a.360_152 = vectp_a.360_151 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_c.364_157 = vectp_c.364_156 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_d.367_160 = vectp_d.367_159 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: vectp_c.372_165 = vectp_c.372_164 + 32;
tsvc.c:63:5: note:  ------>vectorizing statement: if (ivtmp_54 != 0)
tsvc.c:63:5: note:  New loop exit condition: if (ivtmp_168 < 8192)
tsvc.c:63:5: note:  LOOP VECTORIZED

tsvc.c:61:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       19


fix_loop_structure: fixing up loops for function
s273 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_c.373;
  vector(8) int * vectp_c.372;
  vector(8) int vect__22.371;
  vector(8) int vect__21.370;
  vector(8) int vect__20.369;
  vector(8) int * vectp_d.368;
  vector(8) int * vectp_d.367;
  vector(8) int vect__18.366;
  vector(8) int * vectp_c.365;
  vector(8) int * vectp_c.364;
  vector(8) int vect_prephitmp_64.363;
  vector(8) int vect_pretmp_63.362;
  vector(8) int * vectp_a.361;
  vector(8) int * vectp_a.360;
  vector(8) int * vectp_b.359;
  vector(8) int * vectp_b.358;
  vector(8) int vect__16.357;
  vector(8) int vect__15.356;
  vector(8) int vect__14.355;
  vector(8) int * vectp_e.354;
  vector(8) int * vectp_e.353;
  vector(8) int vect__13.352;
  vector(8) int * vectp_d.351;
  vector(8) int * vectp_d.350;
  vector(8) int vect__12.349;
  vector(8) int * vectp_b.348;
  vector(8) int * vectp_b.347;
  vector(8) <unnamed type> mask__73.346;
  vector(8) int * vectp_a.345;
  vector(8) int * vectp_a.344;
  vector(8) int vect__10.343;
  vector(8) int vect__9.342;
  vector(8) int vect__8.341;
  vector(8) int * vectp_e.340;
  vector(8) int * vectp_e.339;
  vector(8) int vect__6.338;
  vector(8) int * vectp_d.337;
  vector(8) int * vectp_d.336;
  vector(8) int vect__4.335;
  vector(8) int * vectp_a.334;
  vector(8) int * vectp_a.333;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  int * _11;
  int _12;
  int _13;
  int _14;
  int _15;
  int _16;
  int * _17;
  int _18;
  int * _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _25;
  int * _36;
  int _38;
  int _39;
  int _40;
  int * _41;
  int _42;
  int * _43;
  int _46;
  int * _47;
  long unsigned int _48;
  long unsigned int _49;
  unsigned int ivtmp_50;
  _Bool _53;
  unsigned int ivtmp_54;
  unsigned int ivtmp_55;
  int _56;
  int _57;
  int prephitmp_58;
  int pretmp_60;
  int _62;
  int pretmp_63;
  int prephitmp_64;
  int _65;
  int _66;
  int _67;
  int _68;
  unsigned int ivtmp_71;
  _Bool _73;
  int * _76;
  ssizetype _77;
  sizetype _78;
  _Bool _79;
  int * _80;
  ssizetype _81;
  sizetype _82;
  _Bool _83;
  _Bool _84;
  int * _85;
  ssizetype _86;
  sizetype _87;
  _Bool _88;
  _Bool _89;
  int * _90;
  ssizetype _91;
  sizetype _92;
  _Bool _93;
  _Bool _94;
  int * _95;
  ssizetype _96;
  sizetype _97;
  _Bool _98;
  _Bool _99;
  int * _100;
  ssizetype _101;
  sizetype _102;
  _Bool _103;
  _Bool _104;
  int * _105;
  ssizetype _106;
  sizetype _107;
  _Bool _108;
  _Bool _109;
  int * _110;
  ssizetype _111;
  sizetype _112;
  _Bool _113;
  _Bool _114;
  int * _115;
  ssizetype _116;
  sizetype _117;
  _Bool _118;
  _Bool _119;
  vector(8) int vect_cst__135;
  vector(8) int vect_cst__154;
  unsigned int ivtmp_167;
  unsigned int ivtmp_168;

  <bb 2> [local count: 10737414]:
  _76 = a_27(D) + 31;
  _77 = _76 - d_28(D);
  _78 = (sizetype) _77;
  _79 = _78 > 62;
  _80 = a_27(D) + 31;
  _81 = _80 - e_29(D);
  _82 = (sizetype) _81;
  _83 = _82 > 62;
  _84 = _79 & _83;
  _85 = a_27(D) + 31;
  _86 = _85 - b_31(D);
  _87 = (sizetype) _86;
  _88 = _87 > 62;
  _89 = _84 & _88;
  _90 = a_27(D) + 31;
  _91 = _90 - c_33(D);
  _92 = (sizetype) _91;
  _93 = _92 > 62;
  _94 = _89 & _93;
  _95 = d_28(D) + 31;
  _96 = _95 - b_31(D);
  _97 = (sizetype) _96;
  _98 = _97 > 62;
  _99 = _94 & _98;
  _100 = d_28(D) + 4;
  _101 = c_33(D) - _100;
  _102 = (sizetype) _101;
  _103 = _102 > 24;
  _104 = _99 & _103;
  _105 = e_29(D) + 4;
  _106 = b_31(D) - _105;
  _107 = (sizetype) _106;
  _108 = _107 > 24;
  _109 = _104 & _108;
  _110 = e_29(D) + 4;
  _111 = c_33(D) - _110;
  _112 = (sizetype) _111;
  _113 = _112 > 24;
  _114 = _109 & _113;
  _115 = b_31(D) + 31;
  _116 = _115 - c_33(D);
  _117 = (sizetype) _116;
  _118 = _117 > 62;
  _119 = _114 & _118;
  _53 = 1;
  if (_119 != 0)
    goto <bb 19>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 19> [local count: 10737414]:
  vect_cst__135 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__154 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374140]:
  # i_44 = PHI <i_35(7), 0(19)>
  # ivtmp_55 = PHI <ivtmp_54(7), 65536(19)>
  # vectp_a.333_121 = PHI <vectp_a.333_122(7), a_27(D)(19)>
  # vectp_d.336_124 = PHI <vectp_d.336_125(7), d_28(D)(19)>
  # vectp_e.339_127 = PHI <vectp_e.339_128(7), e_29(D)(19)>
  # vectp_a.344_132 = PHI <vectp_a.344_133(7), a_27(D)(19)>
  # vectp_b.347_137 = PHI <vectp_b.347_138(7), b_31(D)(19)>
  # vectp_d.350_140 = PHI <vectp_d.350_141(7), d_28(D)(19)>
  # vectp_e.353_143 = PHI <vectp_e.353_144(7), e_29(D)(19)>
  # vectp_b.358_148 = PHI <vectp_b.358_149(7), b_31(D)(19)>
  # vectp_a.360_151 = PHI <vectp_a.360_152(7), a_27(D)(19)>
  # vectp_c.364_156 = PHI <vectp_c.364_157(7), c_33(D)(19)>
  # vectp_d.367_159 = PHI <vectp_d.367_160(7), d_28(D)(19)>
  # vectp_c.372_164 = PHI <vectp_c.372_165(7), c_33(D)(19)>
  # ivtmp_167 = PHI <ivtmp_168(7), 0(19)>
  _1 = (long unsigned int) i_44;
  _2 = _1 * 4;
  _3 = a_27(D) + _2;
  vect__4.335_123 = MEM <vector(8) int> [(int *)vectp_a.333_121];
  _4 = *_3;
  _5 = d_28(D) + _2;
  vect__6.338_126 = MEM <vector(8) int> [(int *)vectp_d.336_124];
  _6 = *_5;
  _7 = e_29(D) + _2;
  vect__8.341_129 = MEM <vector(8) int> [(int *)vectp_e.339_127];
  _8 = *_7;
  vect__9.342_130 = vect__6.338_126 + vect__8.341_129;
  _9 = _6 + _8;
  vect__10.343_131 = vect__4.335_123 + vect__9.342_130;
  _10 = _4 + _9;
  MEM <vector(8) int> [(int *)vectp_a.344_132] = vect__10.343_131;
  _11 = b_31(D) + _2;
  mask__73.346_136 = vect__10.343_131 < vect_cst__135;
  _73 = _10 < 0;
  vect__12.349_139 = .MASK_LOAD (vectp_b.347_137, 32B, mask__73.346_136);
  _12 = 0;
  vect__13.352_142 = MEM <vector(8) int> [(int *)vectp_d.350_140];
  _13 = *_5;
  vect__14.355_145 = MEM <vector(8) int> [(int *)vectp_e.353_143];
  _14 = *_7;
  vect__15.356_146 = vect__13.352_142 + vect__14.355_145;
  _15 = _13 + _14;
  vect__16.357_147 = vect__12.349_139 + vect__15.356_146;
  _16 = _12 + _15;
  .MASK_STORE (vectp_b.358_148, 32B, mask__73.346_136, vect__16.357_147);
  vect_pretmp_63.362_153 = MEM <vector(8) int> [(int *)vectp_a.360_151];
  pretmp_63 = *_3;
  vect_prephitmp_64.363_155 = VEC_COND_EXPR <vect__10.343_131 >= vect_cst__154, vect__10.343_131, vect_pretmp_63.362_153>;
  prephitmp_64 = _10 >= 0 ? _10 : pretmp_63;
  _17 = c_33(D) + _2;
  vect__18.366_158 = MEM <vector(8) int> [(int *)vectp_c.364_156];
  _18 = *_17;
  vect__20.369_161 = MEM <vector(8) int> [(int *)vectp_d.367_159];
  _20 = *_5;
  vect__21.370_162 = vect__20.369_161 + vect_prephitmp_64.363_155;
  _21 = _20 + prephitmp_64;
  vect__22.371_163 = vect__18.366_158 + vect__21.370_162;
  _22 = _18 + _21;
  MEM <vector(8) int> [(int *)vectp_c.372_164] = vect__22.371_163;
  i_35 = i_44 + 1;
  ivtmp_54 = ivtmp_55 - 1;
  vectp_a.333_122 = vectp_a.333_121 + 32;
  vectp_d.336_125 = vectp_d.336_124 + 32;
  vectp_e.339_128 = vectp_e.339_127 + 32;
  vectp_a.344_133 = vectp_a.344_132 + 32;
  vectp_b.347_138 = vectp_b.347_137 + 32;
  vectp_d.350_141 = vectp_d.350_140 + 32;
  vectp_e.353_144 = vectp_e.353_143 + 32;
  vectp_b.358_149 = vectp_b.358_148 + 32;
  vectp_a.360_152 = vectp_a.360_151 + 32;
  vectp_c.364_157 = vectp_c.364_156 + 32;
  vectp_d.367_160 = vectp_d.367_159 + 32;
  vectp_c.372_165 = vectp_c.372_164 + 32;
  ivtmp_168 = ivtmp_167 + 1;
  if (ivtmp_168 < 8192)
    goto <bb 7>; [90.00%]
  else
    goto <bb 17>; [10.00%]

  <bb 7> [local count: 96636725]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 212600877]:
  # i_52 = PHI <i_70(13), 0(16)>
  # ivtmp_50 = PHI <ivtmp_71(13), 65536(16)>
  _49 = (long unsigned int) i_52;
  _48 = _49 * 4;
  _47 = a_27(D) + _48;
  _46 = *_47;
  _43 = d_28(D) + _48;
  _42 = *_43;
  _41 = e_29(D) + _48;
  _40 = *_41;
  _39 = _42 + _40;
  _38 = _46 + _39;
  *_47 = _38;
  if (_38 < 0)
    goto <bb 11>; [41.00%]
  else
    goto <bb 12>; [59.00%]

  <bb 11> [local count: 87166359]:
  _36 = b_31(D) + _48;
  _25 = *_36;
  _23 = *_43;
  _62 = *_41;
  _56 = _23 + _62;
  _57 = _25 + _56;
  *_36 = _57;
  pretmp_60 = *_47;

  <bb 12> [local count: 212600877]:
  # prephitmp_58 = PHI <_38(9), pretmp_60(11)>
  _19 = c_33(D) + _48;
  _65 = *_19;
  _66 = *_43;
  _67 = _66 + prephitmp_58;
  _68 = _65 + _67;
  *_19 = _68;
  i_70 = i_52 + 1;
  ivtmp_71 = ivtmp_50 - 1;
  if (ivtmp_71 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 6>; [100.00%]

  <bb 13> [local count: 210453395]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s274 (s274, funcdef_no=28, decl_uid=3619, cgraph_uid=29, symbol_order=28)


Analyzing loop at tsvc.c:73
tsvc.c:73:5: note:  === analyze_loop_nest ===
tsvc.c:73:5: note:   === vect_analyze_loop_form ===
tsvc.c:73:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: c_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: e_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_8
analyze_innermost: success.
	base_address: d_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_10
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_12
analyze_innermost: success.
	base_address: b_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_12
analyze_innermost: success.
	base_address: b_28(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_28(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_8
analyze_innermost: success.
	base_address: d_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: e_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_10
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_10
analyze_innermost: success.
	base_address: a_25(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_25(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:73:5: note:   === vect_analyze_data_refs ===
tsvc.c:73:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: _6 = *_5;
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: _9 = *_8;
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: *_10 = _11;
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: _13 = .MASK_LOAD (_12, 32B, _61);
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: .MASK_STORE (_12, 32B, _61, _14);
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: _15 = *_8;
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: _16 = *_5;
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: _ifc__62 = *_10;
vector(8) int
tsvc.c:73:5: note:   got vectype for stmt: *_10 = _ifc__64;
vector(8) int
tsvc.c:73:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:73:5: note:   Analyze phi: i_39 = PHI <i_30(8), 0(15)>
tsvc.c:73:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:73:5: note:   step: 1,  init: 0
tsvc.c:73:5: note:   Detected induction.
tsvc.c:73:5: note:   Analyze phi: .MEM_40 = PHI <.MEM_27(8), .MEM_21(D)(15)>
tsvc.c:73:5: note:   Analyze phi: ivtmp_54 = PHI <ivtmp_53(8), 65536(15)>
tsvc.c:73:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:73:5: note:   step: 4294967295,  init: 65536
tsvc.c:73:5: note:   Detected induction.
tsvc.c:73:5: note:   === vect_determine_precisions ===
tsvc.c:73:5: note:   ivtmp_53 has no range info
tsvc.c:73:5: note:   i_30 has range [0x1, 0x10000]
tsvc.c:73:5: note:   can narrow to unsigned:17 without loss of precision: i_30 = i_39 + 1;
tsvc.c:73:5: note:   _ifc__64 has no range info
tsvc.c:73:5: note:   _ifc__62 has no range info
tsvc.c:73:5: note:   _17 has no range info
tsvc.c:73:5: note:   _16 has no range info
tsvc.c:73:5: note:   _15 has no range info
tsvc.c:73:5: note:   _14 has no range info
tsvc.c:73:5: note:   using boolean precision 32 for _61 = _11 > 0;
tsvc.c:73:5: note:   _11 has no range info
tsvc.c:73:5: note:   _9 has no range info
tsvc.c:73:5: note:   _7 has no range info
tsvc.c:73:5: note:   _6 has no range info
tsvc.c:73:5: note:   _4 has no range info
tsvc.c:73:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:73:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:73:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:73:5: note:   === vect_pattern_recog ===
tsvc.c:73:5: note:   vect_is_simple_use: operand (long unsigned int) i_39, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: operand i_39 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:73:5: note:   vect_is_simple_use: operand (long unsigned int) i_39, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: operand i_39 = PHI <i_30(8), 0(15)>, type of def: induction
tsvc.c:73:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:73:5: note:   widen_mult pattern recognized: patt_19 = (long unsigned int) patt_63;
tsvc.c:73:5: note:   extra pattern stmt: patt_63 = i_39 w* 4;
tsvc.c:73:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:73:5: note:   Detected interleaving load *_5 and *_5
tsvc.c:73:5: note:   Queuing group with duplicate access for fixup
tsvc.c:73:5: note:   Detected interleaving load *_8 and *_8
tsvc.c:73:5: note:   Queuing group with duplicate access for fixup
tsvc.c:73:5: note:   Detected interleaving store *_10 and *_10
tsvc.c:73:5: note:   Queuing group with duplicate access for fixup
tsvc.c:73:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:73:5: note:   init: phi relevant? i_39 = PHI <i_30(8), 0(15)>
tsvc.c:73:5: note:   init: phi relevant? .MEM_40 = PHI <.MEM_27(8), .MEM_21(D)(15)>
tsvc.c:73:5: note:   init: phi relevant? ivtmp_54 = PHI <ivtmp_53(8), 65536(15)>
tsvc.c:73:5: note:   init: stmt relevant? _1 = (long unsigned int) i_39;
tsvc.c:73:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:73:5: note:   init: stmt relevant? _3 = c_22(D) + _2;
tsvc.c:73:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:73:5: note:   init: stmt relevant? _5 = e_23(D) + _2;
tsvc.c:73:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:73:5: note:   init: stmt relevant? _7 = _4 + _6;
tsvc.c:73:5: note:   init: stmt relevant? _8 = d_24(D) + _2;
tsvc.c:73:5: note:   init: stmt relevant? _9 = *_8;
tsvc.c:73:5: note:   init: stmt relevant? _10 = a_25(D) + _2;
tsvc.c:73:5: note:   init: stmt relevant? _11 = _7 + _9;
tsvc.c:73:5: note:   init: stmt relevant? *_10 = _11;
tsvc.c:73:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:73:5: note:   mark relevant 5, live 0: *_10 = _11;
tsvc.c:73:5: note:   init: stmt relevant? _12 = b_28(D) + _2;
tsvc.c:73:5: note:   init: stmt relevant? _61 = _11 > 0;
tsvc.c:73:5: note:   init: stmt relevant? _13 = .MASK_LOAD (_12, 32B, _61);
tsvc.c:73:5: note:   init: stmt relevant? _14 = _11 + _13;
tsvc.c:73:5: note:   init: stmt relevant? .MASK_STORE (_12, 32B, _61, _14);
tsvc.c:73:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:73:5: note:   mark relevant 5, live 0: .MASK_STORE (_12, 32B, _61, _14);
tsvc.c:73:5: note:   init: stmt relevant? _15 = *_8;
tsvc.c:73:5: note:   init: stmt relevant? _16 = *_5;
tsvc.c:73:5: note:   init: stmt relevant? _17 = _15 + _16;
tsvc.c:73:5: note:   init: stmt relevant? _ifc__62 = *_10;
tsvc.c:73:5: note:   init: stmt relevant? _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
tsvc.c:73:5: note:   init: stmt relevant? *_10 = _ifc__64;
tsvc.c:73:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:73:5: note:   mark relevant 5, live 0: *_10 = _ifc__64;
tsvc.c:73:5: note:   init: stmt relevant? i_30 = i_39 + 1;
tsvc.c:73:5: note:   init: stmt relevant? ivtmp_53 = ivtmp_54 - 1;
tsvc.c:73:5: note:   init: stmt relevant? if (ivtmp_53 != 0)
tsvc.c:73:5: note:   worklist: examine stmt: *_10 = _ifc__64;
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 <= 0 ? _17 : _ifc__62, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
tsvc.c:73:5: note:   worklist: examine stmt: _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _11 = _7 + _9;
tsvc.c:73:5: note:   vect_is_simple_use: operand _15 + _16, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _17 = _15 + _16;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_10, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _ifc__62 = *_10;
tsvc.c:73:5: note:   worklist: examine stmt: _ifc__62 = *_10;
tsvc.c:73:5: note:   worklist: examine stmt: _17 = _15 + _16;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _15 = *_8;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _16 = *_5;
tsvc.c:73:5: note:   worklist: examine stmt: _16 = *_5;
tsvc.c:73:5: note:   worklist: examine stmt: _15 = *_8;
tsvc.c:73:5: note:   worklist: examine stmt: _11 = _7 + _9;
tsvc.c:73:5: note:   vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _7 = _4 + _6;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _9 = *_8;
tsvc.c:73:5: note:   worklist: examine stmt: _9 = *_8;
tsvc.c:73:5: note:   worklist: examine stmt: _7 = _4 + _6;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:73:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:73:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:73:5: note:   worklist: examine stmt: .MASK_STORE (_12, 32B, _61, _14);
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _61 = _11 > 0;
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 + _13, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _14 = _11 + _13;
tsvc.c:73:5: note:   worklist: examine stmt: _14 = _11 + _13;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _11 = _7 + _9;
tsvc.c:73:5: note:   already marked relevant/live.
tsvc.c:73:5: note:   vect_is_simple_use: operand .MASK_LOAD (_12, 32B, _61), type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _13 = .MASK_LOAD (_12, 32B, _61);
tsvc.c:73:5: note:   worklist: examine stmt: _13 = .MASK_LOAD (_12, 32B, _61);
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _61 = _11 > 0;
tsvc.c:73:5: note:   already marked relevant/live.
tsvc.c:73:5: note:   worklist: examine stmt: _61 = _11 > 0;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _11 = _7 + _9;
tsvc.c:73:5: note:   already marked relevant/live.
tsvc.c:73:5: note:   worklist: examine stmt: *_10 = _11;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   mark relevant 5, live 0: _11 = _7 + _9;
tsvc.c:73:5: note:   already marked relevant/live.
tsvc.c:73:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _9 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: *_10 = _11;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _13 = .MASK_LOAD (_12, 32B, _61);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_12, 32B, _61, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _15 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _16 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _ifc__62 = *_10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: *_10 = _ifc__64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _9 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: *_10 = _11;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _13 = .MASK_LOAD (_12, 32B, _61);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_12, 32B, _61, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _15 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _16 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _ifc__62 = *_10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: *_10 = _ifc__64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: *_10 = _11;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: _13 = .MASK_LOAD (_12, 32B, _61);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: .MASK_STORE (_12, 32B, _61, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: _15 = *_8;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: _16 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: _ifc__62 = *_10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: *_10 = _ifc__64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_10 = _11;
  stmt_b: _13 = .MASK_LOAD (_12, 32B, _61);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_10 = _11;
  stmt_b: .MASK_STORE (_12, 32B, _61, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_10 = _11;
  stmt_b: _15 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_10 = _11;
  stmt_b: _16 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: *_10 = _11;
  stmt_b: _ifc__62 = *_10;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_10 = _11;
  stmt_b: *_10 = _ifc__64;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_12, 32B, _61);
  stmt_b: .MASK_STORE (_12, 32B, _61, _14);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_12, 32B, _61);
  stmt_b: _15 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_12, 32B, _61);
  stmt_b: _16 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_12, 32B, _61);
  stmt_b: _ifc__62 = *_10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_12, 32B, _61);
  stmt_b: *_10 = _ifc__64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_12, 32B, _61, _14);
  stmt_b: _15 = *_8;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_12, 32B, _61, _14);
  stmt_b: _16 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_12, 32B, _61, _14);
  stmt_b: _ifc__62 = *_10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_12, 32B, _61, _14);
  stmt_b: *_10 = _ifc__64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _15 = *_8;
  stmt_b: _16 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _15 = *_8;
  stmt_b: _ifc__62 = *_10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _15 = *_8;
  stmt_b: *_10 = _ifc__64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_5;
  stmt_b: _ifc__62 = *_10;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_5;
  stmt_b: *_10 = _ifc__64;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _ifc__62 = *_10;
  stmt_b: *_10 = _ifc__64;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _6 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _9 = *_8;
  stmt_b: _9 = *_8;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_10 = _11;
  stmt_b: *_10 = _11;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_12, 32B, _61);
  stmt_b: _13 = .MASK_LOAD (_12, 32B, _61);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_12, 32B, _61, _14);
  stmt_b: .MASK_STORE (_12, 32B, _61, _14);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _15 = *_8;
  stmt_b: _15 = *_8;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = *_5;
  stmt_b: _16 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _ifc__62 = *_10;
  stmt_b: _ifc__62 = *_10;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_10 = _ifc__64;
  stmt_b: *_10 = _ifc__64;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:75:17: missed:   versioning for alias required: can't determine dependence between *_3 and *_10
consider run-time aliasing test between *_3 and *_10
tsvc.c:75:17: missed:   versioning for alias required: can't determine dependence between *_3 and *_12
consider run-time aliasing test between *_3 and *_12
tsvc.c:75:17: missed:   versioning for alias required: can't determine dependence between *_3 and *_10
consider run-time aliasing test between *_3 and *_10
tsvc.c:75:24: missed:   versioning for alias required: can't determine dependence between *_5 and *_10
consider run-time aliasing test between *_5 and *_10
tsvc.c:75:24: missed:   versioning for alias required: can't determine dependence between *_5 and *_12
consider run-time aliasing test between *_5 and *_12
tsvc.c:75:24: missed:   versioning for alias required: can't determine dependence between *_5 and *_10
consider run-time aliasing test between *_5 and *_10
tsvc.c:75:31: missed:   versioning for alias required: can't determine dependence between *_8 and *_10
consider run-time aliasing test between *_8 and *_10
tsvc.c:75:31: missed:   versioning for alias required: can't determine dependence between *_8 and *_12
consider run-time aliasing test between *_8 and *_12
tsvc.c:75:31: missed:   versioning for alias required: can't determine dependence between *_8 and *_10
consider run-time aliasing test between *_8 and *_10
tsvc.c:75:14: missed:   versioning for alias required: can't determine dependence between *_10 and *_12
consider run-time aliasing test between *_10 and *_12
tsvc.c:75:14: missed:   versioning for alias required: can't determine dependence between *_10 and *_12
consider run-time aliasing test between *_10 and *_12
tsvc.c:75:14: missed:   versioning for alias required: can't determine dependence between *_10 and *_8
consider run-time aliasing test between *_10 and *_8
tsvc.c:75:14: missed:   versioning for alias required: can't determine dependence between *_10 and *_5
consider run-time aliasing test between *_10 and *_5
tsvc.c:73:5: note:   dependence distance  = 0.
tsvc.c:73:5: note:   dependence distance == 0 between *_10 and *_10
tsvc.c:73:5: note:   dependence distance  = 0.
tsvc.c:73:5: note:   dependence distance == 0 between *_10 and *_10
tsvc.c:73:5: note:   dependence distance  = 0.
tsvc.c:73:5: note:   dependence distance == 0 between *_12 and *_12
tsvc.c:78:28: missed:   versioning for alias required: can't determine dependence between *_12 and *_10
consider run-time aliasing test between *_12 and *_10
tsvc.c:78:18: missed:   versioning for alias required: can't determine dependence between *_12 and *_8
consider run-time aliasing test between *_12 and *_8
tsvc.c:78:18: missed:   versioning for alias required: can't determine dependence between *_12 and *_5
consider run-time aliasing test between *_12 and *_5
tsvc.c:78:18: missed:   versioning for alias required: can't determine dependence between *_12 and *_10
consider run-time aliasing test between *_12 and *_10
tsvc.c:78:18: missed:   versioning for alias required: can't determine dependence between *_12 and *_10
consider run-time aliasing test between *_12 and *_10
tsvc.c:82:21: missed:   versioning for alias required: can't determine dependence between *_8 and *_10
consider run-time aliasing test between *_8 and *_10
tsvc.c:82:28: missed:   versioning for alias required: can't determine dependence between *_5 and *_10
consider run-time aliasing test between *_5 and *_10
tsvc.c:73:5: note:   dependence distance  = 0.
tsvc.c:73:5: note:   dependence distance == 0 between *_10 and *_10
tsvc.c:73:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:73:5: note:   ==> examining phi: i_39 = PHI <i_30(8), 0(15)>
tsvc.c:73:5: note:   ==> examining phi: .MEM_40 = PHI <.MEM_27(8), .MEM_21(D)(15)>
tsvc.c:73:5: note:   ==> examining phi: ivtmp_54 = PHI <ivtmp_53(8), 65536(15)>
tsvc.c:73:5: note:   ==> examining statement: _1 = (long unsigned int) i_39;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining pattern def stmt: patt_63 = i_39 w* 4;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining pattern statement: patt_19 = (long unsigned int) patt_63;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: _3 = c_22(D) + _2;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _5 = e_23(D) + _2;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _7 = _4 + _6;
tsvc.c:73:5: note:   get vectype for scalar type: int
tsvc.c:73:5: note:   vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _8 = d_24(D) + _2;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: _9 = *_8;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _10 = a_25(D) + _2;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: _11 = _7 + _9;
tsvc.c:73:5: note:   get vectype for scalar type: int
tsvc.c:73:5: note:   vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: *_10 = _11;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _12 = b_28(D) + _2;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: _61 = _11 > 0;
tsvc.c:73:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _13 = .MASK_LOAD (_12, 32B, _61);
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _14 = _11 + _13;
tsvc.c:73:5: note:   get vectype for scalar type: int
tsvc.c:73:5: note:   vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: .MASK_STORE (_12, 32B, _61, _14);
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _15 = *_8;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _16 = *_5;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _17 = _15 + _16;
tsvc.c:73:5: note:   get vectype for scalar type: int
tsvc.c:73:5: note:   vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _ifc__62 = *_10;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
tsvc.c:73:5: note:   get vectype for scalar type: int
tsvc.c:73:5: note:   vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: *_10 = _ifc__64;
tsvc.c:73:5: note:   precomputed vectype: vector(8) int
tsvc.c:73:5: note:   nunits = 8
tsvc.c:73:5: note:   ==> examining statement: i_30 = i_39 + 1;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: ivtmp_53 = ivtmp_54 - 1;
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   ==> examining statement: if (ivtmp_53 != 0)
tsvc.c:73:5: note:   skip.
tsvc.c:73:5: note:   vectorization factor = 8
tsvc.c:73:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x5280c10 *_3 1 times scalar_load costs 12 in body
0x5280c10 *_5 1 times scalar_load costs 12 in body
0x5280c10 _4 + _6 1 times scalar_stmt costs 4 in body
0x5280c10 *_8 1 times scalar_load costs 12 in body
0x5280c10 _7 + _9 1 times scalar_stmt costs 4 in body
0x5280c10 _11 1 times scalar_store costs 12 in body
0x5280c10 _11 > 0 1 times scalar_stmt costs 4 in body
0x5280c10 .MASK_LOAD (_12, 32B, _61) 1 times scalar_load costs 12 in body
0x5280c10 _11 + _13 1 times scalar_stmt costs 4 in body
0x5280c10 .MASK_STORE (_12, 32B, _61, _14) 1 times scalar_store costs 12 in body
0x5280c10 *_8 1 times scalar_load costs 12 in body
0x5280c10 *_5 1 times scalar_load costs 12 in body
0x5280c10 _15 + _16 1 times scalar_stmt costs 4 in body
0x5280c10 *_10 1 times scalar_load costs 12 in body
0x5280c10 _11 <= 0 ? _17 : _ifc__62 1 times scalar_stmt costs 4 in body
0x5280c10 _ifc__64 1 times scalar_store costs 12 in body
tsvc.c:73:5: note:   === vect_analyze_slp ===
tsvc.c:73:5: note:   === vect_make_slp_decision ===
tsvc.c:73:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:73:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:73:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:73:5: note:   accesses have the same alignment: *_8 and *_8
tsvc.c:73:5: note:   accesses have the same alignment: *_10 and *_10
tsvc.c:73:5: note:   accesses have the same alignment: *_10 and *_10
tsvc.c:73:5: note:   accesses have the same alignment: *_12 and *_12
tsvc.c:73:5: note:   accesses have the same alignment: *_10 and *_10
tsvc.c:73:5: note:   recording new base alignment for c_22(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:73:5: note:   recording new base alignment for e_23(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:73:5: note:   recording new base alignment for d_24(D)
  alignment:    4
  misalignment: 0
  based on:     _9 = *_8;
tsvc.c:73:5: note:   recording new base alignment for a_25(D)
  alignment:    4
  misalignment: 0
  based on:     *_10 = _11;
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_3
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_5
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_8
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_10
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_12
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_12
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_8
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_5
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_10
tsvc.c:73:5: note:   vect_compute_data_ref_alignment:
tsvc.c:73:5: note:   can't force alignment of ref: *_10
tsvc.c:73:5: note:   === vect_prune_runtime_alias_test_list ===
found equal ranges *_3, *_10 and *_3, *_10
found equal ranges *_5, *_10 and *_5, *_10
found equal ranges *_5, *_10 and *_5, *_10
found equal ranges *_5, *_10 and *_5, *_10
found equal ranges *_5, *_12 and *_5, *_12
found equal ranges *_8, *_10 and *_8, *_10
found equal ranges *_8, *_10 and *_8, *_10
found equal ranges *_8, *_10 and *_8, *_10
found equal ranges *_8, *_12 and *_8, *_12
found equal ranges *_10, *_12 and *_10, *_12
found equal ranges *_10, *_12 and *_10, *_12
found equal ranges *_10, *_12 and *_10, *_12
found equal ranges *_10, *_12 and *_10, *_12
merged alias checks:
  reference:      *_3 vs. *_10
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_3 vs. *_12
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_5 vs. *_10
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_5 vs. *_12
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_8 vs. *_10
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_8 vs. *_12
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_10 vs. *_12
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW ARBITRARY
tsvc.c:73:5: note:   improved number of alias checks from 20 to 7
tsvc.c:73:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:73:5: note:   vect_can_advance_ivs_p:
tsvc.c:73:5: note:   Analyze phi: i_39 = PHI <i_30(8), 0(15)>
tsvc.c:73:5: note:   Analyze phi: .MEM_40 = PHI <.MEM_27(8), .MEM_21(D)(15)>
tsvc.c:73:5: note:   reduc or virtual phi. skip.
tsvc.c:73:5: note:   Analyze phi: ivtmp_54 = PHI <ivtmp_53(8), 65536(15)>
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_store_cost: aligned.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: aligned.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_store_cost: aligned.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_store_cost: aligned.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:73:5: note:   Setting misalignment to unknown (-1).
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: aligned.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_store_cost: aligned.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   Vectorizing an unaligned access.
tsvc.c:73:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:73:5: note:   === vect_analyze_loop_operations ===
tsvc.c:73:5: note:   examining phi: i_39 = PHI <i_30(8), 0(15)>
tsvc.c:73:5: note:   examining phi: .MEM_40 = PHI <.MEM_27(8), .MEM_21(D)(15)>
tsvc.c:73:5: note:   examining phi: ivtmp_54 = PHI <ivtmp_53(8), 65536(15)>
tsvc.c:73:5: note:   ==> examining statement: _1 = (long unsigned int) i_39;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: _3 = c_22(D) + _2;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _5 = e_23(D) + _2;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _7 = _4 + _6;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:    === vectorizable_operation ===
tsvc.c:73:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _8 = d_24(D) + _2;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: _9 = *_8;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _10 = a_25(D) + _2;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: _11 = _7 + _9;
tsvc.c:73:5: note:   vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:    === vectorizable_operation ===
tsvc.c:73:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: *_10 = _11;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _12 = b_28(D) + _2;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: _61 = _11 > 0;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:73:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:73:5: note:   ==> examining statement: _13 = .MASK_LOAD (_12, 32B, _61);
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _14 = _11 + _13;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_is_simple_use: operand .MASK_LOAD (_12, 32B, _61), type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:    === vectorizable_operation ===
tsvc.c:73:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: .MASK_STORE (_12, 32B, _61, _14);
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 + _13, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _15 = *_8;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _16 = *_5;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _17 = _15 + _16;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:    === vectorizable_operation ===
tsvc.c:73:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _ifc__62 = *_10;
tsvc.c:73:5: note:   vect_is_simple_use: operand *_10, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_is_simple_use: operand *_10, type of def: unknown
tsvc.c:73:5: missed:   Unsupported pattern.
tsvc.c:73:5: missed:   use not simple.
tsvc.c:73:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
tsvc.c:73:5: note:   vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_is_simple_use: operand _15 + _16, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_is_simple_use: operand *_10, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:73:5: note:   ==> examining statement: *_10 = _ifc__64;
tsvc.c:73:5: note:   vect_is_simple_use: operand _11 <= 0 ? _17 : _ifc__62, type of def: internal
tsvc.c:73:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:73:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:73:5: note:   ==> examining statement: i_30 = i_39 + 1;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: ivtmp_53 = ivtmp_54 - 1;
tsvc.c:73:5: note:   irrelevant.
tsvc.c:73:5: note:   ==> examining statement: if (ivtmp_53 != 0)
tsvc.c:73:5: note:   irrelevant.
0x51eb380 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x51eb380 *_5 1 times unaligned_load (misalign -1) costs 20 in body
0x51eb380 _4 + _6 1 times vector_stmt costs 4 in body
0x51eb380 *_8 1 times unaligned_load (misalign -1) costs 20 in body
0x51eb380 _7 + _9 1 times vector_stmt costs 4 in body
0x51eb380 _11 1 times unaligned_store (misalign -1) costs 20 in body
0x51eb380 _11 > 0 1 times scalar_to_vec costs 4 in prologue
0x51eb380 _11 > 0 1 times vector_stmt costs 4 in body
0x51eb380 .MASK_LOAD (_12, 32B, _61) 1 times unaligned_load (misalign -1) costs 20 in body
0x51eb380 _11 + _13 1 times vector_stmt costs 4 in body
0x51eb380 .MASK_STORE (_12, 32B, _61, _14) 1 times unaligned_store (misalign -1) costs 20 in body
0x51eb380 *_8 1 times unaligned_load (misalign -1) costs 20 in body
0x51eb380 *_5 1 times unaligned_load (misalign -1) costs 20 in body
0x51eb380 _15 + _16 1 times vector_stmt costs 4 in body
0x51eb380 *_10 1 times unaligned_load (misalign -1) costs 20 in body
0x51eb380 _11 <= 0 ? _17 : _ifc__62 1 times scalar_to_vec costs 4 in prologue
0x51eb380 _11 <= 0 ? _17 : _ifc__62 1 times vector_stmt costs 4 in body
0x51eb380 _ifc__64 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_53 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) c_22(D) + 4 * iteration does not wrap in statement _3 = c_22(D) + _2;
 in loop 1.
Statement _3 = c_22(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) e_23(D) + 4 * iteration does not wrap in statement _5 = e_23(D) + _2;
 in loop 1.
Statement _5 = e_23(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_24(D) + 4 * iteration does not wrap in statement _8 = d_24(D) + _2;
 in loop 1.
Statement _8 = d_24(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) a_25(D) + 4 * iteration does not wrap in statement _10 = a_25(D) + _2;
 in loop 1.
Statement _10 = a_25(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_28(D) + 4 * iteration does not wrap in statement _12 = b_28(D) + _2;
 in loop 1.
Statement _12 = b_28(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_30 = i_39 + 1;
 in loop 1.
Statement i_30 = i_39 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:73:5: note:  not using a fully-masked loop.
0x51eb380 <unknown> 7 times vector_stmt costs 28 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x51eb380 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:73:5: note:  Cost model analysis: 
  Vector inside of loop cost: 224
  Vector prologue cost: 52
  Vector epilogue cost: 0
  Scalar iteration cost: 144
  Scalar outside cost: 8
  Vector outside cost: 52
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:73:5: note:    Runtime profitability threshold = 8
tsvc.c:73:5: note:    Static estimate profitability threshold = 8
tsvc.c:73:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:73:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:73:5: note:  ***** Choosing vector mode V8SI
tsvc.c:73:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:73:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_10
using an address-based WAR/WAW test
create runtime check for data references *_3 and *_12
using an address-based WAR/WAW test
create runtime check for data references *_5 and *_10
using an address-based overlap test
create runtime check for data references *_5 and *_12
using an address-based overlap test
create runtime check for data references *_8 and *_10
using an address-based overlap test
create runtime check for data references *_8 and *_12
using an address-based overlap test
create runtime check for data references *_10 and *_12
using an address-based overlap test
tsvc.c:73:5: note:  created 7 versioning for alias checks.
tsvc.c:73:5: note:  trying to apply versioning to outer loop 0
tsvc.c:73:5: note:  reusing loop version created by if conversion
tsvc.c:73:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:73:5: note:  ------>vectorizing phi: i_39 = PHI <i_30(8), 0(19)>
tsvc.c:73:5: note:  ------>vectorizing phi: .MEM_40 = PHI <.MEM_27(8), .MEM_21(D)(19)>
tsvc.c:73:5: note:  ------>vectorizing phi: ivtmp_54 = PHI <ivtmp_53(8), 65536(19)>
tsvc.c:73:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_39;
tsvc.c:73:5: note:  ------>vectorizing statement: patt_63 = i_39 w* 4;
tsvc.c:73:5: note:  ------>vectorizing statement: patt_19 = (long unsigned int) patt_63;
tsvc.c:73:5: note:  ------>vectorizing statement: _3 = c_22(D) + _2;
tsvc.c:73:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  transform load. ncopies = 1
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_22(D)
tsvc.c:73:5: note:  created c_22(D)
tsvc.c:73:5: note:  add new stmt: vect__4.406_103 = MEM <vector(8) int> [(int *)vectp_c.404_101];
tsvc.c:73:5: note:  ------>vectorizing statement: _5 = e_23(D) + _2;
tsvc.c:73:5: note:  ------>vectorizing statement: _6 = *_5;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  transform load. ncopies = 1
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_23(D)
tsvc.c:73:5: note:  created e_23(D)
tsvc.c:73:5: note:  add new stmt: vect__6.409_106 = MEM <vector(8) int> [(int *)vectp_e.407_104];
tsvc.c:73:5: note:  ------>vectorizing statement: _7 = _4 + _6;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  transform binary/unary operation.
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:73:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _4 = *_3;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:73:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _6 = *_5;
tsvc.c:73:5: note:  add new stmt: vect__7.410_107 = vect__4.406_103 + vect__6.409_106;
tsvc.c:73:5: note:  ------>vectorizing statement: _8 = d_24(D) + _2;
tsvc.c:73:5: note:  ------>vectorizing statement: _9 = *_8;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  transform load. ncopies = 1
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_24(D)
tsvc.c:73:5: note:  created d_24(D)
tsvc.c:73:5: note:  add new stmt: vect__9.413_110 = MEM <vector(8) int> [(int *)vectp_d.411_108];
tsvc.c:73:5: note:  ------>vectorizing statement: _10 = a_25(D) + _2;
tsvc.c:73:5: note:  ------>vectorizing statement: _11 = _7 + _9;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  transform binary/unary operation.
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _7
tsvc.c:73:5: note:  vect_is_simple_use: operand _4 + _6, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _7 = _4 + _6;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:73:5: note:  vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _9 = *_8;
tsvc.c:73:5: note:  add new stmt: vect__11.414_111 = vect__7.410_107 + vect__9.413_110;
tsvc.c:73:5: note:  ------>vectorizing statement: *_10 = _11;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  transform store. ncopies = 1
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _11 = _7 + _9;
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_25(D)
tsvc.c:73:5: note:  created a_25(D)
tsvc.c:73:5: note:  add new stmt: MEM <vector(8) int> [(int *)vectp_a.415_112] = vect__11.414_111;
tsvc.c:73:5: note:  ------>vectorizing statement: _12 = b_28(D) + _2;
tsvc.c:73:5: note:  ------>vectorizing statement: _61 = _11 > 0;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _11 = _7 + _9;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:73:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:73:5: note:  created new init_stmt: vect_cst__115 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:73:5: note:  add new stmt: mask__61.417_116 = vect__11.414_111 > vect_cst__115;
tsvc.c:73:5: note:  ------>vectorizing statement: _13 = .MASK_LOAD (_12, 32B, _61);
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:73:5: note:  transform load. ncopies = 1
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_28(D)
tsvc.c:73:5: note:  created b_28(D)
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _61
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _61 = _11 > 0;
tsvc.c:73:5: note:  add new stmt: vect__13.420_119 = .MASK_LOAD (vectp_b.418_117, 32B, mask__61.417_116);
tsvc.c:73:5: note:  ------>vectorizing statement: _14 = _11 + _13;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_is_simple_use: operand .MASK_LOAD (_12, 32B, _61), type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  transform binary/unary operation.
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _11 = _7 + _9;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _13
tsvc.c:73:5: note:  vect_is_simple_use: operand .MASK_LOAD (_12, 32B, _61), type of def: internal
tsvc.c:73:5: note:    def_stmt =  _13 = .MASK_LOAD (_12, 32B, _61);
tsvc.c:73:5: note:  add new stmt: vect__14.421_120 = vect__11.414_111 + vect__13.420_119;
tsvc.c:73:5: note:  ------>vectorizing statement: .MASK_STORE (_12, 32B, _61, _14);
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 + _13, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  transform store. ncopies = 1
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _14
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 + _13, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _14 = _11 + _13;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _61
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 > 0, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _61 = _11 > 0;
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_28(D)
tsvc.c:73:5: note:  created b_28(D)
tsvc.c:73:5: note:  add new stmt: .MASK_STORE (vectp_b.422_121, 32B, mask__61.417_116, vect__14.421_120);
tsvc.c:73:5: note:  ------>vectorizing statement: _15 = *_8;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  transform load. ncopies = 1
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_24(D)
tsvc.c:73:5: note:  created d_24(D)
tsvc.c:73:5: note:  add new stmt: vect__15.426_126 = MEM <vector(8) int> [(int *)vectp_d.424_124];
tsvc.c:73:5: note:  ------>vectorizing statement: _16 = *_5;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  transform load. ncopies = 1
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_23(D)
tsvc.c:73:5: note:  created e_23(D)
tsvc.c:73:5: note:  add new stmt: vect__16.429_129 = MEM <vector(8) int> [(int *)vectp_e.427_127];
tsvc.c:73:5: note:  ------>vectorizing statement: _17 = _15 + _16;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  transform binary/unary operation.
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _15
tsvc.c:73:5: note:  vect_is_simple_use: operand *_8, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _15 = *_8;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _16
tsvc.c:73:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _16 = *_5;
tsvc.c:73:5: note:  add new stmt: vect__17.430_130 = vect__15.426_126 + vect__16.429_129;
tsvc.c:73:5: note:  ------>vectorizing statement: _ifc__62 = *_10;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  transform load. ncopies = 1
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_25(D)
tsvc.c:73:5: note:  created a_25(D)
tsvc.c:73:5: note:  add new stmt: vect__ifc__62.433_133 = MEM <vector(8) int> [(int *)vectp_a.431_131];
tsvc.c:73:5: note:  ------>vectorizing statement: _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_is_simple_use: operand _15 + _16, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_is_simple_use: operand *_10, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:73:5: note:  vect_is_simple_use: operand _7 + _9, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _11 = _7 + _9;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:73:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:73:5: note:  created new init_stmt: vect_cst__134 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _17
tsvc.c:73:5: note:  vect_is_simple_use: operand _15 + _16, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _17 = _15 + _16;
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _ifc__62
tsvc.c:73:5: note:  vect_is_simple_use: operand *_10, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _ifc__62 = *_10;
tsvc.c:73:5: note:  add new stmt: vect__ifc__64.434_135 = VEC_COND_EXPR <vect__11.414_111 <= vect_cst__134, vect__17.430_130, vect__ifc__62.433_133>;
tsvc.c:73:5: note:  ------>vectorizing statement: *_10 = _ifc__64;
tsvc.c:73:5: note:  transform statement.
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 <= 0 ? _17 : _ifc__62, type of def: internal
tsvc.c:73:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:73:5: note:  transform store. ncopies = 1
tsvc.c:73:5: note:  vect_get_vec_def_for_operand: _ifc__64
tsvc.c:73:5: note:  vect_is_simple_use: operand _11 <= 0 ? _17 : _ifc__62, type of def: internal
tsvc.c:73:5: note:    def_stmt =  _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
tsvc.c:73:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_25(D)
tsvc.c:73:5: note:  created a_25(D)
tsvc.c:73:5: note:  add new stmt: MEM <vector(8) int> [(int *)vectp_a.435_136] = vect__ifc__64.434_135;
tsvc.c:73:5: note:  ------>vectorizing statement: i_30 = i_39 + 1;
tsvc.c:73:5: note:  ------>vectorizing statement: ivtmp_53 = ivtmp_54 - 1;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_c.404_102 = vectp_c.404_101 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_e.407_105 = vectp_e.407_104 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_d.411_109 = vectp_d.411_108 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_a.415_113 = vectp_a.415_112 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_b.418_118 = vectp_b.418_117 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_b.422_122 = vectp_b.422_121 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_d.424_125 = vectp_d.424_124 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_e.427_128 = vectp_e.427_127 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_a.431_132 = vectp_a.431_131 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: vectp_a.435_137 = vectp_a.435_136 + 32;
tsvc.c:73:5: note:  ------>vectorizing statement: if (ivtmp_53 != 0)
tsvc.c:73:5: note:  New loop exit condition: if (ivtmp_140 < 8192)
tsvc.c:73:5: note:  LOOP VECTORIZED

tsvc.c:71:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       19


fix_loop_structure: fixing up loops for function
s274 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_a.436;
  vector(8) int * vectp_a.435;
  vector(8) int vect__ifc__64.434;
  vector(8) int vect__ifc__62.433;
  vector(8) int * vectp_a.432;
  vector(8) int * vectp_a.431;
  vector(8) int vect__17.430;
  vector(8) int vect__16.429;
  vector(8) int * vectp_e.428;
  vector(8) int * vectp_e.427;
  vector(8) int vect__15.426;
  vector(8) int * vectp_d.425;
  vector(8) int * vectp_d.424;
  vector(8) int * vectp_b.423;
  vector(8) int * vectp_b.422;
  vector(8) int vect__14.421;
  vector(8) int vect__13.420;
  vector(8) int * vectp_b.419;
  vector(8) int * vectp_b.418;
  vector(8) <unnamed type> mask__61.417;
  vector(8) int * vectp_a.416;
  vector(8) int * vectp_a.415;
  vector(8) int vect__11.414;
  vector(8) int vect__9.413;
  vector(8) int * vectp_d.412;
  vector(8) int * vectp_d.411;
  vector(8) int vect__7.410;
  vector(8) int vect__6.409;
  vector(8) int * vectp_e.408;
  vector(8) int * vectp_e.407;
  vector(8) int vect__4.406;
  vector(8) int * vectp_c.405;
  vector(8) int * vectp_c.404;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int _7;
  int * _8;
  int _9;
  int * _10;
  int _11;
  int * _12;
  int _13;
  int _14;
  int _15;
  int _16;
  int _17;
  int _18;
  int * _20;
  int _31;
  int * _32;
  int _33;
  int _34;
  int * _35;
  int _36;
  int * _37;
  long unsigned int _38;
  long unsigned int _41;
  unsigned int ivtmp_42;
  int _44;
  int _45;
  int _46;
  int * _47;
  int _49;
  _Bool _52;
  unsigned int ivtmp_53;
  unsigned int ivtmp_54;
  int _55;
  unsigned int ivtmp_59;
  _Bool _61;
  int _ifc__62;
  int _ifc__64;
  int * _66;
  ssizetype _67;
  sizetype _68;
  _Bool _69;
  int * _70;
  ssizetype _71;
  sizetype _72;
  _Bool _73;
  _Bool _74;
  int * _75;
  ssizetype _76;
  sizetype _77;
  _Bool _78;
  _Bool _79;
  int * _80;
  ssizetype _81;
  sizetype _82;
  _Bool _83;
  _Bool _84;
  int * _85;
  ssizetype _86;
  sizetype _87;
  _Bool _88;
  _Bool _89;
  int * _90;
  ssizetype _91;
  sizetype _92;
  _Bool _93;
  _Bool _94;
  int * _95;
  ssizetype _96;
  sizetype _97;
  _Bool _98;
  _Bool _99;
  vector(8) int vect_cst__115;
  vector(8) int vect_cst__134;
  unsigned int ivtmp_139;
  unsigned int ivtmp_140;

  <bb 2> [local count: 10737414]:
  _66 = c_22(D) + 4;
  _67 = a_25(D) - _66;
  _68 = (sizetype) _67;
  _69 = _68 > 24;
  _70 = c_22(D) + 4;
  _71 = b_28(D) - _70;
  _72 = (sizetype) _71;
  _73 = _72 > 24;
  _74 = _69 & _73;
  _75 = e_23(D) + 31;
  _76 = _75 - a_25(D);
  _77 = (sizetype) _76;
  _78 = _77 > 62;
  _79 = _74 & _78;
  _80 = e_23(D) + 31;
  _81 = _80 - b_28(D);
  _82 = (sizetype) _81;
  _83 = _82 > 62;
  _84 = _79 & _83;
  _85 = d_24(D) + 31;
  _86 = _85 - a_25(D);
  _87 = (sizetype) _86;
  _88 = _87 > 62;
  _89 = _84 & _88;
  _90 = d_24(D) + 31;
  _91 = _90 - b_28(D);
  _92 = (sizetype) _91;
  _93 = _92 > 62;
  _94 = _89 & _93;
  _95 = a_25(D) + 31;
  _96 = _95 - b_28(D);
  _97 = (sizetype) _96;
  _98 = _97 > 62;
  _99 = _94 & _98;
  _52 = 1;
  if (_99 != 0)
    goto <bb 19>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 19> [local count: 10737414]:
  vect_cst__115 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__134 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374140]:
  # i_39 = PHI <i_30(8), 0(19)>
  # ivtmp_54 = PHI <ivtmp_53(8), 65536(19)>
  # vectp_c.404_101 = PHI <vectp_c.404_102(8), c_22(D)(19)>
  # vectp_e.407_104 = PHI <vectp_e.407_105(8), e_23(D)(19)>
  # vectp_d.411_108 = PHI <vectp_d.411_109(8), d_24(D)(19)>
  # vectp_a.415_112 = PHI <vectp_a.415_113(8), a_25(D)(19)>
  # vectp_b.418_117 = PHI <vectp_b.418_118(8), b_28(D)(19)>
  # vectp_b.422_121 = PHI <vectp_b.422_122(8), b_28(D)(19)>
  # vectp_d.424_124 = PHI <vectp_d.424_125(8), d_24(D)(19)>
  # vectp_e.427_127 = PHI <vectp_e.427_128(8), e_23(D)(19)>
  # vectp_a.431_131 = PHI <vectp_a.431_132(8), a_25(D)(19)>
  # vectp_a.435_136 = PHI <vectp_a.435_137(8), a_25(D)(19)>
  # ivtmp_139 = PHI <ivtmp_140(8), 0(19)>
  _1 = (long unsigned int) i_39;
  _2 = _1 * 4;
  _3 = c_22(D) + _2;
  vect__4.406_103 = MEM <vector(8) int> [(int *)vectp_c.404_101];
  _4 = *_3;
  _5 = e_23(D) + _2;
  vect__6.409_106 = MEM <vector(8) int> [(int *)vectp_e.407_104];
  _6 = *_5;
  vect__7.410_107 = vect__4.406_103 + vect__6.409_106;
  _7 = _4 + _6;
  _8 = d_24(D) + _2;
  vect__9.413_110 = MEM <vector(8) int> [(int *)vectp_d.411_108];
  _9 = *_8;
  _10 = a_25(D) + _2;
  vect__11.414_111 = vect__7.410_107 + vect__9.413_110;
  _11 = _7 + _9;
  MEM <vector(8) int> [(int *)vectp_a.415_112] = vect__11.414_111;
  _12 = b_28(D) + _2;
  mask__61.417_116 = vect__11.414_111 > vect_cst__115;
  _61 = _11 > 0;
  vect__13.420_119 = .MASK_LOAD (vectp_b.418_117, 32B, mask__61.417_116);
  _13 = 0;
  vect__14.421_120 = vect__11.414_111 + vect__13.420_119;
  _14 = _11 + _13;
  .MASK_STORE (vectp_b.422_121, 32B, mask__61.417_116, vect__14.421_120);
  vect__15.426_126 = MEM <vector(8) int> [(int *)vectp_d.424_124];
  _15 = *_8;
  vect__16.429_129 = MEM <vector(8) int> [(int *)vectp_e.427_127];
  _16 = *_5;
  vect__17.430_130 = vect__15.426_126 + vect__16.429_129;
  _17 = _15 + _16;
  vect__ifc__62.433_133 = MEM <vector(8) int> [(int *)vectp_a.431_131];
  _ifc__62 = *_10;
  vect__ifc__64.434_135 = VEC_COND_EXPR <vect__11.414_111 <= vect_cst__134, vect__17.430_130, vect__ifc__62.433_133>;
  _ifc__64 = _11 <= 0 ? _17 : _ifc__62;
  MEM <vector(8) int> [(int *)vectp_a.435_136] = vect__ifc__64.434_135;
  i_30 = i_39 + 1;
  ivtmp_53 = ivtmp_54 - 1;
  vectp_c.404_102 = vectp_c.404_101 + 32;
  vectp_e.407_105 = vectp_e.407_104 + 32;
  vectp_d.411_109 = vectp_d.411_108 + 32;
  vectp_a.415_113 = vectp_a.415_112 + 32;
  vectp_b.418_118 = vectp_b.418_117 + 32;
  vectp_b.422_122 = vectp_b.422_121 + 32;
  vectp_d.424_125 = vectp_d.424_124 + 32;
  vectp_e.427_128 = vectp_e.427_127 + 32;
  vectp_a.431_132 = vectp_a.431_131 + 32;
  vectp_a.435_137 = vectp_a.435_136 + 32;
  ivtmp_140 = ivtmp_139 + 1;
  if (ivtmp_140 < 8192)
    goto <bb 8>; [90.00%]
  else
    goto <bb 17>; [10.00%]

  <bb 8> [local count: 96636725]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 212600877]:
  # i_51 = PHI <i_58(13), 0(16)>
  # ivtmp_42 = PHI <ivtmp_59(13), 65536(16)>
  _41 = (long unsigned int) i_51;
  _38 = _41 * 4;
  _37 = c_22(D) + _38;
  _36 = *_37;
  _35 = e_23(D) + _38;
  _34 = *_35;
  _33 = _36 + _34;
  _32 = d_24(D) + _38;
  _31 = *_32;
  _20 = a_25(D) + _38;
  _18 = _33 + _31;
  *_20 = _18;
  if (_18 > 0)
    goto <bb 11>; [59.00%]
  else
    goto <bb 10>; [41.00%]

  <bb 11> [local count: 125434518]:
  _47 = b_28(D) + _38;
  _46 = *_47;
  _55 = _18 + _46;
  *_47 = _55;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 87166359]:
  _44 = *_32;
  _45 = *_35;
  _49 = _44 + _45;
  *_20 = _49;

  <bb 12> [local count: 212600877]:
  i_58 = i_51 + 1;
  ivtmp_59 = ivtmp_42 - 1;
  if (ivtmp_59 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 7>; [100.00%]

  <bb 13> [local count: 210453395]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s275 (s275, funcdef_no=29, decl_uid=3637, cgraph_uid=30, symbol_order=29)


Analyzing loop at tsvc.c:88
tsvc.c:88:5: note:  === analyze_loop_nest ===
tsvc.c:88:5: note:   === vect_analyze_loop_form ===
tsvc.c:88:5: missed:   not vectorized: control flow in loop.
tsvc.c:88:5: missed:  bad loop form.
tsvc.c:88:5: missed: couldn't vectorize loop

Analyzing loop at tsvc.c:92
tsvc.c:92:13: note:  === analyze_loop_nest ===
tsvc.c:92:13: note:   === vect_analyze_loop_form ===
tsvc.c:92:13: note:    === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [254, + , 4294967295] != 0
  bounds on difference of bases: -254 ... -254
  result:
    # of iterations 254, bounded by 254
Creating dr for (*_5)[i_33]
analyze_innermost: success.
	base_address: ff_20(D)
	offset from base address: (ssizetype) ((sizetype) i_33 * 4)
	constant offset from base address: 0
	step: 1024
	base alignment: 4
	base misalignment: 0
	offset alignment: 4
	step alignment: 256
	base_object: (*ff_20(D))
	Access function 0: i_33
	Access function 1: {0B, +, 1024}_2
Creating dr for (*_7)[i_33]
analyze_innermost: success.
	base_address: gg_21(D)
	offset from base address: (ssizetype) ((sizetype) i_33 * 4)
	constant offset from base address: 1024
	step: 1024
	base alignment: 4
	base misalignment: 0
	offset alignment: 4
	step alignment: 256
	base_object: (*gg_21(D))
	Access function 0: i_33
	Access function 1: {1024B, +, 1024}_2
Creating dr for (*_10)[i_33]
analyze_innermost: success.
	base_address: hh_22(D)
	offset from base address: (ssizetype) ((sizetype) i_33 * 4)
	constant offset from base address: 1024
	step: 1024
	base alignment: 4
	base misalignment: 0
	offset alignment: 4
	step alignment: 256
	base_object: (*hh_22(D))
	Access function 0: i_33
	Access function 1: {1024B, +, 1024}_2
Creating dr for (*_12)[i_33]
analyze_innermost: success.
	base_address: ff_20(D)
	offset from base address: (ssizetype) ((sizetype) i_33 * 4)
	constant offset from base address: 1024
	step: 1024
	base alignment: 4
	base misalignment: 0
	offset alignment: 4
	step alignment: 256
	base_object: (*ff_20(D))
	Access function 0: i_33
	Access function 1: {1024B, +, 1024}_2
tsvc.c:92:13: note:   === vect_analyze_data_refs ===
tsvc.c:92:13: note:   got vectype for stmt: _6 = (*_5)[i_33];
vector(8) int
tsvc.c:92:13: note:   got vectype for stmt: _8 = (*_7)[i_33];
vector(8) int
tsvc.c:92:13: note:   got vectype for stmt: _11 = (*_10)[i_33];
vector(8) int
tsvc.c:92:13: note:   got vectype for stmt: (*_12)[i_33] = _13;
vector(8) int
tsvc.c:92:13: note:   === vect_analyze_scalar_cycles ===
tsvc.c:92:13: note:   Analyze phi: j_34 = PHI <1(7), j_24(9)>
tsvc.c:92:13: note:   Access function of PHI: {1, +, 1}_2
tsvc.c:92:13: note:   step: 1,  init: 1
tsvc.c:92:13: note:   Detected induction.
tsvc.c:92:13: note:   Analyze phi: .MEM_35 = PHI <.MEM_36(7), .MEM_23(9)>
tsvc.c:92:13: note:   Analyze phi: ivtmp_17 = PHI <255(7), ivtmp_54(9)>
tsvc.c:92:13: note:   Access function of PHI: {255, +, 4294967295}_2
tsvc.c:92:13: note:   step: 4294967295,  init: 255
tsvc.c:92:13: note:   Detected induction.
tsvc.c:92:13: note:   === vect_determine_precisions ===
tsvc.c:92:13: note:   ivtmp_54 has no range info
tsvc.c:92:13: note:   j_24 has range [0x2, 0x100]
tsvc.c:92:13: note:   can narrow to unsigned:9 without loss of precision: j_24 = j_34 + 1;
tsvc.c:92:13: note:   _13 has no range info
tsvc.c:92:13: note:   _11 has no range info
tsvc.c:92:13: note:   _9 has no range info
tsvc.c:92:13: note:   _8 has no range info
tsvc.c:92:13: note:   _6 has no range info
tsvc.c:92:13: note:   _4 has range [0x0, 0x3f800]
tsvc.c:92:13: note:   can narrow to unsigned:18 without loss of precision: _4 = _3 + 18446744073709550592;
tsvc.c:92:13: note:   _3 has range [0x400, 0x3fc00]
tsvc.c:92:13: note:   can narrow to unsigned:18 without loss of precision: _3 = _2 * 1024;
tsvc.c:92:13: note:   _2 has range [0x1, 0xff]
tsvc.c:92:13: note:   === vect_pattern_recog ===
tsvc.c:92:13: note:   vect_is_simple_use: operand (long unsigned int) j_34, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   vect_is_simple_use: operand (long unsigned int) j_34, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   vect_recog_widen_mult_pattern: detected: _3 = _2 * 1024;
tsvc.c:92:13: note:   widen_mult pattern recognized: patt_43 = (long unsigned int) patt_44;
tsvc.c:92:13: note:   extra pattern stmt: patt_44 = j_34 w* 1024;
tsvc.c:92:13: note:   vect_is_simple_use: operand _2 * 1024, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 w* 1024, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:92:13: note:   Detected single element interleaving (*_5)[i_33] step 1024
tsvc.c:92:13: missed:   not consecutive access (*_12)[i_33] = _13;
tsvc.c:92:13: note:   using strided accesses
tsvc.c:92:13: note:   Detected single element interleaving (*_7)[i_33] step 1024
tsvc.c:92:13: note:   Detected single element interleaving (*_10)[i_33] step 1024
tsvc.c:92:13: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:92:13: note:   init: phi relevant? j_34 = PHI <1(7), j_24(9)>
tsvc.c:92:13: note:   init: phi relevant? .MEM_35 = PHI <.MEM_36(7), .MEM_23(9)>
tsvc.c:92:13: note:   init: phi relevant? ivtmp_17 = PHI <255(7), ivtmp_54(9)>
tsvc.c:92:13: note:   init: stmt relevant? _2 = (long unsigned int) j_34;
tsvc.c:92:13: note:   init: stmt relevant? _3 = _2 * 1024;
tsvc.c:92:13: note:   init: stmt relevant? _4 = _3 + 18446744073709550592;
tsvc.c:92:13: note:   init: stmt relevant? _5 = ff_20(D) + _4;
tsvc.c:92:13: note:   init: stmt relevant? _6 = (*_5)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _7 = gg_21(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _8 = (*_7)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:92:13: note:   init: stmt relevant? _10 = hh_22(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _11 = (*_10)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _12 = ff_20(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _13 = _9 + _11;
tsvc.c:92:13: note:   init: stmt relevant? (*_12)[i_33] = _13;
tsvc.c:92:13: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:92:13: note:   mark relevant 5, live 0: (*_12)[i_33] = _13;
tsvc.c:92:13: note:   init: stmt relevant? j_24 = j_34 + 1;
tsvc.c:92:13: note:   init: stmt relevant? ivtmp_54 = ivtmp_17 - 1;
tsvc.c:92:13: note:   init: stmt relevant? if (ivtmp_54 != 0)
tsvc.c:92:13: note:   worklist: examine stmt: (*_12)[i_33] = _13;
tsvc.c:92:13: note:   vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _13 = _9 + _11;
tsvc.c:92:13: note:   worklist: examine stmt: _13 = _9 + _11;
tsvc.c:92:13: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_10)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _11 = (*_10)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _11 = (*_10)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_5)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _6 = (*_5)[i_33];
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_7)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _8 = (*_7)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _8 = (*_7)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _6 = (*_5)[i_33];
tsvc.c:92:13: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _6 = (*_5)[i_33];
  stmt_b: _8 = (*_7)[i_33];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = (*_5)[i_33];
  stmt_b: _11 = (*_10)[i_33];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = (*_5)[i_33];
  stmt_b: (*_12)[i_33] = _13;
(analyze_overlapping_iterations 
  (chrec_a = i_33)
  (chrec_b = i_33)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1024}_2)
  (chrec_b = {1024B, +, 1024}_2)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: _8 = (*_7)[i_33];
  stmt_b: _11 = (*_10)[i_33];
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = (*_7)[i_33];
  stmt_b: (*_12)[i_33] = _13;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = (*_10)[i_33];
  stmt_b: (*_12)[i_33] = _13;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = (*_5)[i_33];
  stmt_b: _6 = (*_5)[i_33];
(analyze_overlapping_iterations 
  (chrec_a = i_33)
  (chrec_b = i_33)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 1024}_2)
  (chrec_b = {0B, +, 1024}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = (*_7)[i_33];
  stmt_b: _8 = (*_7)[i_33];
(analyze_overlapping_iterations 
  (chrec_a = i_33)
  (chrec_b = i_33)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {1024B, +, 1024}_2)
  (chrec_b = {1024B, +, 1024}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _11 = (*_10)[i_33];
  stmt_b: _11 = (*_10)[i_33];
(analyze_overlapping_iterations 
  (chrec_a = i_33)
  (chrec_b = i_33)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {1024B, +, 1024}_2)
  (chrec_b = {1024B, +, 1024}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: (*_12)[i_33] = _13;
  stmt_b: (*_12)[i_33] = _13;
(analyze_overlapping_iterations 
  (chrec_a = i_33)
  (chrec_b = i_33)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
(analyze_overlapping_iterations 
  (chrec_a = {1024B, +, 1024}_2)
  (chrec_b = {1024B, +, 1024}_2)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:92:13: note:   dependence distance  = 1.
tsvc.c:94:37: missed:   not vectorized, possible dependence between data-refs (*_5)[i_33] and (*_12)[i_33]
tsvc.c:92:13: missed:  bad data dependence.
tsvc.c:92:13: note:  ***** Analysis failed with vector mode V8SI
tsvc.c:92:13: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:92:13: note:  ***** Re-trying analysis with vector mode V16QI
tsvc.c:92:13: note:   === vect_analyze_loop_form ===
tsvc.c:92:13: note:    === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [254, + , 4294967295] != 0
  bounds on difference of bases: -254 ... -254
  result:
    # of iterations 254, bounded by 254
tsvc.c:92:13: note:   === vect_analyze_data_refs ===
tsvc.c:92:13: note:   got vectype for stmt: _6 = (*_5)[i_33];
vector(4) int
tsvc.c:92:13: note:   got vectype for stmt: _8 = (*_7)[i_33];
vector(4) int
tsvc.c:92:13: note:   got vectype for stmt: _11 = (*_10)[i_33];
vector(4) int
tsvc.c:92:13: note:   got vectype for stmt: (*_12)[i_33] = _13;
vector(4) int
tsvc.c:92:13: note:   === vect_analyze_scalar_cycles ===
tsvc.c:92:13: note:   Analyze phi: j_34 = PHI <1(7), j_24(9)>
tsvc.c:92:13: note:   Access function of PHI: {1, +, 1}_2
tsvc.c:92:13: note:   step: 1,  init: 1
tsvc.c:92:13: note:   Detected induction.
tsvc.c:92:13: note:   Analyze phi: .MEM_35 = PHI <.MEM_36(7), .MEM_23(9)>
tsvc.c:92:13: note:   Analyze phi: ivtmp_17 = PHI <255(7), ivtmp_54(9)>
tsvc.c:92:13: note:   Access function of PHI: {255, +, 4294967295}_2
tsvc.c:92:13: note:   step: 4294967295,  init: 255
tsvc.c:92:13: note:   Detected induction.
tsvc.c:92:13: note:   === vect_determine_precisions ===
tsvc.c:92:13: note:   ivtmp_54 has no range info
tsvc.c:92:13: note:   j_24 has range [0x2, 0x100]
tsvc.c:92:13: note:   can narrow to unsigned:9 without loss of precision: j_24 = j_34 + 1;
tsvc.c:92:13: note:   _13 has no range info
tsvc.c:92:13: note:   _11 has no range info
tsvc.c:92:13: note:   _9 has no range info
tsvc.c:92:13: note:   _8 has no range info
tsvc.c:92:13: note:   _6 has no range info
tsvc.c:92:13: note:   _4 has range [0x0, 0x3f800]
tsvc.c:92:13: note:   can narrow to unsigned:18 without loss of precision: _4 = _3 + 18446744073709550592;
tsvc.c:92:13: note:   _3 has range [0x400, 0x3fc00]
tsvc.c:92:13: note:   can narrow to unsigned:18 without loss of precision: _3 = _2 * 1024;
tsvc.c:92:13: note:   _2 has range [0x1, 0xff]
tsvc.c:92:13: note:   === vect_pattern_recog ===
tsvc.c:92:13: note:   vect_is_simple_use: operand (long unsigned int) j_34, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   vect_is_simple_use: operand (long unsigned int) j_34, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   vect_recog_widen_mult_pattern: detected: _3 = _2 * 1024;
tsvc.c:92:13: note:   widen_mult pattern recognized: patt_40 = (long unsigned int) patt_42;
tsvc.c:92:13: note:   extra pattern stmt: patt_42 = j_34 w* 1024;
tsvc.c:92:13: note:   vect_is_simple_use: operand _2 * 1024, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 w* 1024, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:92:13: note:   Detected single element interleaving (*_5)[i_33] step 1024
tsvc.c:92:13: missed:   not consecutive access (*_12)[i_33] = _13;
tsvc.c:92:13: note:   using strided accesses
tsvc.c:92:13: note:   Detected single element interleaving (*_7)[i_33] step 1024
tsvc.c:92:13: note:   Detected single element interleaving (*_10)[i_33] step 1024
tsvc.c:92:13: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:92:13: note:   init: phi relevant? j_34 = PHI <1(7), j_24(9)>
tsvc.c:92:13: note:   init: phi relevant? .MEM_35 = PHI <.MEM_36(7), .MEM_23(9)>
tsvc.c:92:13: note:   init: phi relevant? ivtmp_17 = PHI <255(7), ivtmp_54(9)>
tsvc.c:92:13: note:   init: stmt relevant? _2 = (long unsigned int) j_34;
tsvc.c:92:13: note:   init: stmt relevant? _3 = _2 * 1024;
tsvc.c:92:13: note:   init: stmt relevant? _4 = _3 + 18446744073709550592;
tsvc.c:92:13: note:   init: stmt relevant? _5 = ff_20(D) + _4;
tsvc.c:92:13: note:   init: stmt relevant? _6 = (*_5)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _7 = gg_21(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _8 = (*_7)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:92:13: note:   init: stmt relevant? _10 = hh_22(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _11 = (*_10)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _12 = ff_20(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _13 = _9 + _11;
tsvc.c:92:13: note:   init: stmt relevant? (*_12)[i_33] = _13;
tsvc.c:92:13: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:92:13: note:   mark relevant 5, live 0: (*_12)[i_33] = _13;
tsvc.c:92:13: note:   init: stmt relevant? j_24 = j_34 + 1;
tsvc.c:92:13: note:   init: stmt relevant? ivtmp_54 = ivtmp_17 - 1;
tsvc.c:92:13: note:   init: stmt relevant? if (ivtmp_54 != 0)
tsvc.c:92:13: note:   worklist: examine stmt: (*_12)[i_33] = _13;
tsvc.c:92:13: note:   vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _13 = _9 + _11;
tsvc.c:92:13: note:   worklist: examine stmt: _13 = _9 + _11;
tsvc.c:92:13: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_10)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _11 = (*_10)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _11 = (*_10)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_5)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _6 = (*_5)[i_33];
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_7)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _8 = (*_7)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _8 = (*_7)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _6 = (*_5)[i_33];
tsvc.c:92:13: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:92:13: note:   dependence distance  = 1.
tsvc.c:94:37: missed:   not vectorized, possible dependence between data-refs (*_5)[i_33] and (*_12)[i_33]
tsvc.c:92:13: missed:  bad data dependence.
tsvc.c:92:13: note:  ***** Analysis failed with vector mode V16QI
tsvc.c:92:13: note:  ***** Re-trying analysis with vector mode V8QI
tsvc.c:92:13: note:   === vect_analyze_loop_form ===
tsvc.c:92:13: note:    === get_loop_niters ===
Analyzing # of iterations of loop 2
  exit condition [254, + , 4294967295] != 0
  bounds on difference of bases: -254 ... -254
  result:
    # of iterations 254, bounded by 254
tsvc.c:92:13: note:   === vect_analyze_data_refs ===
tsvc.c:92:13: note:   got vectype for stmt: _6 = (*_5)[i_33];
vector(2) int
tsvc.c:92:13: note:   got vectype for stmt: _8 = (*_7)[i_33];
vector(2) int
tsvc.c:92:13: note:   got vectype for stmt: _11 = (*_10)[i_33];
vector(2) int
tsvc.c:92:13: note:   got vectype for stmt: (*_12)[i_33] = _13;
vector(2) int
tsvc.c:92:13: note:   === vect_analyze_scalar_cycles ===
tsvc.c:92:13: note:   Analyze phi: j_34 = PHI <1(7), j_24(9)>
tsvc.c:92:13: note:   Access function of PHI: {1, +, 1}_2
tsvc.c:92:13: note:   step: 1,  init: 1
tsvc.c:92:13: note:   Detected induction.
tsvc.c:92:13: note:   Analyze phi: .MEM_35 = PHI <.MEM_36(7), .MEM_23(9)>
tsvc.c:92:13: note:   Analyze phi: ivtmp_17 = PHI <255(7), ivtmp_54(9)>
tsvc.c:92:13: note:   Access function of PHI: {255, +, 4294967295}_2
tsvc.c:92:13: note:   step: 4294967295,  init: 255
tsvc.c:92:13: note:   Detected induction.
tsvc.c:92:13: note:   === vect_determine_precisions ===
tsvc.c:92:13: note:   ivtmp_54 has no range info
tsvc.c:92:13: note:   j_24 has range [0x2, 0x100]
tsvc.c:92:13: note:   can narrow to unsigned:9 without loss of precision: j_24 = j_34 + 1;
tsvc.c:92:13: note:   _13 has no range info
tsvc.c:92:13: note:   _11 has no range info
tsvc.c:92:13: note:   _9 has no range info
tsvc.c:92:13: note:   _8 has no range info
tsvc.c:92:13: note:   _6 has no range info
tsvc.c:92:13: note:   _4 has range [0x0, 0x3f800]
tsvc.c:92:13: note:   can narrow to unsigned:18 without loss of precision: _4 = _3 + 18446744073709550592;
tsvc.c:92:13: note:   _3 has range [0x400, 0x3fc00]
tsvc.c:92:13: note:   can narrow to unsigned:18 without loss of precision: _3 = _2 * 1024;
tsvc.c:92:13: note:   _2 has range [0x1, 0xff]
tsvc.c:92:13: note:   === vect_pattern_recog ===
tsvc.c:92:13: note:   vect_is_simple_use: operand (long unsigned int) j_34, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   vect_is_simple_use: operand (long unsigned int) j_34, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   vect_recog_widen_mult_pattern: detected: _3 = _2 * 1024;
tsvc.c:92:13: note:   vect_is_simple_use: operand _2 * 1024, type of def: internal
tsvc.c:92:13: note:   vect_is_simple_use: operand j_34 = PHI <1(7), j_24(9)>, type of def: induction
tsvc.c:92:13: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:92:13: note:   Detected single element interleaving (*_5)[i_33] step 1024
tsvc.c:92:13: missed:   not consecutive access (*_12)[i_33] = _13;
tsvc.c:92:13: note:   using strided accesses
tsvc.c:92:13: note:   Detected single element interleaving (*_7)[i_33] step 1024
tsvc.c:92:13: note:   Detected single element interleaving (*_10)[i_33] step 1024
tsvc.c:92:13: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:92:13: note:   init: phi relevant? j_34 = PHI <1(7), j_24(9)>
tsvc.c:92:13: note:   init: phi relevant? .MEM_35 = PHI <.MEM_36(7), .MEM_23(9)>
tsvc.c:92:13: note:   init: phi relevant? ivtmp_17 = PHI <255(7), ivtmp_54(9)>
tsvc.c:92:13: note:   init: stmt relevant? _2 = (long unsigned int) j_34;
tsvc.c:92:13: note:   init: stmt relevant? _3 = _2 * 1024;
tsvc.c:92:13: note:   init: stmt relevant? _4 = _3 + 18446744073709550592;
tsvc.c:92:13: note:   init: stmt relevant? _5 = ff_20(D) + _4;
tsvc.c:92:13: note:   init: stmt relevant? _6 = (*_5)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _7 = gg_21(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _8 = (*_7)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:92:13: note:   init: stmt relevant? _10 = hh_22(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _11 = (*_10)[i_33];
tsvc.c:92:13: note:   init: stmt relevant? _12 = ff_20(D) + _3;
tsvc.c:92:13: note:   init: stmt relevant? _13 = _9 + _11;
tsvc.c:92:13: note:   init: stmt relevant? (*_12)[i_33] = _13;
tsvc.c:92:13: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:92:13: note:   mark relevant 5, live 0: (*_12)[i_33] = _13;
tsvc.c:92:13: note:   init: stmt relevant? j_24 = j_34 + 1;
tsvc.c:92:13: note:   init: stmt relevant? ivtmp_54 = ivtmp_17 - 1;
tsvc.c:92:13: note:   init: stmt relevant? if (ivtmp_54 != 0)
tsvc.c:92:13: note:   worklist: examine stmt: (*_12)[i_33] = _13;
tsvc.c:92:13: note:   vect_is_simple_use: operand _9 + _11, type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _13 = _9 + _11;
tsvc.c:92:13: note:   worklist: examine stmt: _13 = _9 + _11;
tsvc.c:92:13: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_10)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _11 = (*_10)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _11 = (*_10)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_5)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _6 = (*_5)[i_33];
tsvc.c:92:13: note:   vect_is_simple_use: operand (*_7)[i_33], type of def: internal
tsvc.c:92:13: note:   mark relevant 5, live 0: _8 = (*_7)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _8 = (*_7)[i_33];
tsvc.c:92:13: note:   worklist: examine stmt: _6 = (*_5)[i_33];
tsvc.c:92:13: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:92:13: note:   dependence distance  = 1.
tsvc.c:94:37: missed:   not vectorized, possible dependence between data-refs (*_5)[i_33] and (*_12)[i_33]
tsvc.c:92:13: missed:  bad data dependence.
tsvc.c:92:13: note:  ***** Analysis failed with vector mode V8QI
tsvc.c:92:13: missed: couldn't vectorize loop
tsvc.c:86:6: note: vectorized 0 loops in function.
s275 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  int j;
  int i;
  int _1;
  long unsigned int _2;
  long unsigned int _3;
  sizetype _4;
  int[256] * _5;
  int _6;
  int[256] * _7;
  int _8;
  int _9;
  int[256] * _10;
  int _11;
  int[256] * _12;
  int _13;
  unsigned int ivtmp_17;
  unsigned int ivtmp_45;
  unsigned int ivtmp_53;
  unsigned int ivtmp_54;

  <bb 2> [local count: 312201]:

  <bb 3> [local count: 30907933]:
  # i_33 = PHI <0(2), i_25(8)>
  # ivtmp_53 = PHI <256(2), ivtmp_45(8)>
  _1 = (*ff_20(D))[i_33];
  if (_1 > 0)
    goto <bb 7>; [34.74%]
  else
    goto <bb 5>; [65.26%]

  <bb 7> [local count: 10737416]:

  <bb 4> [local count: 1063004408]:
  # j_34 = PHI <1(7), j_24(9)>
  # ivtmp_17 = PHI <255(7), ivtmp_54(9)>
  _2 = (long unsigned int) j_34;
  _3 = _2 * 1024;
  _4 = _3 + 18446744073709550592;
  _5 = ff_20(D) + _4;
  _6 = (*_5)[i_33];
  _7 = gg_21(D) + _3;
  _8 = (*_7)[i_33];
  _9 = _6 + _8;
  _10 = hh_22(D) + _3;
  _11 = (*_10)[i_33];
  _12 = ff_20(D) + _3;
  _13 = _9 + _11;
  (*_12)[i_33] = _13;
  j_24 = j_34 + 1;
  ivtmp_54 = ivtmp_17 - 1;
  if (ivtmp_54 != 0)
    goto <bb 9>; [98.99%]
  else
    goto <bb 5>; [1.01%]

  <bb 9> [local count: 1052266995]:
  goto <bb 4>; [100.00%]

  <bb 5> [local count: 30907933]:
  i_25 = i_33 + 1;
  ivtmp_45 = ivtmp_53 - 1;
  if (ivtmp_45 != 0)
    goto <bb 8>; [98.99%]
  else
    goto <bb 6>; [1.01%]

  <bb 8> [local count: 30595732]:
  goto <bb 3>; [100.00%]

  <bb 6> [local count: 312201]:
  return;

}



;; Function s276 (s276, funcdef_no=30, decl_uid=3655, cgraph_uid=31, symbol_order=30)


Analyzing loop at tsvc.c:101
tsvc.c:101:5: note:  === analyze_loop_nest ===
tsvc.c:101:5: note:   === vect_analyze_loop_form ===
tsvc.c:101:5: missed:   not vectorized: control flow in loop.
tsvc.c:101:5: missed:  bad loop form.
tsvc.c:101:5: missed: couldn't vectorize loop
tsvc.c:99:6: note: vectorized 0 loops in function.
s276 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  int i;
  int _4;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  int * _17;
  int _18;
  int _19;
  int _20;
  long unsigned int _61;
  long unsigned int _62;
  int * _63;
  int pretmp_64;
  int * _65;
  int pretmp_66;
  int _67;

  <bb 2> [local count: 10737416]:

  <bb 3> [local count: 1063004409]:
  # i_39 = PHI <0(2), _67(6)>
  _61 = (long unsigned int) i_39;
  _62 = _61 * 4;
  _63 = a_25(D) + _62;
  _65 = b_26(D) + _62;
  _67 = i_39 + 1;
  if (i_39 <= 32766)
    goto <bb 4>; [49.99%]
  else
    goto <bb 5>; [50.01%]

  <bb 4> [local count: 531395902]:
  _4 = *_63;
  _6 = *_65;
  _7 = c_29(D) + _62;
  _8 = *_7;
  _9 = _6 + _8;
  _10 = _4 + _9;
  *_63 = _10;
  goto <bb 6>; [100.00%]

  <bb 5> [local count: 531608507]:
  pretmp_64 = *_63;
  pretmp_66 = *_65;
  _17 = d_27(D) + _62;
  _18 = *_17;
  _19 = _18 + pretmp_66;
  _20 = _19 + pretmp_64;
  *_63 = _20;
  if (_67 != 65536)
    goto <bb 8>; [97.98%]
  else
    goto <bb 7>; [2.02%]

  <bb 8> [local count: 520871093]:

  <bb 6> [local count: 1052266996]:
  goto <bb 3>; [100.00%]

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s277 (s277, funcdef_no=31, decl_uid=3673, cgraph_uid=32, symbol_order=31)


Analyzing loop at tsvc.c:115
tsvc.c:115:5: note:  === analyze_loop_nest ===
tsvc.c:115:5: note:   === vect_analyze_loop_form ===
tsvc.c:115:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
Creating dr for *_3
analyze_innermost: success.
	base_address: a_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_30(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_30(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_65
analyze_innermost: success.
	base_address: c_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_67
analyze_innermost: success.
	base_address: d_32(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_32(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_29(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_29(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_65
analyze_innermost: success.
	base_address: c_31(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_31(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_67
analyze_innermost: success.
	base_address: d_32(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_32(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_18
analyze_innermost: success.
	base_address: e_34(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_34(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_22
analyze_innermost: success.
	base_address: b_30(D)
	offset from base address: 0
	constant offset from base address: 4
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_30(D)
	Access function 0: {4B, +, 4}_1
tsvc.c:115:5: note:   === vect_analyze_data_refs ===
tsvc.c:115:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _79);
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: .MASK_STORE (_3, 32B, _42, _12);
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: _14 = .MASK_LOAD (_65, 32B, _79);
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: _16 = .MASK_LOAD (_67, 32B, _79);
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: _19 = .MASK_LOAD (_18, 32B, _79);
vector(8) int
tsvc.c:115:5: note:   got vectype for stmt: .MASK_STORE (_22, 32B, _79, _23);
vector(8) int
tsvc.c:115:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:115:5: note:   Analyze phi: i_43 = PHI <_70(9), 0(21)>
tsvc.c:115:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:115:5: note:   step: 1,  init: 0
tsvc.c:115:5: note:   Detected induction.
tsvc.c:115:5: note:   Analyze phi: .MEM_44 = PHI <.MEM_35(9), .MEM_28(D)(21)>
tsvc.c:115:5: note:   Analyze phi: ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
tsvc.c:115:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:115:5: note:   step: 4294967295,  init: 65535
tsvc.c:115:5: note:   Detected induction.
tsvc.c:115:5: note:   === vect_determine_precisions ===
tsvc.c:115:5: note:   ivtmp_57 has no range info
tsvc.c:115:5: note:   _23 has no range info
tsvc.c:115:5: note:   _21 has no range info
tsvc.c:115:5: note:   _20 has no range info
tsvc.c:115:5: note:   _17 has no range info
tsvc.c:115:5: note:   _12 has no range info
tsvc.c:115:5: note:   _69 has no range info
tsvc.c:115:5: note:   using boolean precision 32 for _79 = _4 < 0;
tsvc.c:115:5: note:   using boolean precision 32 for _54 = _6 >= 0;
tsvc.c:115:5: note:   using boolean precision 32 for _45 = ~_54;
tsvc.c:115:5: note:   using boolean precision 32 for _42 = _45 & _79;
tsvc.c:115:5: note:   _70 has no range info
tsvc.c:115:5: note:   _4 has no range info
tsvc.c:115:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:115:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:115:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:115:5: note:   === vect_pattern_recog ===
tsvc.c:115:5: note:   vect_is_simple_use: operand (long unsigned int) i_43, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 = PHI <_70(9), 0(21)>, type of def: induction
tsvc.c:115:5: note:   vect_is_simple_use: operand (long unsigned int) i_43, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 = PHI <_70(9), 0(21)>, type of def: induction
tsvc.c:115:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:115:5: note:   widen_mult pattern recognized: patt_53 = (long unsigned int) patt_78;
tsvc.c:115:5: note:   extra pattern stmt: patt_78 = i_43 w* 4;
tsvc.c:115:5: note:   vect_is_simple_use: operand (sizetype) _70, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 + 1, type of def: internal
tsvc.c:115:5: note:   vect_recog_widen_mult_pattern: detected: _21 = _20 * 4;
tsvc.c:115:5: note:   widen_mult pattern recognized: patt_55 = (sizetype) patt_56;
tsvc.c:115:5: note:   extra pattern stmt: patt_56 = _70 w* 4;
tsvc.c:115:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:115:5: note:   Detected interleaving load *_65 and *_65
tsvc.c:115:5: note:   Load suitable for SLP vectorization only.
tsvc.c:115:5: note:   Queuing group with duplicate access for fixup
tsvc.c:115:5: note:   Detected interleaving load *_67 and *_67
tsvc.c:115:5: note:   Load suitable for SLP vectorization only.
tsvc.c:115:5: note:   Queuing group with duplicate access for fixup
tsvc.c:115:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:115:5: note:   init: phi relevant? i_43 = PHI <_70(9), 0(21)>
tsvc.c:115:5: note:   init: phi relevant? .MEM_44 = PHI <.MEM_35(9), .MEM_28(D)(21)>
tsvc.c:115:5: note:   init: phi relevant? ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
tsvc.c:115:5: note:   init: stmt relevant? _1 = (long unsigned int) i_43;
tsvc.c:115:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:115:5: note:   init: stmt relevant? _3 = a_29(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:115:5: note:   init: stmt relevant? _70 = i_43 + 1;
tsvc.c:115:5: note:   init: stmt relevant? _5 = b_30(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _79 = _4 < 0;
tsvc.c:115:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _65 = c_31(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _67 = d_32(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _54 = _6 >= 0;
tsvc.c:115:5: note:   init: stmt relevant? _45 = ~_54;
tsvc.c:115:5: note:   init: stmt relevant? _42 = _45 & _79;
tsvc.c:115:5: note:   init: stmt relevant? pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   init: stmt relevant? pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   init: stmt relevant? _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   init: stmt relevant? _12 = _4 + _69;
tsvc.c:115:5: note:   init: stmt relevant? .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:115:5: note:   mark relevant 5, live 0: .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   init: stmt relevant? _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _17 = _14 + _16;
tsvc.c:115:5: note:   init: stmt relevant? _18 = e_34(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _20 = (sizetype) _70;
tsvc.c:115:5: note:   init: stmt relevant? _21 = _20 * 4;
tsvc.c:115:5: note:   init: stmt relevant? _22 = b_30(D) + _21;
tsvc.c:115:5: note:   init: stmt relevant? _23 = _17 + _19;
tsvc.c:115:5: note:   init: stmt relevant? .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:115:5: note:   mark relevant 5, live 0: .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   init: stmt relevant? ivtmp_57 = ivtmp_58 - 1;
tsvc.c:115:5: note:   init: stmt relevant? if (ivtmp_57 != 0)
tsvc.c:115:5: note:   worklist: examine stmt: .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand _17 + _19, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _23 = _17 + _19;
tsvc.c:115:5: note:   worklist: examine stmt: _23 = _17 + _19;
tsvc.c:115:5: note:   vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _17 = _14 + _16;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_18, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _17 = _14 + _16;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_65, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_67, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _79 = _4 < 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:115:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:115:5: note:   worklist: examine stmt: .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 + _69, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _12 = _4 + _69;
tsvc.c:115:5: note:   worklist: examine stmt: _12 = _4 + _69;
tsvc.c:115:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   vect_is_simple_use: operand pretmp_66 + pretmp_68, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   worklist: examine stmt: _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_65, 32B, _42), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_67, 32B, _42), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   worklist: examine stmt: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _42 = _45 & _79;
tsvc.c:115:5: note:   vect_is_simple_use: operand ~_54, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _45 = ~_54;
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _45 = ~_54;
tsvc.c:115:5: note:   vect_is_simple_use: operand _6 >= 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _54 = _6 >= 0;
tsvc.c:115:5: note:   worklist: examine stmt: _54 = _6 >= 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_3, 32B, _42, _12);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _14 = .MASK_LOAD (_65, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _16 = .MASK_LOAD (_67, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: .MASK_STORE (_3, 32B, _42, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: _14 = .MASK_LOAD (_65, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: _16 = .MASK_LOAD (_67, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {4B, +, 4}_1)
(analyze_siv_subscript 
(analyze_subscript_affine_affine 
  (overlaps_a = [1 + 1 * x_1])
  (overlaps_b = [0 + 1 * x_1]))
)
  (overlap_iterations_a = [1 + 1 * x_1])
  (overlap_iterations_b = [0 + 1 * x_1]))
(build_classic_dist_vector
  dist_vector = (  1 
  )
)
)
(compute_affine_dependence
  stmt_a: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  stmt_b: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  stmt_b: .MASK_STORE (_3, 32B, _42, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  stmt_b: _14 = .MASK_LOAD (_65, 32B, _79);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  stmt_b: _16 = .MASK_LOAD (_67, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
  stmt_b: .MASK_STORE (_3, 32B, _42, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
  stmt_b: _14 = .MASK_LOAD (_65, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
  stmt_b: _16 = .MASK_LOAD (_67, 32B, _79);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _42, _12);
  stmt_b: _14 = .MASK_LOAD (_65, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _42, _12);
  stmt_b: _16 = .MASK_LOAD (_67, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _42, _12);
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _42, _12);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = .MASK_LOAD (_65, 32B, _79);
  stmt_b: _16 = .MASK_LOAD (_67, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = .MASK_LOAD (_65, 32B, _79);
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = .MASK_LOAD (_65, 32B, _79);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_67, 32B, _79);
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_67, 32B, _79);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _19 = .MASK_LOAD (_18, 32B, _79);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _79);
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _79);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
  stmt_b: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
  stmt_b: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _42, _12);
  stmt_b: .MASK_STORE (_3, 32B, _42, _12);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _14 = .MASK_LOAD (_65, 32B, _79);
  stmt_b: _14 = .MASK_LOAD (_65, 32B, _79);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_67, 32B, _79);
  stmt_b: _16 = .MASK_LOAD (_67, 32B, _79);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _19 = .MASK_LOAD (_18, 32B, _79);
  stmt_b: _19 = .MASK_LOAD (_18, 32B, _79);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_22, 32B, _79, _23);
  stmt_b: .MASK_STORE (_22, 32B, _79, _23);
(analyze_overlapping_iterations 
  (chrec_a = {4B, +, 4}_1)
  (chrec_b = {4B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:115:5: note:   dependence distance  = 0.
tsvc.c:115:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:117:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_22
consider run-time aliasing test between *_3 and *_22
tsvc.c:121:14: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:115:5: note:   dependence distance  = 1.
tsvc.c:121:14: missed:   not vectorized, possible dependence between data-refs *_5 and *_22
tsvc.c:115:5: missed:  bad data dependence.
tsvc.c:115:5: note:  ***** Analysis failed with vector mode V8SI
tsvc.c:115:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:115:5: note:  ***** Re-trying analysis with vector mode V16QI
tsvc.c:115:5: note:   === vect_analyze_loop_form ===
tsvc.c:115:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
tsvc.c:115:5: note:   === vect_analyze_data_refs ===
tsvc.c:115:5: note:   got vectype for stmt: _4 = *_3;
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _79);
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: .MASK_STORE (_3, 32B, _42, _12);
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: _14 = .MASK_LOAD (_65, 32B, _79);
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: _16 = .MASK_LOAD (_67, 32B, _79);
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: _19 = .MASK_LOAD (_18, 32B, _79);
vector(4) int
tsvc.c:115:5: note:   got vectype for stmt: .MASK_STORE (_22, 32B, _79, _23);
vector(4) int
tsvc.c:115:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:115:5: note:   Analyze phi: i_43 = PHI <_70(9), 0(21)>
tsvc.c:115:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:115:5: note:   step: 1,  init: 0
tsvc.c:115:5: note:   Detected induction.
tsvc.c:115:5: note:   Analyze phi: .MEM_44 = PHI <.MEM_35(9), .MEM_28(D)(21)>
tsvc.c:115:5: note:   Analyze phi: ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
tsvc.c:115:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:115:5: note:   step: 4294967295,  init: 65535
tsvc.c:115:5: note:   Detected induction.
tsvc.c:115:5: note:   === vect_determine_precisions ===
tsvc.c:115:5: note:   ivtmp_57 has no range info
tsvc.c:115:5: note:   _23 has no range info
tsvc.c:115:5: note:   _21 has no range info
tsvc.c:115:5: note:   _20 has no range info
tsvc.c:115:5: note:   _17 has no range info
tsvc.c:115:5: note:   _12 has no range info
tsvc.c:115:5: note:   _69 has no range info
tsvc.c:115:5: note:   using boolean precision 32 for _79 = _4 < 0;
tsvc.c:115:5: note:   using boolean precision 32 for _54 = _6 >= 0;
tsvc.c:115:5: note:   using boolean precision 32 for _45 = ~_54;
tsvc.c:115:5: note:   using boolean precision 32 for _42 = _45 & _79;
tsvc.c:115:5: note:   _70 has no range info
tsvc.c:115:5: note:   _4 has no range info
tsvc.c:115:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:115:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:115:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:115:5: note:   === vect_pattern_recog ===
tsvc.c:115:5: note:   vect_is_simple_use: operand (long unsigned int) i_43, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 = PHI <_70(9), 0(21)>, type of def: induction
tsvc.c:115:5: note:   vect_is_simple_use: operand (long unsigned int) i_43, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 = PHI <_70(9), 0(21)>, type of def: induction
tsvc.c:115:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:115:5: note:   widen_mult pattern recognized: patt_47 = (long unsigned int) patt_48;
tsvc.c:115:5: note:   extra pattern stmt: patt_48 = i_43 w* 4;
tsvc.c:115:5: note:   vect_is_simple_use: operand (sizetype) _70, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 + 1, type of def: internal
tsvc.c:115:5: note:   vect_recog_widen_mult_pattern: detected: _21 = _20 * 4;
tsvc.c:115:5: note:   widen_mult pattern recognized: patt_80 = (sizetype) patt_46;
tsvc.c:115:5: note:   extra pattern stmt: patt_46 = _70 w* 4;
tsvc.c:115:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:115:5: note:   Detected interleaving load *_65 and *_65
tsvc.c:115:5: note:   Load suitable for SLP vectorization only.
tsvc.c:115:5: note:   Queuing group with duplicate access for fixup
tsvc.c:115:5: note:   Detected interleaving load *_67 and *_67
tsvc.c:115:5: note:   Load suitable for SLP vectorization only.
tsvc.c:115:5: note:   Queuing group with duplicate access for fixup
tsvc.c:115:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:115:5: note:   init: phi relevant? i_43 = PHI <_70(9), 0(21)>
tsvc.c:115:5: note:   init: phi relevant? .MEM_44 = PHI <.MEM_35(9), .MEM_28(D)(21)>
tsvc.c:115:5: note:   init: phi relevant? ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
tsvc.c:115:5: note:   init: stmt relevant? _1 = (long unsigned int) i_43;
tsvc.c:115:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:115:5: note:   init: stmt relevant? _3 = a_29(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:115:5: note:   init: stmt relevant? _70 = i_43 + 1;
tsvc.c:115:5: note:   init: stmt relevant? _5 = b_30(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _79 = _4 < 0;
tsvc.c:115:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _65 = c_31(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _67 = d_32(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _54 = _6 >= 0;
tsvc.c:115:5: note:   init: stmt relevant? _45 = ~_54;
tsvc.c:115:5: note:   init: stmt relevant? _42 = _45 & _79;
tsvc.c:115:5: note:   init: stmt relevant? pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   init: stmt relevant? pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   init: stmt relevant? _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   init: stmt relevant? _12 = _4 + _69;
tsvc.c:115:5: note:   init: stmt relevant? .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:115:5: note:   mark relevant 5, live 0: .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   init: stmt relevant? _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _17 = _14 + _16;
tsvc.c:115:5: note:   init: stmt relevant? _18 = e_34(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _20 = (sizetype) _70;
tsvc.c:115:5: note:   init: stmt relevant? _21 = _20 * 4;
tsvc.c:115:5: note:   init: stmt relevant? _22 = b_30(D) + _21;
tsvc.c:115:5: note:   init: stmt relevant? _23 = _17 + _19;
tsvc.c:115:5: note:   init: stmt relevant? .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:115:5: note:   mark relevant 5, live 0: .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   init: stmt relevant? ivtmp_57 = ivtmp_58 - 1;
tsvc.c:115:5: note:   init: stmt relevant? if (ivtmp_57 != 0)
tsvc.c:115:5: note:   worklist: examine stmt: .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand _17 + _19, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _23 = _17 + _19;
tsvc.c:115:5: note:   worklist: examine stmt: _23 = _17 + _19;
tsvc.c:115:5: note:   vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _17 = _14 + _16;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_18, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _17 = _14 + _16;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_65, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_67, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _79 = _4 < 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:115:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:115:5: note:   worklist: examine stmt: .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 + _69, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _12 = _4 + _69;
tsvc.c:115:5: note:   worklist: examine stmt: _12 = _4 + _69;
tsvc.c:115:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   vect_is_simple_use: operand pretmp_66 + pretmp_68, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   worklist: examine stmt: _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_65, 32B, _42), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_67, 32B, _42), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   worklist: examine stmt: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _42 = _45 & _79;
tsvc.c:115:5: note:   vect_is_simple_use: operand ~_54, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _45 = ~_54;
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _45 = ~_54;
tsvc.c:115:5: note:   vect_is_simple_use: operand _6 >= 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _54 = _6 >= 0;
tsvc.c:115:5: note:   worklist: examine stmt: _54 = _6 >= 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:115:5: note:   dependence distance  = 0.
tsvc.c:115:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:117:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_22
consider run-time aliasing test between *_3 and *_22
tsvc.c:121:14: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:115:5: note:   dependence distance  = 1.
tsvc.c:121:14: missed:   not vectorized, possible dependence between data-refs *_5 and *_22
tsvc.c:115:5: missed:  bad data dependence.
tsvc.c:115:5: note:  ***** Analysis failed with vector mode V16QI
tsvc.c:115:5: note:  ***** Re-trying analysis with vector mode V8QI
tsvc.c:115:5: note:   === vect_analyze_loop_form ===
tsvc.c:115:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65534, + , 4294967295] != 0
  bounds on difference of bases: -65534 ... -65534
  result:
    # of iterations 65534, bounded by 65534
tsvc.c:115:5: note:   === vect_analyze_data_refs ===
tsvc.c:115:5: note:   got vectype for stmt: _4 = *_3;
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _79);
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: .MASK_STORE (_3, 32B, _42, _12);
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: _14 = .MASK_LOAD (_65, 32B, _79);
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: _16 = .MASK_LOAD (_67, 32B, _79);
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: _19 = .MASK_LOAD (_18, 32B, _79);
vector(2) int
tsvc.c:115:5: note:   got vectype for stmt: .MASK_STORE (_22, 32B, _79, _23);
vector(2) int
tsvc.c:115:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:115:5: note:   Analyze phi: i_43 = PHI <_70(9), 0(21)>
tsvc.c:115:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:115:5: note:   step: 1,  init: 0
tsvc.c:115:5: note:   Detected induction.
tsvc.c:115:5: note:   Analyze phi: .MEM_44 = PHI <.MEM_35(9), .MEM_28(D)(21)>
tsvc.c:115:5: note:   Analyze phi: ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
tsvc.c:115:5: note:   Access function of PHI: {65535, +, 4294967295}_1
tsvc.c:115:5: note:   step: 4294967295,  init: 65535
tsvc.c:115:5: note:   Detected induction.
tsvc.c:115:5: note:   === vect_determine_precisions ===
tsvc.c:115:5: note:   ivtmp_57 has no range info
tsvc.c:115:5: note:   _23 has no range info
tsvc.c:115:5: note:   _21 has no range info
tsvc.c:115:5: note:   _20 has no range info
tsvc.c:115:5: note:   _17 has no range info
tsvc.c:115:5: note:   _12 has no range info
tsvc.c:115:5: note:   _69 has no range info
tsvc.c:115:5: note:   using normal nonmask vectors for _79 = _4 < 0;
tsvc.c:115:5: note:   using normal nonmask vectors for _54 = _6 >= 0;
tsvc.c:115:5: note:   using normal nonmask vectors for _45 = ~_54;
tsvc.c:115:5: note:   using normal nonmask vectors for _42 = _45 & _79;
tsvc.c:115:5: note:   _70 has no range info
tsvc.c:115:5: note:   _4 has no range info
tsvc.c:115:5: note:   _2 has range [0x0, 0x3fff8]
tsvc.c:115:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:115:5: note:   _1 has range [0x0, 0xfffe]
tsvc.c:115:5: note:   === vect_pattern_recog ===
tsvc.c:115:5: note:   vect_is_simple_use: operand (long unsigned int) i_43, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 = PHI <_70(9), 0(21)>, type of def: induction
tsvc.c:115:5: note:   vect_is_simple_use: operand (long unsigned int) i_43, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 = PHI <_70(9), 0(21)>, type of def: induction
tsvc.c:115:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:115:5: note:   vect_is_simple_use: operand (sizetype) _70, type of def: internal
tsvc.c:115:5: note:   vect_is_simple_use: operand i_43 + 1, type of def: internal
tsvc.c:115:5: note:   vect_recog_widen_mult_pattern: detected: _21 = _20 * 4;
tsvc.c:115:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:115:5: note:   Detected interleaving load *_65 and *_65
tsvc.c:115:5: note:   Load suitable for SLP vectorization only.
tsvc.c:115:5: note:   Queuing group with duplicate access for fixup
tsvc.c:115:5: note:   Detected interleaving load *_67 and *_67
tsvc.c:115:5: note:   Load suitable for SLP vectorization only.
tsvc.c:115:5: note:   Queuing group with duplicate access for fixup
tsvc.c:115:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:115:5: note:   init: phi relevant? i_43 = PHI <_70(9), 0(21)>
tsvc.c:115:5: note:   init: phi relevant? .MEM_44 = PHI <.MEM_35(9), .MEM_28(D)(21)>
tsvc.c:115:5: note:   init: phi relevant? ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
tsvc.c:115:5: note:   init: stmt relevant? _1 = (long unsigned int) i_43;
tsvc.c:115:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:115:5: note:   init: stmt relevant? _3 = a_29(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:115:5: note:   init: stmt relevant? _70 = i_43 + 1;
tsvc.c:115:5: note:   init: stmt relevant? _5 = b_30(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _79 = _4 < 0;
tsvc.c:115:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _65 = c_31(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _67 = d_32(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _54 = _6 >= 0;
tsvc.c:115:5: note:   init: stmt relevant? _45 = ~_54;
tsvc.c:115:5: note:   init: stmt relevant? _42 = _45 & _79;
tsvc.c:115:5: note:   init: stmt relevant? pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   init: stmt relevant? pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   init: stmt relevant? _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   init: stmt relevant? _12 = _4 + _69;
tsvc.c:115:5: note:   init: stmt relevant? .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:115:5: note:   mark relevant 5, live 0: .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   init: stmt relevant? _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _17 = _14 + _16;
tsvc.c:115:5: note:   init: stmt relevant? _18 = e_34(D) + _2;
tsvc.c:115:5: note:   init: stmt relevant? _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   init: stmt relevant? _20 = (sizetype) _70;
tsvc.c:115:5: note:   init: stmt relevant? _21 = _20 * 4;
tsvc.c:115:5: note:   init: stmt relevant? _22 = b_30(D) + _21;
tsvc.c:115:5: note:   init: stmt relevant? _23 = _17 + _19;
tsvc.c:115:5: note:   init: stmt relevant? .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:115:5: note:   mark relevant 5, live 0: .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   init: stmt relevant? ivtmp_57 = ivtmp_58 - 1;
tsvc.c:115:5: note:   init: stmt relevant? if (ivtmp_57 != 0)
tsvc.c:115:5: note:   worklist: examine stmt: .MASK_STORE (_22, 32B, _79, _23);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand _17 + _19, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _23 = _17 + _19;
tsvc.c:115:5: note:   worklist: examine stmt: _23 = _17 + _19;
tsvc.c:115:5: note:   vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _17 = _14 + _16;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_18, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _19 = .MASK_LOAD (_18, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _17 = _14 + _16;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_65, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_67, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _16 = .MASK_LOAD (_67, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _14 = .MASK_LOAD (_65, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _79 = _4 < 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:115:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:115:5: note:   worklist: examine stmt: .MASK_STORE (_3, 32B, _42, _12);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 + _69, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _12 = _4 + _69;
tsvc.c:115:5: note:   worklist: examine stmt: _12 = _4 + _69;
tsvc.c:115:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   vect_is_simple_use: operand pretmp_66 + pretmp_68, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   worklist: examine stmt: _69 = pretmp_66 + pretmp_68;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_65, 32B, _42), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_67, 32B, _42), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   worklist: examine stmt: pretmp_68 = .MASK_LOAD (_67, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: pretmp_66 = .MASK_LOAD (_65, 32B, _42);
tsvc.c:115:5: note:   vect_is_simple_use: operand _45 & _79, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _42 = _45 & _79;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _42 = _45 & _79;
tsvc.c:115:5: note:   vect_is_simple_use: operand ~_54, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _45 = ~_54;
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   worklist: examine stmt: _45 = ~_54;
tsvc.c:115:5: note:   vect_is_simple_use: operand _6 >= 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _54 = _6 >= 0;
tsvc.c:115:5: note:   worklist: examine stmt: _54 = _6 >= 0;
tsvc.c:115:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _79), type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _79);
tsvc.c:115:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:115:5: note:   mark relevant 5, live 0: _79 = _4 < 0;
tsvc.c:115:5: note:   already marked relevant/live.
tsvc.c:115:5: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:115:5: note:   dependence distance  = 0.
tsvc.c:115:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:117:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_22
consider run-time aliasing test between *_3 and *_22
tsvc.c:121:14: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:115:5: note:   dependence distance  = 1.
tsvc.c:121:14: missed:   not vectorized, possible dependence between data-refs *_5 and *_22
tsvc.c:115:5: missed:  bad data dependence.
tsvc.c:115:5: note:  ***** Analysis failed with vector mode V8QI
tsvc.c:115:5: missed: couldn't vectorize loop
tsvc.c:113:6: note: vectorized 0 loops in function.
Removing basic block 3
;; basic block 3, loop depth 1
;;  pred:       9
;;              21
# i_43 = PHI <_70(9), 0(21)>
# ivtmp_58 = PHI <ivtmp_57(9), 65535(21)>
_1 = (long unsigned int) i_43;
_2 = _1 * 4;
_3 = a_29(D) + _2;
_4 = *_3;
_70 = i_43 + 1;
_5 = b_30(D) + _2;
_79 = _4 < 0;
_6 = .MASK_LOAD (_5, 32B, _79);
_65 = c_31(D) + _2;
_67 = d_32(D) + _2;
_54 = _6 >= 0;
_45 = ~_54;
_42 = _45 & _79;
pretmp_66 = .MASK_LOAD (_65, 32B, _42);
pretmp_68 = .MASK_LOAD (_67, 32B, _42);
_69 = pretmp_66 + pretmp_68;
_12 = _4 + _69;
.MASK_STORE (_3, 32B, _42, _12);
_14 = .MASK_LOAD (_65, 32B, _79);
_16 = .MASK_LOAD (_67, 32B, _79);
_17 = _14 + _16;
_18 = e_34(D) + _2;
_19 = .MASK_LOAD (_18, 32B, _79);
_20 = (sizetype) _70;
_21 = _20 * 4;
_22 = b_30(D) + _21;
_23 = _17 + _19;
.MASK_STORE (_22, 32B, _79, _23);
ivtmp_57 = ivtmp_58 - 1;
if (ivtmp_57 != 0)
  goto <bb 9>; [98.99%]
else
  goto <bb 8>; [1.01%]
;;  succ:       9
;;              8


Removing basic block 9
;; basic block 9, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 21
;; basic block 21, loop depth 0
;;  pred:      
;;  succ:      


Merging blocks 2 and 22
fix_loop_structure: fixing up loops for function
fix_loop_structure: removing loop 1
s277 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  int i;
  int _7;
  int * _8;
  int * _9;
  int _11;
  sizetype _13;
  sizetype _15;
  long unsigned int _24;
  long unsigned int _27;
  int pretmp_36;
  int * _37;
  unsigned int ivtmp_38;
  _Bool _41;
  int _49;
  int _50;
  int * _51;
  int * _52;
  int _59;
  int * _60;
  int _61;
  int _62;
  int _63;
  int pretmp_71;
  int _72;
  int _73;
  unsigned int ivtmp_76;

  <bb 2> [local count: 10737416]:
  _41 = 0;

  <bb 12> [local count: 1063004409]:
  # i_40 = PHI <_50(19), 0(2)>
  # ivtmp_38 = PHI <ivtmp_76(19), 65535(2)>
  _27 = (long unsigned int) i_40;
  _24 = _27 * 4;
  _52 = a_29(D) + _24;
  _49 = *_52;
  _50 = i_40 + 1;
  if (_49 >= 0)
    goto <bb 18>; [42.57%]
  else
    goto <bb 14>; [57.43%]

  <bb 14> [local count: 610483431]:
  _51 = b_30(D) + _24;
  _7 = *_51;
  _8 = c_31(D) + _24;
  _9 = d_32(D) + _24;
  if (_7 >= 0)
    goto <bb 16>; [42.57%]
  else
    goto <bb 17>; [57.43%]

  <bb 17> [local count: 350600633]:
  pretmp_36 = *_8;
  pretmp_71 = *_9;
  _72 = pretmp_36 + pretmp_71;
  _73 = _49 + _72;
  *_52 = _73;

  <bb 16> [local count: 610483431]:
  _11 = *_8;
  _59 = *_9;
  _61 = _11 + _59;
  _60 = e_34(D) + _24;
  _62 = *_60;
  _13 = (sizetype) _50;
  _15 = _13 * 4;
  _37 = b_30(D) + _15;
  _63 = _61 + _62;
  *_37 = _63;

  <bb 18> [local count: 1063004409]:
  ivtmp_76 = ivtmp_38 - 1;
  if (ivtmp_76 != 0)
    goto <bb 19>; [98.99%]
  else
    goto <bb 8>; [1.01%]

  <bb 19> [local count: 1052266996]:
  goto <bb 12>; [100.00%]

  <bb 8> [local count: 10737416]:
  return;

}



;; Function s278 (s278, funcdef_no=32, decl_uid=3691, cgraph_uid=33, symbol_order=32)


Analyzing loop at tsvc.c:133
tsvc.c:133:5: note:  === analyze_loop_nest ===
tsvc.c:133:5: note:   === vect_analyze_loop_form ===
tsvc.c:133:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: a_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_33(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_76
analyze_innermost: success.
	base_address: d_34(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_34(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_79
analyze_innermost: success.
	base_address: e_36(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_36(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_81
analyze_innermost: success.
	base_address: c_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_81
analyze_innermost: success.
	base_address: c_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_78
analyze_innermost: success.
	base_address: b_35(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_35(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_78
analyze_innermost: success.
	base_address: b_35(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_35(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_81
analyze_innermost: success.
	base_address: c_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_76
analyze_innermost: success.
	base_address: d_34(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_34(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_33(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_33(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:133:5: note:   === vect_analyze_data_refs ===
tsvc.c:133:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: pretmp_77 = *_76;
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: pretmp_80 = *_79;
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: _16 = *_81;
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: .MASK_STORE (_81, 32B, _68, _20);
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: pretmp_72 = *_78;
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: .MASK_STORE (_78, 32B, _69, _12);
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: pretmp_74 = *_81;
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: _27 = *_76;
vector(8) int
tsvc.c:133:5: note:   got vectype for stmt: *_3 = _28;
vector(8) int
tsvc.c:133:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:133:5: note:   Analyze phi: i_48 = PHI <i_41(8), 0(15)>
tsvc.c:133:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:133:5: note:   step: 1,  init: 0
tsvc.c:133:5: note:   Detected induction.
tsvc.c:133:5: note:   Analyze phi: .MEM_49 = PHI <.MEM_40(8), .MEM_32(D)(15)>
tsvc.c:133:5: note:   Analyze phi: ivtmp_66 = PHI <ivtmp_65(8), 65536(15)>
tsvc.c:133:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:133:5: note:   step: 4294967295,  init: 65536
tsvc.c:133:5: note:   Detected induction.
tsvc.c:133:5: note:   === vect_determine_precisions ===
tsvc.c:133:5: note:   ivtmp_65 has no range info
tsvc.c:133:5: note:   i_41 has range [0x1, 0x10000]
tsvc.c:133:5: note:   can narrow to unsigned:17 without loss of precision: i_41 = i_48 + 1;
tsvc.c:133:5: note:   _28 has no range info
tsvc.c:133:5: note:   _27 has no range info
tsvc.c:133:5: note:   _25 has no range info
tsvc.c:133:5: note:   prephitmp_75 has no range info
tsvc.c:133:5: note:   prephitmp_73 has no range info
tsvc.c:133:5: note:   pretmp_74 has no range info
tsvc.c:133:5: note:   using boolean precision 32 for _69 = _4 <= 0;
tsvc.c:133:5: note:   _12 has no range info
tsvc.c:133:5: note:   _9 has no range info
tsvc.c:133:5: note:   pretmp_72 has no range info
tsvc.c:133:5: note:   using boolean precision 32 for _68 = _4 > 0;
tsvc.c:133:5: note:   _20 has no range info
tsvc.c:133:5: note:   _17 has no range info
tsvc.c:133:5: note:   _16 has no range info
tsvc.c:133:5: note:   pretmp_80 has no range info
tsvc.c:133:5: note:   pretmp_77 has no range info
tsvc.c:133:5: note:   _4 has no range info
tsvc.c:133:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:133:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:133:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:133:5: note:   === vect_pattern_recog ===
tsvc.c:133:5: note:   vect_is_simple_use: operand (long unsigned int) i_48, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: operand i_48 = PHI <i_41(8), 0(15)>, type of def: induction
tsvc.c:133:5: note:   vect_is_simple_use: operand (long unsigned int) i_48, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: operand i_48 = PHI <i_41(8), 0(15)>, type of def: induction
tsvc.c:133:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:133:5: note:   widen_mult pattern recognized: patt_67 = (long unsigned int) patt_8;
tsvc.c:133:5: note:   extra pattern stmt: patt_8 = i_48 w* 4;
tsvc.c:133:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:133:5: note:   Detected interleaving load *_76 and *_76
tsvc.c:133:5: note:   Queuing group with duplicate access for fixup
tsvc.c:133:5: note:   Detected interleaving load *_81 and *_81
tsvc.c:133:5: note:   Queuing group with duplicate access for fixup
tsvc.c:133:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:133:5: note:   init: phi relevant? i_48 = PHI <i_41(8), 0(15)>
tsvc.c:133:5: note:   init: phi relevant? .MEM_49 = PHI <.MEM_40(8), .MEM_32(D)(15)>
tsvc.c:133:5: note:   init: phi relevant? ivtmp_66 = PHI <ivtmp_65(8), 65536(15)>
tsvc.c:133:5: note:   init: stmt relevant? _1 = (long unsigned int) i_48;
tsvc.c:133:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:133:5: note:   init: stmt relevant? _3 = a_33(D) + _2;
tsvc.c:133:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:133:5: note:   init: stmt relevant? _76 = d_34(D) + _2;
tsvc.c:133:5: note:   init: stmt relevant? pretmp_77 = *_76;
tsvc.c:133:5: note:   init: stmt relevant? _78 = b_35(D) + _2;
tsvc.c:133:5: note:   init: stmt relevant? _79 = e_36(D) + _2;
tsvc.c:133:5: note:   init: stmt relevant? pretmp_80 = *_79;
tsvc.c:133:5: note:   init: stmt relevant? _81 = c_38(D) + _2;
tsvc.c:133:5: note:   init: stmt relevant? _16 = *_81;
tsvc.c:133:5: note:   init: stmt relevant? _17 = pretmp_77 - _16;
tsvc.c:133:5: note:   init: stmt relevant? _20 = _17 + pretmp_80;
tsvc.c:133:5: note:   init: stmt relevant? _68 = _4 > 0;
tsvc.c:133:5: note:   init: stmt relevant? .MASK_STORE (_81, 32B, _68, _20);
tsvc.c:133:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:133:5: note:   mark relevant 5, live 0: .MASK_STORE (_81, 32B, _68, _20);
tsvc.c:133:5: note:   init: stmt relevant? pretmp_72 = *_78;
tsvc.c:133:5: note:   init: stmt relevant? _9 = pretmp_77 - pretmp_72;
tsvc.c:133:5: note:   init: stmt relevant? _12 = _9 + pretmp_80;
tsvc.c:133:5: note:   init: stmt relevant? _69 = _4 <= 0;
tsvc.c:133:5: note:   init: stmt relevant? .MASK_STORE (_78, 32B, _69, _12);
tsvc.c:133:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:133:5: note:   mark relevant 5, live 0: .MASK_STORE (_78, 32B, _69, _12);
tsvc.c:133:5: note:   init: stmt relevant? pretmp_74 = *_81;
tsvc.c:133:5: note:   init: stmt relevant? prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
tsvc.c:133:5: note:   init: stmt relevant? prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
tsvc.c:133:5: note:   init: stmt relevant? _25 = prephitmp_73 + prephitmp_75;
tsvc.c:133:5: note:   init: stmt relevant? _27 = *_76;
tsvc.c:133:5: note:   init: stmt relevant? _28 = _25 + _27;
tsvc.c:133:5: note:   init: stmt relevant? *_3 = _28;
tsvc.c:133:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:133:5: note:   mark relevant 5, live 0: *_3 = _28;
tsvc.c:133:5: note:   init: stmt relevant? i_41 = i_48 + 1;
tsvc.c:133:5: note:   init: stmt relevant? ivtmp_65 = ivtmp_66 - 1;
tsvc.c:133:5: note:   init: stmt relevant? if (ivtmp_65 != 0)
tsvc.c:133:5: note:   worklist: examine stmt: *_3 = _28;
tsvc.c:133:5: note:   vect_is_simple_use: operand _25 + _27, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _28 = _25 + _27;
tsvc.c:133:5: note:   worklist: examine stmt: _28 = _25 + _27;
tsvc.c:133:5: note:   vect_is_simple_use: operand prephitmp_73 + prephitmp_75, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _25 = prephitmp_73 + prephitmp_75;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _27 = *_76;
tsvc.c:133:5: note:   worklist: examine stmt: _27 = *_76;
tsvc.c:133:5: note:   worklist: examine stmt: _25 = prephitmp_73 + prephitmp_75;
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 <= 0 ? _12 : pretmp_72, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 > 0 ? _20 : pretmp_74, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
tsvc.c:133:5: note:   worklist: examine stmt: prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:133:5: note:   vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _20 = _17 + pretmp_80;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: pretmp_74 = *_81;
tsvc.c:133:5: note:   worklist: examine stmt: pretmp_74 = *_81;
tsvc.c:133:5: note:   worklist: examine stmt: _20 = _17 + pretmp_80;
tsvc.c:133:5: note:   vect_is_simple_use: operand pretmp_77 - _16, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _17 = pretmp_77 - _16;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: pretmp_80 = *_79;
tsvc.c:133:5: note:   worklist: examine stmt: pretmp_80 = *_79;
tsvc.c:133:5: note:   worklist: examine stmt: _17 = pretmp_77 - _16;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: pretmp_77 = *_76;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _16 = *_81;
tsvc.c:133:5: note:   worklist: examine stmt: _16 = *_81;
tsvc.c:133:5: note:   worklist: examine stmt: pretmp_77 = *_76;
tsvc.c:133:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:133:5: note:   worklist: examine stmt: prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _12 = _9 + pretmp_80;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: pretmp_72 = *_78;
tsvc.c:133:5: note:   worklist: examine stmt: pretmp_72 = *_78;
tsvc.c:133:5: note:   worklist: examine stmt: _12 = _9 + pretmp_80;
tsvc.c:133:5: note:   vect_is_simple_use: operand pretmp_77 - pretmp_72, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _9 = pretmp_77 - pretmp_72;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: pretmp_80 = *_79;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   worklist: examine stmt: _9 = pretmp_77 - pretmp_72;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: pretmp_77 = *_76;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: pretmp_72 = *_78;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   worklist: examine stmt: .MASK_STORE (_78, 32B, _69, _12);
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _69 = _4 <= 0;
tsvc.c:133:5: note:   vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _12 = _9 + pretmp_80;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   worklist: examine stmt: _69 = _4 <= 0;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   worklist: examine stmt: .MASK_STORE (_81, 32B, _68, _20);
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _68 = _4 > 0;
tsvc.c:133:5: note:   vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _20 = _17 + pretmp_80;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   worklist: examine stmt: _68 = _4 > 0;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:133:5: note:   already marked relevant/live.
tsvc.c:133:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_77 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_80 = *_79;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _16 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_81, 32B, _68, _20);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_72 = *_78;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_78, 32B, _69, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_74 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _27 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: *_3 = _28;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: pretmp_80 = *_79;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: _16 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: .MASK_STORE (_81, 32B, _68, _20);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: pretmp_72 = *_78;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: .MASK_STORE (_78, 32B, _69, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: pretmp_74 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: _27 = *_76;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: _16 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: .MASK_STORE (_81, 32B, _68, _20);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: pretmp_72 = *_78;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: .MASK_STORE (_78, 32B, _69, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: pretmp_74 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: _27 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_81;
  stmt_b: .MASK_STORE (_81, 32B, _68, _20);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = *_81;
  stmt_b: pretmp_72 = *_78;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_81;
  stmt_b: .MASK_STORE (_78, 32B, _69, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_81;
  stmt_b: pretmp_74 = *_81;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = *_81;
  stmt_b: _27 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = *_81;
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_81, 32B, _68, _20);
  stmt_b: pretmp_72 = *_78;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_81, 32B, _68, _20);
  stmt_b: .MASK_STORE (_78, 32B, _69, _12);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_81, 32B, _68, _20);
  stmt_b: pretmp_74 = *_81;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_81, 32B, _68, _20);
  stmt_b: _27 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_81, 32B, _68, _20);
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_72 = *_78;
  stmt_b: .MASK_STORE (_78, 32B, _69, _12);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_72 = *_78;
  stmt_b: pretmp_74 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_72 = *_78;
  stmt_b: _27 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_72 = *_78;
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_78, 32B, _69, _12);
  stmt_b: pretmp_74 = *_81;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_78, 32B, _69, _12);
  stmt_b: _27 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_78, 32B, _69, _12);
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_74 = *_81;
  stmt_b: _27 = *_76;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_74 = *_81;
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _27 = *_76;
  stmt_b: *_3 = _28;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_77 = *_76;
  stmt_b: pretmp_77 = *_76;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_80 = *_79;
  stmt_b: pretmp_80 = *_79;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = *_81;
  stmt_b: _16 = *_81;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_81, 32B, _68, _20);
  stmt_b: .MASK_STORE (_81, 32B, _68, _20);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_72 = *_78;
  stmt_b: pretmp_72 = *_78;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_78, 32B, _69, _12);
  stmt_b: .MASK_STORE (_78, 32B, _69, _12);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_74 = *_81;
  stmt_b: pretmp_74 = *_81;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _27 = *_76;
  stmt_b: _27 = *_76;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_3 = _28;
  stmt_b: *_3 = _28;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:135:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_81
consider run-time aliasing test between *_3 and *_81
tsvc.c:135:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_78
consider run-time aliasing test between *_3 and *_78
tsvc.c:133:5: note:   dependence distance  = 0.
tsvc.c:133:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:142:25: missed:   versioning for alias required: can't determine dependence between *_76 and *_81
consider run-time aliasing test between *_76 and *_81
tsvc.c:142:25: missed:   versioning for alias required: can't determine dependence between *_76 and *_78
consider run-time aliasing test between *_76 and *_78
tsvc.c:142:25: missed:   versioning for alias required: can't determine dependence between *_76 and *_3
consider run-time aliasing test between *_76 and *_3
tsvc.c:142:32: missed:   versioning for alias required: can't determine dependence between *_79 and *_81
consider run-time aliasing test between *_79 and *_81
tsvc.c:142:32: missed:   versioning for alias required: can't determine dependence between *_79 and *_78
consider run-time aliasing test between *_79 and *_78
tsvc.c:142:32: missed:   versioning for alias required: can't determine dependence between *_79 and *_3
consider run-time aliasing test between *_79 and *_3
tsvc.c:133:5: note:   dependence distance  = 0.
tsvc.c:133:5: note:   dependence distance == 0 between *_81 and *_81
tsvc.c:142:18: missed:   versioning for alias required: can't determine dependence between *_81 and *_78
consider run-time aliasing test between *_81 and *_78
tsvc.c:142:18: missed:   versioning for alias required: can't determine dependence between *_81 and *_3
consider run-time aliasing test between *_81 and *_3
tsvc.c:142:14: missed:   versioning for alias required: can't determine dependence between *_81 and *_78
consider run-time aliasing test between *_81 and *_78
tsvc.c:142:14: missed:   versioning for alias required: can't determine dependence between *_81 and *_78
consider run-time aliasing test between *_81 and *_78
tsvc.c:133:5: note:   dependence distance  = 0.
tsvc.c:133:5: note:   dependence distance == 0 between *_81 and *_81
tsvc.c:142:14: missed:   versioning for alias required: can't determine dependence between *_81 and *_76
consider run-time aliasing test between *_81 and *_76
tsvc.c:142:14: missed:   versioning for alias required: can't determine dependence between *_81 and *_3
consider run-time aliasing test between *_81 and *_3
tsvc.c:133:5: note:   dependence distance  = 0.
tsvc.c:133:5: note:   dependence distance == 0 between *_78 and *_78
tsvc.c:144:17: missed:   versioning for alias required: can't determine dependence between *_78 and *_3
consider run-time aliasing test between *_78 and *_3
tsvc.c:139:14: missed:   versioning for alias required: can't determine dependence between *_78 and *_81
consider run-time aliasing test between *_78 and *_81
tsvc.c:139:14: missed:   versioning for alias required: can't determine dependence between *_78 and *_76
consider run-time aliasing test between *_78 and *_76
tsvc.c:139:14: missed:   versioning for alias required: can't determine dependence between *_78 and *_3
consider run-time aliasing test between *_78 and *_3
tsvc.c:144:24: missed:   versioning for alias required: can't determine dependence between *_81 and *_3
consider run-time aliasing test between *_81 and *_3
tsvc.c:144:31: missed:   versioning for alias required: can't determine dependence between *_76 and *_3
consider run-time aliasing test between *_76 and *_3
tsvc.c:133:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:133:5: note:   ==> examining phi: i_48 = PHI <i_41(8), 0(15)>
tsvc.c:133:5: note:   ==> examining phi: .MEM_49 = PHI <.MEM_40(8), .MEM_32(D)(15)>
tsvc.c:133:5: note:   ==> examining phi: ivtmp_66 = PHI <ivtmp_65(8), 65536(15)>
tsvc.c:133:5: note:   ==> examining statement: _1 = (long unsigned int) i_48;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining pattern def stmt: patt_8 = i_48 w* 4;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining pattern statement: patt_67 = (long unsigned int) patt_8;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: _3 = a_33(D) + _2;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _76 = d_34(D) + _2;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: pretmp_77 = *_76;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _78 = b_35(D) + _2;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: _79 = e_36(D) + _2;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: pretmp_80 = *_79;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _81 = c_38(D) + _2;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: _16 = *_81;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _17 = pretmp_77 - _16;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _20 = _17 + pretmp_80;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _68 = _4 > 0;
tsvc.c:133:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: .MASK_STORE (_81, 32B, _68, _20);
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: pretmp_72 = *_78;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _9 = pretmp_77 - pretmp_72;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _12 = _9 + pretmp_80;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _69 = _4 <= 0;
tsvc.c:133:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: .MASK_STORE (_78, 32B, _69, _12);
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: pretmp_74 = *_81;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _25 = prephitmp_73 + prephitmp_75;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _27 = *_76;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: _28 = _25 + _27;
tsvc.c:133:5: note:   get vectype for scalar type: int
tsvc.c:133:5: note:   vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: *_3 = _28;
tsvc.c:133:5: note:   precomputed vectype: vector(8) int
tsvc.c:133:5: note:   nunits = 8
tsvc.c:133:5: note:   ==> examining statement: i_41 = i_48 + 1;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: ivtmp_65 = ivtmp_66 - 1;
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   ==> examining statement: if (ivtmp_65 != 0)
tsvc.c:133:5: note:   skip.
tsvc.c:133:5: note:   vectorization factor = 8
tsvc.c:133:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x5274350 *_3 1 times scalar_load costs 12 in body
0x5274350 *_76 1 times scalar_load costs 12 in body
0x5274350 *_79 1 times scalar_load costs 12 in body
0x5274350 *_81 1 times scalar_load costs 12 in body
0x5274350 pretmp_77 - _16 1 times scalar_stmt costs 4 in body
0x5274350 _17 + pretmp_80 1 times scalar_stmt costs 4 in body
0x5274350 _4 > 0 1 times scalar_stmt costs 4 in body
0x5274350 .MASK_STORE (_81, 32B, _68, _20) 1 times scalar_store costs 12 in body
0x5274350 *_78 1 times scalar_load costs 12 in body
0x5274350 pretmp_77 - pretmp_72 1 times scalar_stmt costs 4 in body
0x5274350 _9 + pretmp_80 1 times scalar_stmt costs 4 in body
0x5274350 _4 <= 0 1 times scalar_stmt costs 4 in body
0x5274350 .MASK_STORE (_78, 32B, _69, _12) 1 times scalar_store costs 12 in body
0x5274350 *_81 1 times scalar_load costs 12 in body
0x5274350 _4 <= 0 ? _12 : pretmp_72 1 times scalar_stmt costs 4 in body
0x5274350 _4 > 0 ? _20 : pretmp_74 1 times scalar_stmt costs 4 in body
0x5274350 prephitmp_73 + prephitmp_75 1 times scalar_stmt costs 4 in body
0x5274350 *_76 1 times scalar_load costs 12 in body
0x5274350 _25 + _27 1 times scalar_stmt costs 4 in body
0x5274350 _28 1 times scalar_store costs 12 in body
tsvc.c:133:5: note:   === vect_analyze_slp ===
tsvc.c:133:5: note:   === vect_make_slp_decision ===
tsvc.c:133:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:133:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:133:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:133:5: note:   accesses have the same alignment: *_76 and *_76
tsvc.c:133:5: note:   accesses have the same alignment: *_81 and *_81
tsvc.c:133:5: note:   accesses have the same alignment: *_81 and *_81
tsvc.c:133:5: note:   accesses have the same alignment: *_81 and *_81
tsvc.c:133:5: note:   accesses have the same alignment: *_78 and *_78
tsvc.c:133:5: note:   recording new base alignment for a_33(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:133:5: note:   recording new base alignment for d_34(D)
  alignment:    4
  misalignment: 0
  based on:     pretmp_77 = *_76;
tsvc.c:133:5: note:   recording new base alignment for e_36(D)
  alignment:    4
  misalignment: 0
  based on:     pretmp_80 = *_79;
tsvc.c:133:5: note:   recording new base alignment for c_38(D)
  alignment:    4
  misalignment: 0
  based on:     _16 = *_81;
tsvc.c:133:5: note:   recording new base alignment for b_35(D)
  alignment:    4
  misalignment: 0
  based on:     pretmp_72 = *_78;
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_3
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_76
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_79
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_81
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_81
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_78
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_78
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_81
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_76
tsvc.c:133:5: note:   vect_compute_data_ref_alignment:
tsvc.c:133:5: note:   can't force alignment of ref: *_3
tsvc.c:133:5: note:   === vect_prune_runtime_alias_test_list ===
found equal ranges *_3, *_76 and *_3, *_76
found equal ranges *_3, *_78 and *_3, *_78
found equal ranges *_3, *_78 and *_3, *_78
found equal ranges *_3, *_81 and *_3, *_81
found equal ranges *_3, *_81 and *_3, *_81
found equal ranges *_3, *_81 and *_3, *_81
found equal ranges *_76, *_78 and *_76, *_78
found equal ranges *_76, *_81 and *_76, *_81
found equal ranges *_78, *_81 and *_78, *_81
found equal ranges *_78, *_81 and *_78, *_81
found equal ranges *_78, *_81 and *_78, *_81
merged alias checks:
  reference:      *_76 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_3 vs. *_78
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR WAW ARBITRARY
  reference:      *_79 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_3 vs. *_81
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR WAW ARBITRARY
  reference:      *_76 vs. *_78
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_76 vs. *_81
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_79 vs. *_78
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_78 vs. *_81
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW ARBITRARY
  reference:      *_79 vs. *_81
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:133:5: note:   improved number of alias checks from 20 to 9
tsvc.c:133:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:133:5: note:   vect_can_advance_ivs_p:
tsvc.c:133:5: note:   Analyze phi: i_48 = PHI <i_41(8), 0(15)>
tsvc.c:133:5: note:   Analyze phi: .MEM_49 = PHI <.MEM_40(8), .MEM_32(D)(15)>
tsvc.c:133:5: note:   reduc or virtual phi. skip.
tsvc.c:133:5: note:   Analyze phi: ivtmp_66 = PHI <ivtmp_65(8), 65536(15)>
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: aligned.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_store_cost: aligned.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: aligned.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: aligned.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_store_cost: aligned.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: aligned.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:133:5: note:   Setting misalignment to unknown (-1).
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   Vectorizing an unaligned access.
tsvc.c:133:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:133:5: note:   === vect_analyze_loop_operations ===
tsvc.c:133:5: note:   examining phi: i_48 = PHI <i_41(8), 0(15)>
tsvc.c:133:5: note:   examining phi: .MEM_49 = PHI <.MEM_40(8), .MEM_32(D)(15)>
tsvc.c:133:5: note:   examining phi: ivtmp_66 = PHI <ivtmp_65(8), 65536(15)>
tsvc.c:133:5: note:   ==> examining statement: _1 = (long unsigned int) i_48;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: _3 = a_33(D) + _2;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _76 = d_34(D) + _2;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: pretmp_77 = *_76;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _78 = b_35(D) + _2;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: _79 = e_36(D) + _2;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: pretmp_80 = *_79;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_79, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_79, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _81 = c_38(D) + _2;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: _16 = *_81;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _17 = pretmp_77 - _16;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:    === vectorizable_operation ===
tsvc.c:133:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _20 = _17 + pretmp_80;
tsvc.c:133:5: note:   vect_is_simple_use: operand pretmp_77 - _16, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:    === vectorizable_operation ===
tsvc.c:133:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _68 = _4 > 0;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:133:5: note:   ==> examining statement: .MASK_STORE (_81, 32B, _68, _20);
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:133:5: note:   vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: pretmp_72 = *_78;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_78, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_78, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _9 = pretmp_77 - pretmp_72;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:    === vectorizable_operation ===
tsvc.c:133:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _12 = _9 + pretmp_80;
tsvc.c:133:5: note:   vect_is_simple_use: operand pretmp_77 - pretmp_72, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:    === vectorizable_operation ===
tsvc.c:133:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _69 = _4 <= 0;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:133:5: note:   ==> examining statement: .MASK_STORE (_78, 32B, _69, _12);
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:133:5: note:   vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: pretmp_74 = *_81;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:133:5: note:   ==> examining statement: prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:133:5: note:   ==> examining statement: _25 = prephitmp_73 + prephitmp_75;
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 <= 0 ? _12 : pretmp_72, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand _4 > 0 ? _20 : pretmp_74, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:    === vectorizable_operation ===
tsvc.c:133:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _27 = *_76;
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: unknown
tsvc.c:133:5: missed:   Unsupported pattern.
tsvc.c:133:5: missed:   use not simple.
tsvc.c:133:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: _28 = _25 + _27;
tsvc.c:133:5: note:   vect_is_simple_use: operand prephitmp_73 + prephitmp_75, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:    === vectorizable_operation ===
tsvc.c:133:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: *_3 = _28;
tsvc.c:133:5: note:   vect_is_simple_use: operand _25 + _27, type of def: internal
tsvc.c:133:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:133:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:133:5: note:   ==> examining statement: i_41 = i_48 + 1;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: ivtmp_65 = ivtmp_66 - 1;
tsvc.c:133:5: note:   irrelevant.
tsvc.c:133:5: note:   ==> examining statement: if (ivtmp_65 != 0)
tsvc.c:133:5: note:   irrelevant.
0x504e6b0 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x504e6b0 *_76 1 times unaligned_load (misalign -1) costs 20 in body
0x504e6b0 *_79 1 times unaligned_load (misalign -1) costs 20 in body
0x504e6b0 *_81 1 times unaligned_load (misalign -1) costs 20 in body
0x504e6b0 pretmp_77 - _16 1 times vector_stmt costs 4 in body
0x504e6b0 _17 + pretmp_80 1 times vector_stmt costs 4 in body
0x504e6b0 _4 > 0 1 times scalar_to_vec costs 4 in prologue
0x504e6b0 _4 > 0 1 times vector_stmt costs 4 in body
0x504e6b0 .MASK_STORE (_81, 32B, _68, _20) 1 times unaligned_store (misalign -1) costs 20 in body
0x504e6b0 *_78 1 times unaligned_load (misalign -1) costs 20 in body
0x504e6b0 pretmp_77 - pretmp_72 1 times vector_stmt costs 4 in body
0x504e6b0 _9 + pretmp_80 1 times vector_stmt costs 4 in body
0x504e6b0 _4 <= 0 1 times scalar_to_vec costs 4 in prologue
0x504e6b0 _4 <= 0 1 times vector_stmt costs 4 in body
0x504e6b0 .MASK_STORE (_78, 32B, _69, _12) 1 times unaligned_store (misalign -1) costs 20 in body
0x504e6b0 *_81 1 times unaligned_load (misalign -1) costs 20 in body
0x504e6b0 _4 <= 0 ? _12 : pretmp_72 1 times scalar_to_vec costs 4 in prologue
0x504e6b0 _4 <= 0 ? _12 : pretmp_72 1 times vector_stmt costs 4 in body
0x504e6b0 _4 > 0 ? _20 : pretmp_74 1 times scalar_to_vec costs 4 in prologue
0x504e6b0 _4 > 0 ? _20 : pretmp_74 1 times vector_stmt costs 4 in body
0x504e6b0 prephitmp_73 + prephitmp_75 1 times vector_stmt costs 4 in body
0x504e6b0 *_76 1 times unaligned_load (misalign -1) costs 20 in body
0x504e6b0 _25 + _27 1 times vector_stmt costs 4 in body
0x504e6b0 _28 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_65 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) a_33(D) + 4 * iteration does not wrap in statement _3 = a_33(D) + _2;
 in loop 1.
Statement _3 = a_33(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_34(D) + 4 * iteration does not wrap in statement _76 = d_34(D) + _2;
 in loop 1.
Statement _76 = d_34(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_35(D) + 4 * iteration does not wrap in statement _78 = b_35(D) + _2;
 in loop 1.
Statement _78 = b_35(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) e_36(D) + 4 * iteration does not wrap in statement _79 = e_36(D) + _2;
 in loop 1.
Statement _79 = e_36(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_38(D) + 4 * iteration does not wrap in statement _81 = c_38(D) + _2;
 in loop 1.
Statement _81 = c_38(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_41 = i_48 + 1;
 in loop 1.
Statement i_41 = i_48 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:133:5: note:  not using a fully-masked loop.
0x504e6b0 <unknown> 9 times vector_stmt costs 36 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x504e6b0 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:133:5: note:  Cost model analysis: 
  Vector inside of loop cost: 240
  Vector prologue cost: 68
  Vector epilogue cost: 0
  Scalar iteration cost: 160
  Scalar outside cost: 8
  Vector outside cost: 68
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:133:5: note:    Runtime profitability threshold = 8
tsvc.c:133:5: note:    Static estimate profitability threshold = 8
tsvc.c:133:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:133:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:133:5: note:  ***** Choosing vector mode V8SI
tsvc.c:133:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:133:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_76 and *_3
using an address-based WAR/WAW test
create runtime check for data references *_3 and *_78
using an address-based overlap test
create runtime check for data references *_79 and *_3
using an address-based WAR/WAW test
create runtime check for data references *_3 and *_81
using an address-based overlap test
create runtime check for data references *_76 and *_78
using an address-based overlap test
create runtime check for data references *_76 and *_81
using an address-based overlap test
create runtime check for data references *_79 and *_78
using an address-based WAR/WAW test
create runtime check for data references *_78 and *_81
using an address-based overlap test
create runtime check for data references *_79 and *_81
using an address-based WAR/WAW test
tsvc.c:133:5: note:  created 9 versioning for alias checks.
tsvc.c:133:5: note:  trying to apply versioning to outer loop 0
tsvc.c:133:5: note:  reusing loop version created by if conversion
tsvc.c:133:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:133:5: note:  ------>vectorizing phi: i_48 = PHI <i_41(8), 0(19)>
tsvc.c:133:5: note:  ------>vectorizing phi: .MEM_49 = PHI <.MEM_40(8), .MEM_32(D)(19)>
tsvc.c:133:5: note:  ------>vectorizing phi: ivtmp_66 = PHI <ivtmp_65(8), 65536(19)>
tsvc.c:133:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_48;
tsvc.c:133:5: note:  ------>vectorizing statement: patt_8 = i_48 w* 4;
tsvc.c:133:5: note:  ------>vectorizing statement: patt_67 = (long unsigned int) patt_8;
tsvc.c:133:5: note:  ------>vectorizing statement: _3 = a_33(D) + _2;
tsvc.c:133:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  transform load. ncopies = 1
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_33(D)
tsvc.c:133:5: note:  created a_33(D)
tsvc.c:133:5: note:  add new stmt: vect__4.528_123 = MEM <vector(8) int> [(int *)vectp_a.526_121];
tsvc.c:133:5: note:  ------>vectorizing statement: _76 = d_34(D) + _2;
tsvc.c:133:5: note:  ------>vectorizing statement: pretmp_77 = *_76;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  transform load. ncopies = 1
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_34(D)
tsvc.c:133:5: note:  created d_34(D)
tsvc.c:133:5: note:  add new stmt: vect_pretmp_77.531_126 = MEM <vector(8) int> [(int *)vectp_d.529_124];
tsvc.c:133:5: note:  ------>vectorizing statement: _78 = b_35(D) + _2;
tsvc.c:133:5: note:  ------>vectorizing statement: _79 = e_36(D) + _2;
tsvc.c:133:5: note:  ------>vectorizing statement: pretmp_80 = *_79;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  transform load. ncopies = 1
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_36(D)
tsvc.c:133:5: note:  created e_36(D)
tsvc.c:133:5: note:  add new stmt: vect_pretmp_80.534_129 = MEM <vector(8) int> [(int *)vectp_e.532_127];
tsvc.c:133:5: note:  ------>vectorizing statement: _81 = c_38(D) + _2;
tsvc.c:133:5: note:  ------>vectorizing statement: _16 = *_81;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  transform load. ncopies = 1
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_38(D)
tsvc.c:133:5: note:  created c_38(D)
tsvc.c:133:5: note:  add new stmt: vect__16.537_132 = MEM <vector(8) int> [(int *)vectp_c.535_130];
tsvc.c:133:5: note:  ------>vectorizing statement: _17 = pretmp_77 - _16;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform binary/unary operation.
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: pretmp_77
tsvc.c:133:5: note:  vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:    def_stmt =  pretmp_77 = *_76;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _16
tsvc.c:133:5: note:  vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _16 = *_81;
tsvc.c:133:5: note:  add new stmt: vect__17.538_133 = vect_pretmp_77.531_126 - vect__16.537_132;
tsvc.c:133:5: note:  ------>vectorizing statement: _20 = _17 + pretmp_80;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand pretmp_77 - _16, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform binary/unary operation.
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _17
tsvc.c:133:5: note:  vect_is_simple_use: operand pretmp_77 - _16, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _17 = pretmp_77 - _16;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: pretmp_80
tsvc.c:133:5: note:  vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:    def_stmt =  pretmp_80 = *_79;
tsvc.c:133:5: note:  add new stmt: vect__20.539_134 = vect__17.538_133 + vect_pretmp_80.534_129;
tsvc.c:133:5: note:  ------>vectorizing statement: _68 = _4 > 0;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _4 = *_3;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:133:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:  created new init_stmt: vect_cst__135 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:133:5: note:  add new stmt: mask__68.540_136 = vect__4.528_123 > vect_cst__135;
tsvc.c:133:5: note:  ------>vectorizing statement: .MASK_STORE (_81, 32B, _68, _20);
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:133:5: note:  vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform store. ncopies = 1
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _20
tsvc.c:133:5: note:  vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _20 = _17 + pretmp_80;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _68
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _68 = _4 > 0;
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_38(D)
tsvc.c:133:5: note:  created c_38(D)
tsvc.c:133:5: note:  add new stmt: .MASK_STORE (vectp_c.541_137, 32B, mask__68.540_136, vect__20.539_134);
tsvc.c:133:5: note:  ------>vectorizing statement: pretmp_72 = *_78;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  transform load. ncopies = 1
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_35(D)
tsvc.c:133:5: note:  created b_35(D)
tsvc.c:133:5: note:  add new stmt: vect_pretmp_72.545_142 = MEM <vector(8) int> [(int *)vectp_b.543_140];
tsvc.c:133:5: note:  ------>vectorizing statement: _9 = pretmp_77 - pretmp_72;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform binary/unary operation.
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: pretmp_77
tsvc.c:133:5: note:  vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:    def_stmt =  pretmp_77 = *_76;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: pretmp_72
tsvc.c:133:5: note:  vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:    def_stmt =  pretmp_72 = *_78;
tsvc.c:133:5: note:  add new stmt: vect__9.546_143 = vect_pretmp_77.531_126 - vect_pretmp_72.545_142;
tsvc.c:133:5: note:  ------>vectorizing statement: _12 = _9 + pretmp_80;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand pretmp_77 - pretmp_72, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform binary/unary operation.
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:133:5: note:  vect_is_simple_use: operand pretmp_77 - pretmp_72, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _9 = pretmp_77 - pretmp_72;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: pretmp_80
tsvc.c:133:5: note:  vect_is_simple_use: operand *_79, type of def: internal
tsvc.c:133:5: note:    def_stmt =  pretmp_80 = *_79;
tsvc.c:133:5: note:  add new stmt: vect__12.547_144 = vect__9.546_143 + vect_pretmp_80.534_129;
tsvc.c:133:5: note:  ------>vectorizing statement: _69 = _4 <= 0;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _4 = *_3;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:133:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:  created new init_stmt: vect_cst__145 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:133:5: note:  add new stmt: mask__69.548_146 = vect__4.528_123 <= vect_cst__145;
tsvc.c:133:5: note:  ------>vectorizing statement: .MASK_STORE (_78, 32B, _69, _12);
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:133:5: note:  vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform store. ncopies = 1
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _12
tsvc.c:133:5: note:  vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _12 = _9 + pretmp_80;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _69
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _69 = _4 <= 0;
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_35(D)
tsvc.c:133:5: note:  created b_35(D)
tsvc.c:133:5: note:  add new stmt: .MASK_STORE (vectp_b.549_147, 32B, mask__69.548_146, vect__12.547_144);
tsvc.c:133:5: note:  ------>vectorizing statement: pretmp_74 = *_81;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  transform load. ncopies = 1
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_38(D)
tsvc.c:133:5: note:  created c_38(D)
tsvc.c:133:5: note:  add new stmt: vect_pretmp_74.553_152 = MEM <vector(8) int> [(int *)vectp_c.551_150];
tsvc.c:133:5: note:  ------>vectorizing statement: prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _4 = *_3;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:133:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:  created new init_stmt: vect_cst__153 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _12
tsvc.c:133:5: note:  vect_is_simple_use: operand _9 + pretmp_80, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _12 = _9 + pretmp_80;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: pretmp_72
tsvc.c:133:5: note:  vect_is_simple_use: operand *_78, type of def: internal
tsvc.c:133:5: note:    def_stmt =  pretmp_72 = *_78;
tsvc.c:133:5: note:  add new stmt: vect_prephitmp_73.554_154 = VEC_COND_EXPR <vect__4.528_123 <= vect_cst__153, vect__12.547_144, vect_pretmp_72.545_142>;
tsvc.c:133:5: note:  ------>vectorizing statement: prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:133:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _4 = *_3;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:133:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:133:5: note:  created new init_stmt: vect_cst__155 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _20
tsvc.c:133:5: note:  vect_is_simple_use: operand _17 + pretmp_80, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _20 = _17 + pretmp_80;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: pretmp_74
tsvc.c:133:5: note:  vect_is_simple_use: operand *_81, type of def: internal
tsvc.c:133:5: note:    def_stmt =  pretmp_74 = *_81;
tsvc.c:133:5: note:  add new stmt: vect_prephitmp_75.555_156 = VEC_COND_EXPR <vect__4.528_123 > vect_cst__155, vect__20.539_134, vect_pretmp_74.553_152>;
tsvc.c:133:5: note:  ------>vectorizing statement: _25 = prephitmp_73 + prephitmp_75;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 <= 0 ? _12 : pretmp_72, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 > 0 ? _20 : pretmp_74, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform binary/unary operation.
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: prephitmp_73
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 <= 0 ? _12 : pretmp_72, type of def: internal
tsvc.c:133:5: note:    def_stmt =  prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: prephitmp_75
tsvc.c:133:5: note:  vect_is_simple_use: operand _4 > 0 ? _20 : pretmp_74, type of def: internal
tsvc.c:133:5: note:    def_stmt =  prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
tsvc.c:133:5: note:  add new stmt: vect__25.556_157 = vect_prephitmp_73.554_154 + vect_prephitmp_75.555_156;
tsvc.c:133:5: note:  ------>vectorizing statement: _27 = *_76;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  transform load. ncopies = 1
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_34(D)
tsvc.c:133:5: note:  created d_34(D)
tsvc.c:133:5: note:  add new stmt: vect__27.559_160 = MEM <vector(8) int> [(int *)vectp_d.557_158];
tsvc.c:133:5: note:  ------>vectorizing statement: _28 = _25 + _27;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand prephitmp_73 + prephitmp_75, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform binary/unary operation.
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _25
tsvc.c:133:5: note:  vect_is_simple_use: operand prephitmp_73 + prephitmp_75, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _25 = prephitmp_73 + prephitmp_75;
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _27
tsvc.c:133:5: note:  vect_is_simple_use: operand *_76, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _27 = *_76;
tsvc.c:133:5: note:  add new stmt: vect__28.560_161 = vect__25.556_157 + vect__27.559_160;
tsvc.c:133:5: note:  ------>vectorizing statement: *_3 = _28;
tsvc.c:133:5: note:  transform statement.
tsvc.c:133:5: note:  vect_is_simple_use: operand _25 + _27, type of def: internal
tsvc.c:133:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:133:5: note:  transform store. ncopies = 1
tsvc.c:133:5: note:  vect_get_vec_def_for_operand: _28
tsvc.c:133:5: note:  vect_is_simple_use: operand _25 + _27, type of def: internal
tsvc.c:133:5: note:    def_stmt =  _28 = _25 + _27;
tsvc.c:133:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_33(D)
tsvc.c:133:5: note:  created a_33(D)
tsvc.c:133:5: note:  add new stmt: MEM <vector(8) int> [(int *)vectp_a.561_162] = vect__28.560_161;
tsvc.c:133:5: note:  ------>vectorizing statement: i_41 = i_48 + 1;
tsvc.c:133:5: note:  ------>vectorizing statement: ivtmp_65 = ivtmp_66 - 1;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_a.526_122 = vectp_a.526_121 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_d.529_125 = vectp_d.529_124 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_e.532_128 = vectp_e.532_127 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_c.535_131 = vectp_c.535_130 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_c.541_138 = vectp_c.541_137 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_b.543_141 = vectp_b.543_140 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_b.549_148 = vectp_b.549_147 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_c.551_151 = vectp_c.551_150 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_d.557_159 = vectp_d.557_158 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: vectp_a.561_163 = vectp_a.561_162 + 32;
tsvc.c:133:5: note:  ------>vectorizing statement: if (ivtmp_65 != 0)
tsvc.c:133:5: note:  New loop exit condition: if (ivtmp_166 < 8192)
tsvc.c:133:5: note:  LOOP VECTORIZED

tsvc.c:131:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       19


fix_loop_structure: fixing up loops for function
s278 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_a.562;
  vector(8) int * vectp_a.561;
  vector(8) int vect__28.560;
  vector(8) int vect__27.559;
  vector(8) int * vectp_d.558;
  vector(8) int * vectp_d.557;
  vector(8) int vect__25.556;
  vector(8) int vect_prephitmp_75.555;
  vector(8) int vect_prephitmp_73.554;
  vector(8) int vect_pretmp_74.553;
  vector(8) int * vectp_c.552;
  vector(8) int * vectp_c.551;
  vector(8) int * vectp_b.550;
  vector(8) int * vectp_b.549;
  vector(8) <unnamed type> mask__69.548;
  vector(8) int vect__12.547;
  vector(8) int vect__9.546;
  vector(8) int vect_pretmp_72.545;
  vector(8) int * vectp_b.544;
  vector(8) int * vectp_b.543;
  vector(8) int * vectp_c.542;
  vector(8) int * vectp_c.541;
  vector(8) <unnamed type> mask__68.540;
  vector(8) int vect__20.539;
  vector(8) int vect__17.538;
  vector(8) int vect__16.537;
  vector(8) int * vectp_c.536;
  vector(8) int * vectp_c.535;
  vector(8) int vect_pretmp_80.534;
  vector(8) int * vectp_e.533;
  vector(8) int * vectp_e.532;
  vector(8) int vect_pretmp_77.531;
  vector(8) int * vectp_d.530;
  vector(8) int * vectp_d.529;
  vector(8) int vect__4.528;
  vector(8) int * vectp_a.527;
  vector(8) int * vectp_a.526;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int pretmp_5;
  int prephitmp_7;
  int _9;
  int prephitmp_10;
  int _11;
  int _12;
  int _13;
  int _16;
  int _17;
  unsigned int ivtmp_18;
  int _20;
  ssizetype _21;
  sizetype _22;
  _Bool _23;
  int * _24;
  int _25;
  ssizetype _26;
  int _27;
  int _28;
  int _29;
  int * _31;
  int pretmp_42;
  int * _43;
  int * _44;
  int pretmp_45;
  int * _46;
  int _47;
  int * _50;
  long unsigned int _51;
  long unsigned int _52;
  int _53;
  int _56;
  int _57;
  int _58;
  int pretmp_59;
  int _60;
  unsigned int ivtmp_61;
  _Bool _64;
  unsigned int ivtmp_65;
  unsigned int ivtmp_66;
  _Bool _68;
  _Bool _69;
  int _70;
  int * _71;
  int pretmp_72;
  int prephitmp_73;
  int pretmp_74;
  int prephitmp_75;
  int * _76;
  int pretmp_77;
  int * _78;
  int * _79;
  int pretmp_80;
  int * _81;
  sizetype _82;
  _Bool _83;
  _Bool _84;
  int * _85;
  ssizetype _86;
  sizetype _87;
  _Bool _88;
  _Bool _89;
  int * _90;
  ssizetype _91;
  sizetype _92;
  _Bool _93;
  _Bool _94;
  int * _95;
  ssizetype _96;
  sizetype _97;
  _Bool _98;
  _Bool _99;
  int * _100;
  ssizetype _101;
  sizetype _102;
  _Bool _103;
  _Bool _104;
  int * _105;
  ssizetype _106;
  sizetype _107;
  _Bool _108;
  _Bool _109;
  int * _110;
  ssizetype _111;
  sizetype _112;
  _Bool _113;
  _Bool _114;
  int * _115;
  ssizetype _116;
  sizetype _117;
  _Bool _118;
  _Bool _119;
  vector(8) int vect_cst__135;
  vector(8) int vect_cst__145;
  vector(8) int vect_cst__153;
  vector(8) int vect_cst__155;
  unsigned int ivtmp_165;
  unsigned int ivtmp_166;

  <bb 2> [local count: 10737414]:
  _71 = d_34(D) + 4;
  _21 = a_33(D) - _71;
  _22 = (sizetype) _21;
  _23 = _22 > 24;
  _24 = a_33(D) + 31;
  _26 = _24 - b_35(D);
  _82 = (sizetype) _26;
  _83 = _82 > 62;
  _84 = _23 & _83;
  _85 = e_36(D) + 4;
  _86 = a_33(D) - _85;
  _87 = (sizetype) _86;
  _88 = _87 > 24;
  _89 = _84 & _88;
  _90 = a_33(D) + 31;
  _91 = _90 - c_38(D);
  _92 = (sizetype) _91;
  _93 = _92 > 62;
  _94 = _89 & _93;
  _95 = d_34(D) + 31;
  _96 = _95 - b_35(D);
  _97 = (sizetype) _96;
  _98 = _97 > 62;
  _99 = _94 & _98;
  _100 = d_34(D) + 31;
  _101 = _100 - c_38(D);
  _102 = (sizetype) _101;
  _103 = _102 > 62;
  _104 = _99 & _103;
  _105 = e_36(D) + 4;
  _106 = b_35(D) - _105;
  _107 = (sizetype) _106;
  _108 = _107 > 24;
  _109 = _104 & _108;
  _110 = b_35(D) + 31;
  _111 = _110 - c_38(D);
  _112 = (sizetype) _111;
  _113 = _112 > 62;
  _114 = _109 & _113;
  _115 = e_36(D) + 4;
  _116 = c_38(D) - _115;
  _117 = (sizetype) _116;
  _118 = _117 > 24;
  _119 = _114 & _118;
  _64 = 1;
  if (_119 != 0)
    goto <bb 19>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 19> [local count: 10737414]:
  vect_cst__135 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__145 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__153 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__155 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374140]:
  # i_48 = PHI <i_41(8), 0(19)>
  # ivtmp_66 = PHI <ivtmp_65(8), 65536(19)>
  # vectp_a.526_121 = PHI <vectp_a.526_122(8), a_33(D)(19)>
  # vectp_d.529_124 = PHI <vectp_d.529_125(8), d_34(D)(19)>
  # vectp_e.532_127 = PHI <vectp_e.532_128(8), e_36(D)(19)>
  # vectp_c.535_130 = PHI <vectp_c.535_131(8), c_38(D)(19)>
  # vectp_c.541_137 = PHI <vectp_c.541_138(8), c_38(D)(19)>
  # vectp_b.543_140 = PHI <vectp_b.543_141(8), b_35(D)(19)>
  # vectp_b.549_147 = PHI <vectp_b.549_148(8), b_35(D)(19)>
  # vectp_c.551_150 = PHI <vectp_c.551_151(8), c_38(D)(19)>
  # vectp_d.557_158 = PHI <vectp_d.557_159(8), d_34(D)(19)>
  # vectp_a.561_162 = PHI <vectp_a.561_163(8), a_33(D)(19)>
  # ivtmp_165 = PHI <ivtmp_166(8), 0(19)>
  _1 = (long unsigned int) i_48;
  _2 = _1 * 4;
  _3 = a_33(D) + _2;
  vect__4.528_123 = MEM <vector(8) int> [(int *)vectp_a.526_121];
  _4 = *_3;
  _76 = d_34(D) + _2;
  vect_pretmp_77.531_126 = MEM <vector(8) int> [(int *)vectp_d.529_124];
  pretmp_77 = *_76;
  _78 = b_35(D) + _2;
  _79 = e_36(D) + _2;
  vect_pretmp_80.534_129 = MEM <vector(8) int> [(int *)vectp_e.532_127];
  pretmp_80 = *_79;
  _81 = c_38(D) + _2;
  vect__16.537_132 = MEM <vector(8) int> [(int *)vectp_c.535_130];
  _16 = *_81;
  vect__17.538_133 = vect_pretmp_77.531_126 - vect__16.537_132;
  _17 = pretmp_77 - _16;
  vect__20.539_134 = vect__17.538_133 + vect_pretmp_80.534_129;
  _20 = _17 + pretmp_80;
  mask__68.540_136 = vect__4.528_123 > vect_cst__135;
  _68 = _4 > 0;
  .MASK_STORE (vectp_c.541_137, 32B, mask__68.540_136, vect__20.539_134);
  vect_pretmp_72.545_142 = MEM <vector(8) int> [(int *)vectp_b.543_140];
  pretmp_72 = *_78;
  vect__9.546_143 = vect_pretmp_77.531_126 - vect_pretmp_72.545_142;
  _9 = pretmp_77 - pretmp_72;
  vect__12.547_144 = vect__9.546_143 + vect_pretmp_80.534_129;
  _12 = _9 + pretmp_80;
  mask__69.548_146 = vect__4.528_123 <= vect_cst__145;
  _69 = _4 <= 0;
  .MASK_STORE (vectp_b.549_147, 32B, mask__69.548_146, vect__12.547_144);
  vect_pretmp_74.553_152 = MEM <vector(8) int> [(int *)vectp_c.551_150];
  pretmp_74 = *_81;
  vect_prephitmp_73.554_154 = VEC_COND_EXPR <vect__4.528_123 <= vect_cst__153, vect__12.547_144, vect_pretmp_72.545_142>;
  prephitmp_73 = _4 <= 0 ? _12 : pretmp_72;
  vect_prephitmp_75.555_156 = VEC_COND_EXPR <vect__4.528_123 > vect_cst__155, vect__20.539_134, vect_pretmp_74.553_152>;
  prephitmp_75 = _4 > 0 ? _20 : pretmp_74;
  vect__25.556_157 = vect_prephitmp_73.554_154 + vect_prephitmp_75.555_156;
  _25 = prephitmp_73 + prephitmp_75;
  vect__27.559_160 = MEM <vector(8) int> [(int *)vectp_d.557_158];
  _27 = *_76;
  vect__28.560_161 = vect__25.556_157 + vect__27.559_160;
  _28 = _25 + _27;
  MEM <vector(8) int> [(int *)vectp_a.561_162] = vect__28.560_161;
  i_41 = i_48 + 1;
  ivtmp_65 = ivtmp_66 - 1;
  vectp_a.526_122 = vectp_a.526_121 + 32;
  vectp_d.529_125 = vectp_d.529_124 + 32;
  vectp_e.532_128 = vectp_e.532_127 + 32;
  vectp_c.535_131 = vectp_c.535_130 + 32;
  vectp_c.541_138 = vectp_c.541_137 + 32;
  vectp_b.543_141 = vectp_b.543_140 + 32;
  vectp_b.549_148 = vectp_b.549_147 + 32;
  vectp_c.551_151 = vectp_c.551_150 + 32;
  vectp_d.557_159 = vectp_d.557_158 + 32;
  vectp_a.561_163 = vectp_a.561_162 + 32;
  ivtmp_166 = ivtmp_165 + 1;
  if (ivtmp_166 < 8192)
    goto <bb 8>; [90.00%]
  else
    goto <bb 17>; [10.00%]

  <bb 8> [local count: 96636725]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737414]:

  <bb 9> [local count: 212600877]:
  # i_63 = PHI <i_15(13), 0(16)>
  # ivtmp_61 = PHI <ivtmp_18(13), 65536(16)>
  _52 = (long unsigned int) i_63;
  _51 = _52 * 4;
  _50 = a_33(D) + _51;
  _47 = *_50;
  _46 = d_34(D) + _51;
  pretmp_45 = *_46;
  _44 = b_35(D) + _51;
  _43 = e_36(D) + _51;
  pretmp_42 = *_43;
  _31 = c_38(D) + _51;
  if (_47 > 0)
    goto <bb 11>; [59.00%]
  else
    goto <bb 10>; [41.00%]

  <bb 11> [local count: 125434518]:
  _58 = *_31;
  _57 = pretmp_45 - _58;
  _56 = _57 + pretmp_42;
  *_31 = _56;
  pretmp_5 = *_44;
  goto <bb 12>; [100.00%]

  <bb 10> [local count: 87166359]:
  _29 = *_44;
  _60 = pretmp_45 - _29;
  _53 = _60 + pretmp_42;
  *_44 = _53;
  pretmp_59 = *_31;

  <bb 12> [local count: 212600877]:
  # prephitmp_7 = PHI <_53(10), pretmp_5(11)>
  # prephitmp_10 = PHI <pretmp_59(10), _56(11)>
  _11 = prephitmp_7 + prephitmp_10;
  _70 = *_46;
  _13 = _11 + _70;
  *_50 = _13;
  i_15 = i_63 + 1;
  ivtmp_18 = ivtmp_61 - 1;
  if (ivtmp_18 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 7>; [100.00%]

  <bb 13> [local count: 210453395]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s279 (s279, funcdef_no=33, decl_uid=3709, cgraph_uid=34, symbol_order=33)


Analyzing loop at tsvc.c:149
tsvc.c:149:5: note:  === analyze_loop_nest ===
tsvc.c:149:5: note:   === vect_analyze_loop_form ===
tsvc.c:149:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: a_37(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_37(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_19
analyze_innermost: success.
	base_address: e_42(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_42(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_84
analyze_innermost: success.
	base_address: d_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_37(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_37(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_84
analyze_innermost: success.
	base_address: d_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_19
analyze_innermost: success.
	base_address: e_42(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_42(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_86
analyze_innermost: success.
	base_address: c_41(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_41(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_85
analyze_innermost: success.
	base_address: b_39(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_39(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_84
analyze_innermost: success.
	base_address: d_38(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_38(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_37(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_37(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:149:5: note:   === vect_analyze_data_refs ===
tsvc.c:149:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _20 = .MASK_LOAD (_19, 32B, _104);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _22 = .MASK_LOAD (_86, 32B, _104);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: .MASK_STORE (_86, 32B, _104, _24);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _6 = *_84;
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _9 = .MASK_LOAD (_85, 32B, _106);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: .MASK_STORE (_85, 32B, _106, _10);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _11 = *_3;
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _13 = .MASK_LOAD (_86, 32B, _52);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _14 = *_84;
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _16 = .MASK_LOAD (_19, 32B, _52);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: .MASK_STORE (_86, 32B, _52, _18);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: _31 = *_84;
vector(8) int
tsvc.c:149:5: note:   got vectype for stmt: *_3 = _32;
vector(8) int
tsvc.c:149:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:149:5: note:   Analyze phi: i_55 = PHI <i_46(10), 0(19)>
tsvc.c:149:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:149:5: note:   step: 1,  init: 0
tsvc.c:149:5: note:   Detected induction.
tsvc.c:149:5: note:   Analyze phi: .MEM_56 = PHI <.MEM_45(10), .MEM_36(D)(19)>
tsvc.c:149:5: note:   Analyze phi: ivtmp_71 = PHI <ivtmp_70(10), 65536(19)>
tsvc.c:149:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:149:5: note:   step: 4294967295,  init: 65536
tsvc.c:149:5: note:   Detected induction.
tsvc.c:149:5: note:   === vect_determine_precisions ===
tsvc.c:149:5: note:   ivtmp_70 has no range info
tsvc.c:149:5: note:   i_46 has range [0x1, 0x10000]
tsvc.c:149:5: note:   can narrow to unsigned:17 without loss of precision: i_46 = i_55 + 1;
tsvc.c:149:5: note:   _32 has no range info
tsvc.c:149:5: note:   _31 has no range info
tsvc.c:149:5: note:   _29 has no range info
tsvc.c:149:5: note:   prephitmp_82 has no range info
tsvc.c:149:5: note:   _ifc__103 has no range info
tsvc.c:149:5: note:   _ifc__102 has no range info
tsvc.c:149:5: note:   prephitmp_80 has no range info
tsvc.c:149:5: note:   _ifc__101 has no range info
tsvc.c:149:5: note:   _ifc__100 has no range info
tsvc.c:149:5: note:   _18 has no range info
tsvc.c:149:5: note:   _17 has no range info
tsvc.c:149:5: note:   _14 has no range info
tsvc.c:149:5: note:   using boolean precision 32 for _106 = _4 <= 0;
tsvc.c:149:5: note:   using boolean precision 32 for _67 = _10 <= _11;
tsvc.c:149:5: note:   using boolean precision 32 for _53 = ~_67;
tsvc.c:149:5: note:   using boolean precision 32 for _52 = _53 & _106;
tsvc.c:149:5: note:   using boolean precision 32 for _66 = _67 & _106;
tsvc.c:149:5: note:   _11 has no range info
tsvc.c:149:5: note:   _10 has no range info
tsvc.c:149:5: note:   _7 has no range info
tsvc.c:149:5: note:   _6 has no range info
tsvc.c:149:5: note:   _24 has no range info
tsvc.c:149:5: note:   _23 has no range info
tsvc.c:149:5: note:   using boolean precision 32 for _104 = _4 > 0;
tsvc.c:149:5: note:   _4 has no range info
tsvc.c:149:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:149:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:149:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:149:5: note:   === vect_pattern_recog ===
tsvc.c:149:5: note:   vect_is_simple_use: operand (long unsigned int) i_55, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: operand i_55 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:149:5: note:   vect_is_simple_use: operand (long unsigned int) i_55, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: operand i_55 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:149:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:149:5: note:   widen_mult pattern recognized: patt_69 = (long unsigned int) patt_105;
tsvc.c:149:5: note:   extra pattern stmt: patt_105 = i_55 w* 4;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:149:5: note:   Detected interleaving load *_3 and *_3
tsvc.c:149:5: note:   Queuing group with duplicate access for fixup
tsvc.c:149:5: note:   Detected interleaving load *_84 and *_84
tsvc.c:149:5: note:   Queuing group with duplicate access for fixup
tsvc.c:149:5: note:   Detected interleaving load *_84 and *_84
tsvc.c:149:5: note:   Detected interleaving load *_85 and *_85
tsvc.c:149:5: note:   Load suitable for SLP vectorization only.
tsvc.c:149:5: note:   Queuing group with duplicate access for fixup
tsvc.c:149:5: note:   Detected interleaving load *_85 and *_85
tsvc.c:149:5: note:   Load suitable for SLP vectorization only.
tsvc.c:149:5: note:   Detected interleaving load *_86 and *_86
tsvc.c:149:5: note:   Load suitable for SLP vectorization only.
tsvc.c:149:5: note:   Queuing group with duplicate access for fixup
tsvc.c:149:5: note:   Detected interleaving load *_86 and *_86
tsvc.c:149:5: note:   Load suitable for SLP vectorization only.
tsvc.c:149:5: note:   Detected interleaving load *_19 and *_19
tsvc.c:149:5: note:   Load suitable for SLP vectorization only.
tsvc.c:149:5: note:   Queuing group with duplicate access for fixup
tsvc.c:149:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:149:5: note:   init: phi relevant? i_55 = PHI <i_46(10), 0(19)>
tsvc.c:149:5: note:   init: phi relevant? .MEM_56 = PHI <.MEM_45(10), .MEM_36(D)(19)>
tsvc.c:149:5: note:   init: phi relevant? ivtmp_71 = PHI <ivtmp_70(10), 65536(19)>
tsvc.c:149:5: note:   init: stmt relevant? _1 = (long unsigned int) i_55;
tsvc.c:149:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:149:5: note:   init: stmt relevant? _3 = a_37(D) + _2;
tsvc.c:149:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:149:5: note:   init: stmt relevant? _84 = d_38(D) + _2;
tsvc.c:149:5: note:   init: stmt relevant? _85 = b_39(D) + _2;
tsvc.c:149:5: note:   init: stmt relevant? _86 = c_41(D) + _2;
tsvc.c:149:5: note:   init: stmt relevant? _19 = e_42(D) + _2;
tsvc.c:149:5: note:   init: stmt relevant? _104 = _4 > 0;
tsvc.c:149:5: note:   init: stmt relevant? _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:   init: stmt relevant? _22 = .MASK_LOAD (_86, 32B, _104);
tsvc.c:149:5: note:   init: stmt relevant? _23 = _20 - _22;
tsvc.c:149:5: note:   init: stmt relevant? _24 = _20 + _23;
tsvc.c:149:5: note:   init: stmt relevant? .MASK_STORE (_86, 32B, _104, _24);
tsvc.c:149:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:149:5: note:   mark relevant 5, live 0: .MASK_STORE (_86, 32B, _104, _24);
tsvc.c:149:5: note:   init: stmt relevant? pretmp_78 = .MASK_LOAD (_85, 32B, _104);
tsvc.c:149:5: note:   init: stmt relevant? _6 = *_84;
tsvc.c:149:5: note:   init: stmt relevant? _7 = _6 * _6;
tsvc.c:149:5: note:   init: stmt relevant? _106 = _4 <= 0;
tsvc.c:149:5: note:   init: stmt relevant? _9 = .MASK_LOAD (_85, 32B, _106);
tsvc.c:149:5: note:   init: stmt relevant? _10 = _7 - _9;
tsvc.c:149:5: note:   init: stmt relevant? .MASK_STORE (_85, 32B, _106, _10);
tsvc.c:149:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:149:5: note:   mark relevant 5, live 0: .MASK_STORE (_85, 32B, _106, _10);
tsvc.c:149:5: note:   init: stmt relevant? _11 = *_3;
tsvc.c:149:5: note:   init: stmt relevant? _67 = _10 <= _11;
tsvc.c:149:5: note:   init: stmt relevant? _66 = _67 & _106;
tsvc.c:149:5: note:   init: stmt relevant? pretmp_81 = .MASK_LOAD (_86, 32B, _66);
tsvc.c:149:5: note:   init: stmt relevant? _53 = ~_67;
tsvc.c:149:5: note:   init: stmt relevant? _52 = _53 & _106;
tsvc.c:149:5: note:   init: stmt relevant? _13 = .MASK_LOAD (_86, 32B, _52);
tsvc.c:149:5: note:   init: stmt relevant? _14 = *_84;
tsvc.c:149:5: note:   init: stmt relevant? _16 = .MASK_LOAD (_19, 32B, _52);
tsvc.c:149:5: note:   init: stmt relevant? _17 = _14 + _16;
tsvc.c:149:5: note:   init: stmt relevant? _18 = _13 + _17;
tsvc.c:149:5: note:   init: stmt relevant? .MASK_STORE (_86, 32B, _52, _18);
tsvc.c:149:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:149:5: note:   mark relevant 5, live 0: .MASK_STORE (_86, 32B, _52, _18);
tsvc.c:149:5: note:   init: stmt relevant? pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:   init: stmt relevant? _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
tsvc.c:149:5: note:   init: stmt relevant? _ifc__101 = _52 ? pretmp_79 : _ifc__100;
tsvc.c:149:5: note:   init: stmt relevant? prephitmp_80 = _66 ? _10 : _ifc__101;
tsvc.c:149:5: note:   init: stmt relevant? _ifc__102 = _4 > 0 ? _24 : _18;
tsvc.c:149:5: note:   init: stmt relevant? _ifc__103 = _52 ? _18 : _ifc__102;
tsvc.c:149:5: note:   init: stmt relevant? prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
tsvc.c:149:5: note:   init: stmt relevant? _29 = prephitmp_80 + prephitmp_82;
tsvc.c:149:5: note:   init: stmt relevant? _31 = *_84;
tsvc.c:149:5: note:   init: stmt relevant? _32 = _29 + _31;
tsvc.c:149:5: note:   init: stmt relevant? *_3 = _32;
tsvc.c:149:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:149:5: note:   mark relevant 5, live 0: *_3 = _32;
tsvc.c:149:5: note:   init: stmt relevant? i_46 = i_55 + 1;
tsvc.c:149:5: note:   init: stmt relevant? ivtmp_70 = ivtmp_71 - 1;
tsvc.c:149:5: note:   init: stmt relevant? if (ivtmp_70 != 0)
tsvc.c:149:5: note:   worklist: examine stmt: *_3 = _32;
tsvc.c:149:5: note:   vect_is_simple_use: operand _29 + _31, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _32 = _29 + _31;
tsvc.c:149:5: note:   worklist: examine stmt: _32 = _29 + _31;
tsvc.c:149:5: note:   vect_is_simple_use: operand prephitmp_80 + prephitmp_82, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _29 = prephitmp_80 + prephitmp_82;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _31 = *_84;
tsvc.c:149:5: note:   worklist: examine stmt: _31 = *_84;
tsvc.c:149:5: note:   worklist: examine stmt: _29 = prephitmp_80 + prephitmp_82;
tsvc.c:149:5: note:   vect_is_simple_use: operand _66 ? _10 : _ifc__101, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: prephitmp_80 = _66 ? _10 : _ifc__101;
tsvc.c:149:5: note:   vect_is_simple_use: operand _66 ? pretmp_81 : _ifc__103, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
tsvc.c:149:5: note:   worklist: examine stmt: prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
tsvc.c:149:5: note:   vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _66 = _67 & _106;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _66), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
tsvc.c:149:5: note:   vect_is_simple_use: operand _52 ? _18 : _ifc__102, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _ifc__103 = _52 ? _18 : _ifc__102;
tsvc.c:149:5: note:   worklist: examine stmt: _ifc__103 = _52 ? _18 : _ifc__102;
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _52 = _53 & _106;
tsvc.c:149:5: note:   vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _18 = _13 + _17;
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0 ? _24 : _18, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _ifc__102 = _4 > 0 ? _24 : _18;
tsvc.c:149:5: note:   worklist: examine stmt: _ifc__102 = _4 > 0 ? _24 : _18;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:149:5: note:   vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _24 = _20 + _23;
tsvc.c:149:5: note:   vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _18 = _13 + _17;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _24 = _20 + _23;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand _20 - _22, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _23 = _20 - _22;
tsvc.c:149:5: note:   worklist: examine stmt: _23 = _20 - _22;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _104), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _22 = .MASK_LOAD (_86, 32B, _104);
tsvc.c:149:5: note:   worklist: examine stmt: _22 = .MASK_LOAD (_86, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _104 = _4 > 0;
tsvc.c:149:5: note:   worklist: examine stmt: _104 = _4 > 0;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _104 = _4 > 0;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:149:5: note:   worklist: examine stmt: _18 = _13 + _17;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _52), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _13 = .MASK_LOAD (_86, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _17 = _14 + _16;
tsvc.c:149:5: note:   worklist: examine stmt: _17 = _14 + _16;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _14 = *_84;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _52), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _16 = .MASK_LOAD (_19, 32B, _52);
tsvc.c:149:5: note:   worklist: examine stmt: _16 = .MASK_LOAD (_19, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _52 = _53 & _106;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _14 = *_84;
tsvc.c:149:5: note:   worklist: examine stmt: _13 = .MASK_LOAD (_86, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _52 = _53 & _106;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _52 = _53 & _106;
tsvc.c:149:5: note:   vect_is_simple_use: operand ~_67, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _53 = ~_67;
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _106 = _4 <= 0;
tsvc.c:149:5: note:   worklist: examine stmt: _106 = _4 <= 0;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _53 = ~_67;
tsvc.c:149:5: note:   vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _67 = _10 <= _11;
tsvc.c:149:5: note:   worklist: examine stmt: _67 = _10 <= _11;
tsvc.c:149:5: note:   vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _10 = _7 - _9;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _11 = *_3;
tsvc.c:149:5: note:   worklist: examine stmt: _11 = *_3;
tsvc.c:149:5: note:   worklist: examine stmt: _10 = _7 - _9;
tsvc.c:149:5: note:   vect_is_simple_use: operand _6 * _6, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _7 = _6 * _6;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _106), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _9 = .MASK_LOAD (_85, 32B, _106);
tsvc.c:149:5: note:   worklist: examine stmt: _9 = .MASK_LOAD (_85, 32B, _106);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _106 = _4 <= 0;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _7 = _6 * _6;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _6 = *_84;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _6 = *_84;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _6 = *_84;
tsvc.c:149:5: note:   worklist: examine stmt: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
tsvc.c:149:5: note:   vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _66 = _67 & _106;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: _66 = _67 & _106;
tsvc.c:149:5: note:   vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _67 = _10 <= _11;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _106 = _4 <= 0;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: prephitmp_80 = _66 ? _10 : _ifc__101;
tsvc.c:149:5: note:   vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _66 = _67 & _106;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _10 = _7 - _9;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand _52 ? pretmp_79 : _ifc__100, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _ifc__101 = _52 ? pretmp_79 : _ifc__100;
tsvc.c:149:5: note:   worklist: examine stmt: _ifc__101 = _52 ? pretmp_79 : _ifc__100;
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _52 = _53 & _106;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0 ? pretmp_78 : pretmp_79, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
tsvc.c:149:5: note:   worklist: examine stmt: _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _104), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _104 = _4 > 0;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _52 = _53 & _106;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: .MASK_STORE (_86, 32B, _52, _18);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _52 = _53 & _106;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _18 = _13 + _17;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: .MASK_STORE (_85, 32B, _106, _10);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _106 = _4 <= 0;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _10 = _7 - _9;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   worklist: examine stmt: .MASK_STORE (_86, 32B, _104, _24);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _104 = _4 > 0;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:   mark relevant 5, live 0: _24 = _20 + _23;
tsvc.c:149:5: note:   already marked relevant/live.
tsvc.c:149:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _20 = .MASK_LOAD (_19, 32B, _104);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _22 = .MASK_LOAD (_86, 32B, _104);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_86, 32B, _104, _24);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _9 = .MASK_LOAD (_85, 32B, _106);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _11 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: *_3 = _32;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _22 = .MASK_LOAD (_86, 32B, _104);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: .MASK_STORE (_86, 32B, _104, _24);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _6 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _9 = .MASK_LOAD (_85, 32B, _106);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _11 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: .MASK_STORE (_86, 32B, _104, _24);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _6 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _9 = .MASK_LOAD (_85, 32B, _106);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _11 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: _6 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: _9 = .MASK_LOAD (_85, 32B, _106);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: _11 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: _6 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: _9 = .MASK_LOAD (_85, 32B, _106);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: _11 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: _9 = .MASK_LOAD (_85, 32B, _106);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: _11 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: _14 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: _31 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: _11 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: _11 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: *_3 = _32;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_86, 32B, _52);
  stmt_b: _14 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_86, 32B, _52);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_86, 32B, _52);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_86, 32B, _52);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_86, 32B, _52);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_86, 32B, _52);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_84;
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_84;
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_84;
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _14 = *_84;
  stmt_b: _31 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _14 = *_84;
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_19, 32B, _52);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_19, 32B, _52);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_19, 32B, _52);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_19, 32B, _52);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _52, _18);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _52, _18);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _52, _18);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
  stmt_b: _31 = *_84;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _31 = *_84;
  stmt_b: *_3 = _32;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _20 = .MASK_LOAD (_19, 32B, _104);
  stmt_b: _20 = .MASK_LOAD (_19, 32B, _104);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _22 = .MASK_LOAD (_86, 32B, _104);
  stmt_b: _22 = .MASK_LOAD (_86, 32B, _104);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _104, _24);
  stmt_b: .MASK_STORE (_86, 32B, _104, _24);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
  stmt_b: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_84;
  stmt_b: _6 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _9 = .MASK_LOAD (_85, 32B, _106);
  stmt_b: _9 = .MASK_LOAD (_85, 32B, _106);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_85, 32B, _106, _10);
  stmt_b: .MASK_STORE (_85, 32B, _106, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _11 = *_3;
  stmt_b: _11 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
  stmt_b: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_86, 32B, _52);
  stmt_b: _13 = .MASK_LOAD (_86, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _14 = *_84;
  stmt_b: _14 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _16 = .MASK_LOAD (_19, 32B, _52);
  stmt_b: _16 = .MASK_LOAD (_19, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_86, 32B, _52, _18);
  stmt_b: .MASK_STORE (_86, 32B, _52, _18);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
  stmt_b: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _31 = *_84;
  stmt_b: _31 = *_84;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: *_3 = _32;
  stmt_b: *_3 = _32;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:151:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_86
consider run-time aliasing test between *_3 and *_86
tsvc.c:151:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_85
consider run-time aliasing test between *_3 and *_85
tsvc.c:151:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_86
consider run-time aliasing test between *_3 and *_86
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:163:25: missed:   versioning for alias required: can't determine dependence between *_19 and *_86
consider run-time aliasing test between *_19 and *_86
tsvc.c:163:25: missed:   versioning for alias required: can't determine dependence between *_19 and *_85
consider run-time aliasing test between *_19 and *_85
tsvc.c:163:25: missed:   versioning for alias required: can't determine dependence between *_19 and *_86
consider run-time aliasing test between *_19 and *_86
tsvc.c:163:25: missed:   versioning for alias required: can't determine dependence between *_19 and *_3
consider run-time aliasing test between *_19 and *_3
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_86 and *_86
tsvc.c:163:18: missed:   versioning for alias required: can't determine dependence between *_86 and *_85
consider run-time aliasing test between *_86 and *_85
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_86 and *_86
tsvc.c:163:18: missed:   versioning for alias required: can't determine dependence between *_86 and *_3
consider run-time aliasing test between *_86 and *_3
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_85
consider run-time aliasing test between *_86 and *_85
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_84
consider run-time aliasing test between *_86 and *_84
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_85
consider run-time aliasing test between *_86 and *_85
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_85
consider run-time aliasing test between *_86 and *_85
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_3
consider run-time aliasing test between *_86 and *_3
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_86 and *_86
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_86 and *_86
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_84
consider run-time aliasing test between *_86 and *_84
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_19
consider run-time aliasing test between *_86 and *_19
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_86 and *_86
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_85
consider run-time aliasing test between *_86 and *_85
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_84
consider run-time aliasing test between *_86 and *_84
tsvc.c:163:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_3
consider run-time aliasing test between *_86 and *_3
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_85 and *_85
tsvc.c:165:17: missed:   versioning for alias required: can't determine dependence between *_85 and *_86
consider run-time aliasing test between *_85 and *_86
tsvc.c:165:17: missed:   versioning for alias required: can't determine dependence between *_85 and *_3
consider run-time aliasing test between *_85 and *_3
tsvc.c:155:25: missed:   versioning for alias required: can't determine dependence between *_84 and *_85
consider run-time aliasing test between *_84 and *_85
tsvc.c:155:25: missed:   versioning for alias required: can't determine dependence between *_84 and *_86
consider run-time aliasing test between *_84 and *_86
tsvc.c:155:25: missed:   versioning for alias required: can't determine dependence between *_84 and *_3
consider run-time aliasing test between *_84 and *_3
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_85 and *_85
tsvc.c:155:18: missed:   versioning for alias required: can't determine dependence between *_85 and *_86
consider run-time aliasing test between *_85 and *_86
tsvc.c:155:18: missed:   versioning for alias required: can't determine dependence between *_85 and *_3
consider run-time aliasing test between *_85 and *_3
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_3
consider run-time aliasing test between *_85 and *_3
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_86
consider run-time aliasing test between *_85 and *_86
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_86
consider run-time aliasing test between *_85 and *_86
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_84
consider run-time aliasing test between *_85 and *_84
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_19
consider run-time aliasing test between *_85 and *_19
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_86
consider run-time aliasing test between *_85 and *_86
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_85 and *_85
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_84
consider run-time aliasing test between *_85 and *_84
tsvc.c:155:14: missed:   versioning for alias required: can't determine dependence between *_85 and *_3
consider run-time aliasing test between *_85 and *_3
tsvc.c:156:22: missed:   versioning for alias required: can't determine dependence between *_3 and *_86
consider run-time aliasing test between *_3 and *_86
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_86 and *_86
tsvc.c:165:24: missed:   versioning for alias required: can't determine dependence between *_86 and *_3
consider run-time aliasing test between *_86 and *_3
tsvc.c:149:5: note:   dependence distance  = 0.
tsvc.c:149:5: note:   dependence distance == 0 between *_86 and *_86
tsvc.c:160:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_3
consider run-time aliasing test between *_86 and *_3
tsvc.c:160:18: missed:   versioning for alias required: can't determine dependence between *_84 and *_86
consider run-time aliasing test between *_84 and *_86
tsvc.c:160:18: missed:   versioning for alias required: can't determine dependence between *_84 and *_3
consider run-time aliasing test between *_84 and *_3
tsvc.c:160:25: missed:   versioning for alias required: can't determine dependence between *_19 and *_86
consider run-time aliasing test between *_19 and *_86
tsvc.c:160:25: missed:   versioning for alias required: can't determine dependence between *_19 and *_3
consider run-time aliasing test between *_19 and *_3
tsvc.c:160:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_85
consider run-time aliasing test between *_86 and *_85
tsvc.c:160:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_84
consider run-time aliasing test between *_86 and *_84
tsvc.c:160:14: missed:   versioning for alias required: can't determine dependence between *_86 and *_3
consider run-time aliasing test between *_86 and *_3
tsvc.c:165:17: missed:   versioning for alias required: can't determine dependence between *_85 and *_3
consider run-time aliasing test between *_85 and *_3
tsvc.c:165:31: missed:   versioning for alias required: can't determine dependence between *_84 and *_3
consider run-time aliasing test between *_84 and *_3
tsvc.c:149:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:149:5: note:   ==> examining phi: i_55 = PHI <i_46(10), 0(19)>
tsvc.c:149:5: note:   ==> examining phi: .MEM_56 = PHI <.MEM_45(10), .MEM_36(D)(19)>
tsvc.c:149:5: note:   ==> examining phi: ivtmp_71 = PHI <ivtmp_70(10), 65536(19)>
tsvc.c:149:5: note:   ==> examining statement: _1 = (long unsigned int) i_55;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining pattern def stmt: patt_105 = i_55 w* 4;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining pattern statement: patt_69 = (long unsigned int) patt_105;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: _3 = a_37(D) + _2;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _84 = d_38(D) + _2;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: _85 = b_39(D) + _2;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: _86 = c_41(D) + _2;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: _19 = e_42(D) + _2;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: _104 = _4 > 0;
tsvc.c:149:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _22 = .MASK_LOAD (_86, 32B, _104);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _23 = _20 - _22;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _24 = _20 + _23;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: .MASK_STORE (_86, 32B, _104, _24);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _6 = *_84;
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _7 = _6 * _6;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _106 = _4 <= 0;
tsvc.c:149:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _9 = .MASK_LOAD (_85, 32B, _106);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _10 = _7 - _9;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: .MASK_STORE (_85, 32B, _106, _10);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _11 = *_3;
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _67 = _10 <= _11;
tsvc.c:149:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _66 = _67 & _106;
tsvc.c:149:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _53 = ~_67;
tsvc.c:149:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _52 = _53 & _106;
tsvc.c:149:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _13 = .MASK_LOAD (_86, 32B, _52);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _14 = *_84;
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _16 = .MASK_LOAD (_19, 32B, _52);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _17 = _14 + _16;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _18 = _13 + _17;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: .MASK_STORE (_86, 32B, _52, _18);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _ifc__101 = _52 ? pretmp_79 : _ifc__100;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: prephitmp_80 = _66 ? _10 : _ifc__101;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _ifc__102 = _4 > 0 ? _24 : _18;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _ifc__103 = _52 ? _18 : _ifc__102;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _29 = prephitmp_80 + prephitmp_82;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _31 = *_84;
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: _32 = _29 + _31;
tsvc.c:149:5: note:   get vectype for scalar type: int
tsvc.c:149:5: note:   vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: *_3 = _32;
tsvc.c:149:5: note:   precomputed vectype: vector(8) int
tsvc.c:149:5: note:   nunits = 8
tsvc.c:149:5: note:   ==> examining statement: i_46 = i_55 + 1;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: ivtmp_70 = ivtmp_71 - 1;
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   ==> examining statement: if (ivtmp_70 != 0)
tsvc.c:149:5: note:   skip.
tsvc.c:149:5: note:   vectorization factor = 8
tsvc.c:149:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x510bda0 *_3 1 times scalar_load costs 12 in body
0x510bda0 _4 > 0 1 times scalar_stmt costs 4 in body
0x510bda0 .MASK_LOAD (_19, 32B, _104) 1 times scalar_load costs 12 in body
0x510bda0 .MASK_LOAD (_86, 32B, _104) 1 times scalar_load costs 12 in body
0x510bda0 _20 - _22 1 times scalar_stmt costs 4 in body
0x510bda0 _20 + _23 1 times scalar_stmt costs 4 in body
0x510bda0 .MASK_STORE (_86, 32B, _104, _24) 1 times scalar_store costs 12 in body
0x510bda0 .MASK_LOAD (_85, 32B, _104) 1 times scalar_load costs 12 in body
0x510bda0 *_84 1 times scalar_load costs 12 in body
0x510bda0 _6 * _6 1 times scalar_stmt costs 12 in body
0x510bda0 _4 <= 0 1 times scalar_stmt costs 4 in body
0x510bda0 .MASK_LOAD (_85, 32B, _106) 1 times scalar_load costs 12 in body
0x510bda0 _7 - _9 1 times scalar_stmt costs 4 in body
0x510bda0 .MASK_STORE (_85, 32B, _106, _10) 1 times scalar_store costs 12 in body
0x510bda0 *_3 1 times scalar_load costs 12 in body
0x510bda0 _10 <= _11 1 times scalar_stmt costs 4 in body
0x510bda0 _67 & _106 1 times scalar_stmt costs 4 in body
0x510bda0 .MASK_LOAD (_86, 32B, _66) 1 times scalar_load costs 12 in body
0x510bda0 ~_67 1 times scalar_stmt costs 4 in body
0x510bda0 _53 & _106 1 times scalar_stmt costs 4 in body
0x510bda0 .MASK_LOAD (_86, 32B, _52) 1 times scalar_load costs 12 in body
0x510bda0 *_84 1 times scalar_load costs 12 in body
0x510bda0 .MASK_LOAD (_19, 32B, _52) 1 times scalar_load costs 12 in body
0x510bda0 _14 + _16 1 times scalar_stmt costs 4 in body
0x510bda0 _13 + _17 1 times scalar_stmt costs 4 in body
0x510bda0 .MASK_STORE (_86, 32B, _52, _18) 1 times scalar_store costs 12 in body
0x510bda0 .MASK_LOAD (_85, 32B, _52) 1 times scalar_load costs 12 in body
0x510bda0 _4 > 0 ? pretmp_78 : pretmp_79 1 times scalar_stmt costs 4 in body
0x510bda0 _52 ? pretmp_79 : _ifc__100 1 times scalar_stmt costs 4 in body
0x510bda0 _66 ? _10 : _ifc__101 1 times scalar_stmt costs 4 in body
0x510bda0 _4 > 0 ? _24 : _18 1 times scalar_stmt costs 4 in body
0x510bda0 _52 ? _18 : _ifc__102 1 times scalar_stmt costs 4 in body
0x510bda0 _66 ? pretmp_81 : _ifc__103 1 times scalar_stmt costs 4 in body
0x510bda0 prephitmp_80 + prephitmp_82 1 times scalar_stmt costs 4 in body
0x510bda0 *_84 1 times scalar_load costs 12 in body
0x510bda0 _29 + _31 1 times scalar_stmt costs 4 in body
0x510bda0 _32 1 times scalar_store costs 12 in body
tsvc.c:149:5: note:   === vect_analyze_slp ===
tsvc.c:149:5: note:   === vect_make_slp_decision ===
tsvc.c:149:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:149:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:149:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:149:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:149:5: note:   accesses have the same alignment: *_19 and *_19
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_85 and *_85
tsvc.c:149:5: note:   accesses have the same alignment: *_85 and *_85
tsvc.c:149:5: note:   accesses have the same alignment: *_85 and *_85
tsvc.c:149:5: note:   accesses have the same alignment: *_84 and *_84
tsvc.c:149:5: note:   accesses have the same alignment: *_84 and *_84
tsvc.c:149:5: note:   accesses have the same alignment: *_85 and *_85
tsvc.c:149:5: note:   accesses have the same alignment: *_85 and *_85
tsvc.c:149:5: note:   accesses have the same alignment: *_85 and *_85
tsvc.c:149:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_86 and *_86
tsvc.c:149:5: note:   accesses have the same alignment: *_84 and *_84
tsvc.c:149:5: note:   recording new base alignment for a_37(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:149:5: note:   recording new base alignment for d_38(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_84;
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_3
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_19
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_86
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_86
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_85
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_84
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_85
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_85
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_3
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_86
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_86
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_84
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_19
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_86
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_85
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_84
tsvc.c:149:5: note:   vect_compute_data_ref_alignment:
tsvc.c:149:5: note:   can't force alignment of ref: *_3
tsvc.c:149:5: note:   === vect_prune_runtime_alias_test_list ===
found equal ranges *_3, *_84 and *_3, *_84
found equal ranges *_3, *_84 and *_3, *_84
found equal ranges *_3, *_85 and *_3, *_85
found equal ranges *_3, *_85 and *_3, *_85
found equal ranges *_3, *_85 and *_3, *_85
found equal ranges *_3, *_85 and *_3, *_85
found equal ranges *_3, *_85 and *_3, *_85
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_86 and *_3, *_86
found equal ranges *_3, *_19 and *_3, *_19
found equal ranges *_84, *_85 and *_84, *_85
found equal ranges *_84, *_85 and *_84, *_85
found equal ranges *_84, *_86 and *_84, *_86
found equal ranges *_84, *_86 and *_84, *_86
found equal ranges *_84, *_86 and *_84, *_86
found equal ranges *_84, *_86 and *_84, *_86
found equal ranges *_84, *_86 and *_84, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_86 and *_85, *_86
found equal ranges *_85, *_19 and *_85, *_19
found equal ranges *_86, *_19 and *_86, *_19
found equal ranges *_86, *_19 and *_86, *_19
found equal ranges *_86, *_19 and *_86, *_19
merged alias checks:
  reference:      *_84 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_3 vs. *_85
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW ARBITRARY
  reference:      *_3 vs. *_86
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW ARBITRARY
  reference:      *_19 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_84 vs. *_85
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_84 vs. *_86
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_85 vs. *_86
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR WAW ARBITRARY
  reference:      *_85 vs. *_19
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
  reference:      *_86 vs. *_19
  segment length: 28
  access size:    4
  alignment:      4
  flags:          RAW WAR ARBITRARY
tsvc.c:149:5: note:   improved number of alias checks from 46 to 9
tsvc.c:149:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:149:5: note:   vect_can_advance_ivs_p:
tsvc.c:149:5: note:   Analyze phi: i_55 = PHI <i_46(10), 0(19)>
tsvc.c:149:5: note:   Analyze phi: .MEM_56 = PHI <.MEM_45(10), .MEM_36(D)(19)>
tsvc.c:149:5: note:   reduc or virtual phi. skip.
tsvc.c:149:5: note:   Analyze phi: ivtmp_71 = PHI <ivtmp_70(10), 65536(19)>
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 220, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 240, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 260, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 280, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 300, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 320, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 340, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 220, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 240, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 260, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: aligned.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 280, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 300, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 320, outside_cost = 0.
tsvc.c:149:5: note:   Setting misalignment to unknown (-1).
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 340, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 140, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 160, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 180, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 200, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 220, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 240, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 260, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 280, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 300, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 320, outside_cost = 0.
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_get_data_access_cost: inside_cost = 340, outside_cost = 0.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   Vectorizing an unaligned access.
tsvc.c:149:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:149:5: note:   === vect_analyze_loop_operations ===
tsvc.c:149:5: note:   examining phi: i_55 = PHI <i_46(10), 0(19)>
tsvc.c:149:5: note:   examining phi: .MEM_56 = PHI <.MEM_45(10), .MEM_36(D)(19)>
tsvc.c:149:5: note:   examining phi: ivtmp_71 = PHI <ivtmp_70(10), 65536(19)>
tsvc.c:149:5: note:   ==> examining statement: _1 = (long unsigned int) i_55;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: _3 = a_37(D) + _2;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _84 = d_38(D) + _2;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: _85 = b_39(D) + _2;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: _86 = c_41(D) + _2;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: _19 = e_42(D) + _2;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: _104 = _4 > 0;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:149:5: note:   ==> examining statement: _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _22 = .MASK_LOAD (_86, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _23 = _20 - _22;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _104), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _24 = _20 + _23;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _20 - _22, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: .MASK_STORE (_86, 32B, _104, _24);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _6 = *_84;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _7 = _6 * _6;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _106 = _4 <= 0;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:149:5: note:   ==> examining statement: _9 = .MASK_LOAD (_85, 32B, _106);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _10 = _7 - _9;
tsvc.c:149:5: note:   vect_is_simple_use: operand _6 * _6, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _106), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: .MASK_STORE (_85, 32B, _106, _10);
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _11 = *_3;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _67 = _10 <= _11;
tsvc.c:149:5: note:   vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _66 = _67 & _106;
tsvc.c:149:5: note:   vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
tsvc.c:149:5: note:   vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _53 = ~_67;
tsvc.c:149:5: note:   vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _52 = _53 & _106;
tsvc.c:149:5: note:   vect_is_simple_use: operand ~_67, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _13 = .MASK_LOAD (_86, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _14 = *_84;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _16 = .MASK_LOAD (_19, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _17 = _14 + _16;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _52), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _18 = _13 + _17;
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _52), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: .MASK_STORE (_86, 32B, _52, _18);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _104), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:149:5: note:   ==> examining statement: _ifc__101 = _52 ? pretmp_79 : _ifc__100;
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0 ? pretmp_78 : pretmp_79, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: prephitmp_80 = _66 ? _10 : _ifc__101;
tsvc.c:149:5: note:   vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _52 ? pretmp_79 : _ifc__100, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _ifc__102 = _4 > 0 ? _24 : _18;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:149:5: note:   ==> examining statement: _ifc__103 = _52 ? _18 : _ifc__102;
tsvc.c:149:5: note:   vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _4 > 0 ? _24 : _18, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
tsvc.c:149:5: note:   vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:   vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _66), type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _52 ? _18 : _ifc__102, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _29 = prephitmp_80 + prephitmp_82;
tsvc.c:149:5: note:   vect_is_simple_use: operand _66 ? _10 : _ifc__101, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand _66 ? pretmp_81 : _ifc__103, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _31 = *_84;
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: unknown
tsvc.c:149:5: missed:   Unsupported pattern.
tsvc.c:149:5: missed:   use not simple.
tsvc.c:149:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: _32 = _29 + _31;
tsvc.c:149:5: note:   vect_is_simple_use: operand prephitmp_80 + prephitmp_82, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:    === vectorizable_operation ===
tsvc.c:149:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: *_3 = _32;
tsvc.c:149:5: note:   vect_is_simple_use: operand _29 + _31, type of def: internal
tsvc.c:149:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:149:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:149:5: note:   ==> examining statement: i_46 = i_55 + 1;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: ivtmp_70 = ivtmp_71 - 1;
tsvc.c:149:5: note:   irrelevant.
tsvc.c:149:5: note:   ==> examining statement: if (ivtmp_70 != 0)
tsvc.c:149:5: note:   irrelevant.
0x527add0 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _4 > 0 1 times scalar_to_vec costs 4 in prologue
0x527add0 _4 > 0 1 times vector_stmt costs 4 in body
0x527add0 .MASK_LOAD (_19, 32B, _104) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 .MASK_LOAD (_86, 32B, _104) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _20 - _22 1 times vector_stmt costs 4 in body
0x527add0 _20 + _23 1 times vector_stmt costs 4 in body
0x527add0 .MASK_STORE (_86, 32B, _104, _24) 1 times unaligned_store (misalign -1) costs 20 in body
0x527add0 .MASK_LOAD (_85, 32B, _104) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 *_84 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _6 * _6 1 times vector_stmt costs 16 in body
0x527add0 _4 <= 0 1 times scalar_to_vec costs 4 in prologue
0x527add0 _4 <= 0 1 times vector_stmt costs 4 in body
0x527add0 .MASK_LOAD (_85, 32B, _106) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _7 - _9 1 times vector_stmt costs 4 in body
0x527add0 .MASK_STORE (_85, 32B, _106, _10) 1 times unaligned_store (misalign -1) costs 20 in body
0x527add0 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _10 <= _11 1 times vector_stmt costs 4 in body
0x527add0 _67 & _106 1 times vector_stmt costs 4 in body
0x527add0 .MASK_LOAD (_86, 32B, _66) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 ~_67 1 times vector_stmt costs 4 in body
0x527add0 _53 & _106 1 times vector_stmt costs 4 in body
0x527add0 .MASK_LOAD (_86, 32B, _52) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 *_84 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 .MASK_LOAD (_19, 32B, _52) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _14 + _16 1 times vector_stmt costs 4 in body
0x527add0 _13 + _17 1 times vector_stmt costs 4 in body
0x527add0 .MASK_STORE (_86, 32B, _52, _18) 1 times unaligned_store (misalign -1) costs 20 in body
0x527add0 .MASK_LOAD (_85, 32B, _52) 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _4 > 0 ? pretmp_78 : pretmp_79 1 times scalar_to_vec costs 4 in prologue
0x527add0 _4 > 0 ? pretmp_78 : pretmp_79 1 times vector_stmt costs 4 in body
0x527add0 _52 ? pretmp_79 : _ifc__100 1 times vector_stmt costs 4 in body
0x527add0 _66 ? _10 : _ifc__101 1 times vector_stmt costs 4 in body
0x527add0 _4 > 0 ? _24 : _18 1 times scalar_to_vec costs 4 in prologue
0x527add0 _4 > 0 ? _24 : _18 1 times vector_stmt costs 4 in body
0x527add0 _52 ? _18 : _ifc__102 1 times vector_stmt costs 4 in body
0x527add0 _66 ? pretmp_81 : _ifc__103 1 times vector_stmt costs 4 in body
0x527add0 prephitmp_80 + prephitmp_82 1 times vector_stmt costs 4 in body
0x527add0 *_84 1 times unaligned_load (misalign -1) costs 20 in body
0x527add0 _29 + _31 1 times vector_stmt costs 4 in body
0x527add0 _32 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_70 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) a_37(D) + 4 * iteration does not wrap in statement _3 = a_37(D) + _2;
 in loop 1.
Statement _3 = a_37(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_38(D) + 4 * iteration does not wrap in statement _84 = d_38(D) + _2;
 in loop 1.
Statement _84 = d_38(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_39(D) + 4 * iteration does not wrap in statement _85 = b_39(D) + _2;
 in loop 1.
Statement _85 = b_39(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_41(D) + 4 * iteration does not wrap in statement _86 = c_41(D) + _2;
 in loop 1.
Statement _86 = c_41(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) e_42(D) + 4 * iteration does not wrap in statement _19 = e_42(D) + _2;
 in loop 1.
Statement _19 = e_42(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_46 = i_55 + 1;
 in loop 1.
Statement i_46 = i_55 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:149:5: note:  not using a fully-masked loop.
0x527add0 <unknown> 9 times vector_stmt costs 36 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x527add0 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:149:5: note:  Cost model analysis: 
  Vector inside of loop cost: 432
  Vector prologue cost: 68
  Vector epilogue cost: 0
  Scalar iteration cost: 292
  Scalar outside cost: 8
  Vector outside cost: 68
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:149:5: note:    Runtime profitability threshold = 8
tsvc.c:149:5: note:    Static estimate profitability threshold = 8
tsvc.c:149:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:149:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:149:5: note:  ***** Choosing vector mode V8SI
tsvc.c:149:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:149:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_84 and *_3
using an address-based WAR/WAW test
create runtime check for data references *_3 and *_85
using an address-based overlap test
create runtime check for data references *_3 and *_86
using an address-based overlap test
create runtime check for data references *_19 and *_3
using an address-based WAR/WAW test
create runtime check for data references *_84 and *_85
using an address-based overlap test
create runtime check for data references *_84 and *_86
using an address-based overlap test
create runtime check for data references *_85 and *_86
using an address-based overlap test
create runtime check for data references *_85 and *_19
using an address-based overlap test
create runtime check for data references *_86 and *_19
using an address-based overlap test
tsvc.c:149:5: note:  created 9 versioning for alias checks.
tsvc.c:149:5: note:  trying to apply versioning to outer loop 0
tsvc.c:149:5: note:  reusing loop version created by if conversion
tsvc.c:149:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:149:5: note:  ------>vectorizing phi: i_55 = PHI <i_46(10), 0(23)>
tsvc.c:149:5: note:  ------>vectorizing phi: .MEM_56 = PHI <.MEM_45(10), .MEM_36(D)(23)>
tsvc.c:149:5: note:  ------>vectorizing phi: ivtmp_71 = PHI <ivtmp_70(10), 65536(23)>
tsvc.c:149:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_55;
tsvc.c:149:5: note:  ------>vectorizing statement: patt_105 = i_55 w* 4;
tsvc.c:149:5: note:  ------>vectorizing statement: patt_69 = (long unsigned int) patt_105;
tsvc.c:149:5: note:  ------>vectorizing statement: _3 = a_37(D) + _2;
tsvc.c:149:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_37(D)
tsvc.c:149:5: note:  created a_37(D)
tsvc.c:149:5: note:  add new stmt: vect__4.595_149 = MEM <vector(8) int> [(int *)vectp_a.593_147];
tsvc.c:149:5: note:  ------>vectorizing statement: _84 = d_38(D) + _2;
tsvc.c:149:5: note:  ------>vectorizing statement: _85 = b_39(D) + _2;
tsvc.c:149:5: note:  ------>vectorizing statement: _86 = c_41(D) + _2;
tsvc.c:149:5: note:  ------>vectorizing statement: _19 = e_42(D) + _2;
tsvc.c:149:5: note:  ------>vectorizing statement: _104 = _4 > 0;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _4 = *_3;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:149:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:  created new init_stmt: vect_cst__150 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:149:5: note:  add new stmt: mask__104.596_151 = vect__4.595_149 > vect_cst__150;
tsvc.c:149:5: note:  ------>vectorizing statement: _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_42(D)
tsvc.c:149:5: note:  created e_42(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _104
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _104 = _4 > 0;
tsvc.c:149:5: note:  add new stmt: vect__20.599_154 = .MASK_LOAD (vectp_e.597_152, 32B, mask__104.596_151);
tsvc.c:149:5: note:  ------>vectorizing statement: _22 = .MASK_LOAD (_86, 32B, _104);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_41(D)
tsvc.c:149:5: note:  created c_41(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _104
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _104 = _4 > 0;
tsvc.c:149:5: note:  add new stmt: vect__22.602_157 = .MASK_LOAD (vectp_c.600_155, 32B, mask__104.596_151);
tsvc.c:149:5: note:  ------>vectorizing statement: _23 = _20 - _22;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _104), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _20
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:    def_stmt =  _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _22
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _104), type of def: internal
tsvc.c:149:5: note:    def_stmt =  _22 = .MASK_LOAD (_86, 32B, _104);
tsvc.c:149:5: note:  add new stmt: vect__23.603_158 = vect__20.599_154 - vect__22.602_157;
tsvc.c:149:5: note:  ------>vectorizing statement: _24 = _20 + _23;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _20 - _22, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _20
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _104), type of def: internal
tsvc.c:149:5: note:    def_stmt =  _20 = .MASK_LOAD (_19, 32B, _104);
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _23
tsvc.c:149:5: note:  vect_is_simple_use: operand _20 - _22, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _23 = _20 - _22;
tsvc.c:149:5: note:  add new stmt: vect__24.604_159 = vect__20.599_154 + vect__23.603_158;
tsvc.c:149:5: note:  ------>vectorizing statement: .MASK_STORE (_86, 32B, _104, _24);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform store. ncopies = 1
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _24
tsvc.c:149:5: note:  vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _24 = _20 + _23;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _104
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _104 = _4 > 0;
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_41(D)
tsvc.c:149:5: note:  created c_41(D)
tsvc.c:149:5: note:  add new stmt: .MASK_STORE (vectp_c.605_160, 32B, mask__104.596_151, vect__24.604_159);
tsvc.c:149:5: note:  ------>vectorizing statement: pretmp_78 = .MASK_LOAD (_85, 32B, _104);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_39(D)
tsvc.c:149:5: note:  created b_39(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _104
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _104 = _4 > 0;
tsvc.c:149:5: note:  add new stmt: vect_pretmp_78.609_165 = .MASK_LOAD (vectp_b.607_163, 32B, mask__104.596_151);
tsvc.c:149:5: note:  ------>vectorizing statement: _6 = *_84;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_38(D)
tsvc.c:149:5: note:  created d_38(D)
tsvc.c:149:5: note:  add new stmt: vect__6.612_168 = MEM <vector(8) int> [(int *)vectp_d.610_166];
tsvc.c:149:5: note:  ------>vectorizing statement: _7 = _6 * _6;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _6 = *_84;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _6 = *_84;
tsvc.c:149:5: note:  add new stmt: vect__7.613_169 = vect__6.612_168 * vect__6.612_168;
tsvc.c:149:5: note:  ------>vectorizing statement: _106 = _4 <= 0;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _4 = *_3;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:149:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:  created new init_stmt: vect_cst__170 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:149:5: note:  add new stmt: mask__106.614_171 = vect__4.595_149 <= vect_cst__170;
tsvc.c:149:5: note:  ------>vectorizing statement: _9 = .MASK_LOAD (_85, 32B, _106);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_39(D)
tsvc.c:149:5: note:  created b_39(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _106
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _106 = _4 <= 0;
tsvc.c:149:5: note:  add new stmt: vect__9.617_174 = .MASK_LOAD (vectp_b.615_172, 32B, mask__106.614_171);
tsvc.c:149:5: note:  ------>vectorizing statement: _10 = _7 - _9;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _6 * _6, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _106), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _7
tsvc.c:149:5: note:  vect_is_simple_use: operand _6 * _6, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _7 = _6 * _6;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _106), type of def: internal
tsvc.c:149:5: note:    def_stmt =  _9 = .MASK_LOAD (_85, 32B, _106);
tsvc.c:149:5: note:  add new stmt: vect__10.618_175 = vect__7.613_169 - vect__9.617_174;
tsvc.c:149:5: note:  ------>vectorizing statement: .MASK_STORE (_85, 32B, _106, _10);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform store. ncopies = 1
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:149:5: note:  vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _10 = _7 - _9;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _106
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _106 = _4 <= 0;
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_39(D)
tsvc.c:149:5: note:  created b_39(D)
tsvc.c:149:5: note:  add new stmt: .MASK_STORE (vectp_b.619_176, 32B, mask__106.614_171, vect__10.618_175);
tsvc.c:149:5: note:  ------>vectorizing statement: _11 = *_3;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_37(D)
tsvc.c:149:5: note:  created a_37(D)
tsvc.c:149:5: note:  add new stmt: vect__11.623_181 = MEM <vector(8) int> [(int *)vectp_a.621_179];
tsvc.c:149:5: note:  ------>vectorizing statement: _67 = _10 <= _11;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:149:5: note:  vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _10 = _7 - _9;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _11
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _11 = *_3;
tsvc.c:149:5: note:  add new stmt: mask__67.624_182 = vect__10.618_175 <= vect__11.623_181;
tsvc.c:149:5: note:  ------>vectorizing statement: _66 = _67 & _106;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _67
tsvc.c:149:5: note:  vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _67 = _10 <= _11;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _106
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _106 = _4 <= 0;
tsvc.c:149:5: note:  add new stmt: mask__66.625_183 = mask__67.624_182 & mask__106.614_171;
tsvc.c:149:5: note:  ------>vectorizing statement: pretmp_81 = .MASK_LOAD (_86, 32B, _66);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_41(D)
tsvc.c:149:5: note:  created c_41(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _66
tsvc.c:149:5: note:  vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _66 = _67 & _106;
tsvc.c:149:5: note:  add new stmt: vect_pretmp_81.628_186 = .MASK_LOAD (vectp_c.626_184, 32B, mask__66.625_183);
tsvc.c:149:5: note:  ------>vectorizing statement: _53 = ~_67;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _67
tsvc.c:149:5: note:  vect_is_simple_use: operand _10 <= _11, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _67 = _10 <= _11;
tsvc.c:149:5: note:  add new stmt: mask__53.629_187 = ~mask__67.624_182;
tsvc.c:149:5: note:  ------>vectorizing statement: _52 = _53 & _106;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand ~_67, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _53
tsvc.c:149:5: note:  vect_is_simple_use: operand ~_67, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _53 = ~_67;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _106
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 <= 0, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _106 = _4 <= 0;
tsvc.c:149:5: note:  add new stmt: mask__52.630_188 = mask__53.629_187 & mask__106.614_171;
tsvc.c:149:5: note:  ------>vectorizing statement: _13 = .MASK_LOAD (_86, 32B, _52);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_41(D)
tsvc.c:149:5: note:  created c_41(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _52
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _52 = _53 & _106;
tsvc.c:149:5: note:  add new stmt: vect__13.633_191 = .MASK_LOAD (vectp_c.631_189, 32B, mask__52.630_188);
tsvc.c:149:5: note:  ------>vectorizing statement: _14 = *_84;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_38(D)
tsvc.c:149:5: note:  created d_38(D)
tsvc.c:149:5: note:  add new stmt: vect__14.636_194 = MEM <vector(8) int> [(int *)vectp_d.634_192];
tsvc.c:149:5: note:  ------>vectorizing statement: _16 = .MASK_LOAD (_19, 32B, _52);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_42(D)
tsvc.c:149:5: note:  created e_42(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _52
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _52 = _53 & _106;
tsvc.c:149:5: note:  add new stmt: vect__16.639_197 = .MASK_LOAD (vectp_e.637_195, 32B, mask__52.630_188);
tsvc.c:149:5: note:  ------>vectorizing statement: _17 = _14 + _16;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _52), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _14
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _14 = *_84;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _16
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_19, 32B, _52), type of def: internal
tsvc.c:149:5: note:    def_stmt =  _16 = .MASK_LOAD (_19, 32B, _52);
tsvc.c:149:5: note:  add new stmt: vect__17.640_198 = vect__14.636_194 + vect__16.639_197;
tsvc.c:149:5: note:  ------>vectorizing statement: _18 = _13 + _17;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _52), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _13
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _52), type of def: internal
tsvc.c:149:5: note:    def_stmt =  _13 = .MASK_LOAD (_86, 32B, _52);
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _17
tsvc.c:149:5: note:  vect_is_simple_use: operand _14 + _16, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _17 = _14 + _16;
tsvc.c:149:5: note:  add new stmt: vect__18.641_199 = vect__13.633_191 + vect__17.640_198;
tsvc.c:149:5: note:  ------>vectorizing statement: .MASK_STORE (_86, 32B, _52, _18);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform store. ncopies = 1
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _18
tsvc.c:149:5: note:  vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _18 = _13 + _17;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _52
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _52 = _53 & _106;
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_41(D)
tsvc.c:149:5: note:  created c_41(D)
tsvc.c:149:5: note:  add new stmt: .MASK_STORE (vectp_c.642_200, 32B, mask__52.630_188, vect__18.641_199);
tsvc.c:149:5: note:  ------>vectorizing statement: pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_39(D)
tsvc.c:149:5: note:  created b_39(D)
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _52
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _52 = _53 & _106;
tsvc.c:149:5: note:  add new stmt: vect_pretmp_79.646_205 = .MASK_LOAD (vectp_b.644_203, 32B, mask__52.630_188);
tsvc.c:149:5: note:  ------>vectorizing statement: _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _104), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _4 = *_3;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:149:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:  created new init_stmt: vect_cst__206 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: pretmp_78
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _104), type of def: internal
tsvc.c:149:5: note:    def_stmt =  pretmp_78 = .MASK_LOAD (_85, 32B, _104);
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: pretmp_79
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:    def_stmt =  pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:  add new stmt: vect__ifc__100.647_207 = VEC_COND_EXPR <vect__4.595_149 > vect_cst__206, vect_pretmp_78.609_165, vect_pretmp_79.646_205>;
tsvc.c:149:5: note:  ------>vectorizing statement: _ifc__101 = _52 ? pretmp_79 : _ifc__100;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0 ? pretmp_78 : pretmp_79, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _52
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _52 = _53 & _106;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: pretmp_79
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_85, 32B, _52), type of def: internal
tsvc.c:149:5: note:    def_stmt =  pretmp_79 = .MASK_LOAD (_85, 32B, _52);
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _ifc__100
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0 ? pretmp_78 : pretmp_79, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
tsvc.c:149:5: note:  add new stmt: vect__ifc__101.648_208 = VEC_COND_EXPR <mask__52.630_188, vect_pretmp_79.646_205, vect__ifc__100.647_207>;
tsvc.c:149:5: note:  ------>vectorizing statement: prephitmp_80 = _66 ? _10 : _ifc__101;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _52 ? pretmp_79 : _ifc__100, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _66
tsvc.c:149:5: note:  vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _66 = _67 & _106;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:149:5: note:  vect_is_simple_use: operand _7 - _9, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _10 = _7 - _9;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _ifc__101
tsvc.c:149:5: note:  vect_is_simple_use: operand _52 ? pretmp_79 : _ifc__100, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _ifc__101 = _52 ? pretmp_79 : _ifc__100;
tsvc.c:149:5: note:  add new stmt: vect_prephitmp_80.649_209 = VEC_COND_EXPR <mask__66.625_183, vect__10.618_175, vect__ifc__101.648_208>;
tsvc.c:149:5: note:  ------>vectorizing statement: _ifc__102 = _4 > 0 ? _24 : _18;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:149:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _4 = *_3;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:149:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:149:5: note:  created new init_stmt: vect_cst__210 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _24
tsvc.c:149:5: note:  vect_is_simple_use: operand _20 + _23, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _24 = _20 + _23;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _18
tsvc.c:149:5: note:  vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _18 = _13 + _17;
tsvc.c:149:5: note:  add new stmt: vect__ifc__102.650_211 = VEC_COND_EXPR <vect__4.595_149 > vect_cst__210, vect__24.604_159, vect__18.641_199>;
tsvc.c:149:5: note:  ------>vectorizing statement: _ifc__103 = _52 ? _18 : _ifc__102;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0 ? _24 : _18, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _52
tsvc.c:149:5: note:  vect_is_simple_use: operand _53 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _52 = _53 & _106;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _18
tsvc.c:149:5: note:  vect_is_simple_use: operand _13 + _17, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _18 = _13 + _17;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _ifc__102
tsvc.c:149:5: note:  vect_is_simple_use: operand _4 > 0 ? _24 : _18, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _ifc__102 = _4 > 0 ? _24 : _18;
tsvc.c:149:5: note:  add new stmt: vect__ifc__103.651_212 = VEC_COND_EXPR <mask__52.630_188, vect__18.641_199, vect__ifc__102.650_211>;
tsvc.c:149:5: note:  ------>vectorizing statement: prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _66), type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _52 ? _18 : _ifc__102, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _66
tsvc.c:149:5: note:  vect_is_simple_use: operand _67 & _106, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _66 = _67 & _106;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: pretmp_81
tsvc.c:149:5: note:  vect_is_simple_use: operand .MASK_LOAD (_86, 32B, _66), type of def: internal
tsvc.c:149:5: note:    def_stmt =  pretmp_81 = .MASK_LOAD (_86, 32B, _66);
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _ifc__103
tsvc.c:149:5: note:  vect_is_simple_use: operand _52 ? _18 : _ifc__102, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _ifc__103 = _52 ? _18 : _ifc__102;
tsvc.c:149:5: note:  add new stmt: vect_prephitmp_82.652_213 = VEC_COND_EXPR <mask__66.625_183, vect_pretmp_81.628_186, vect__ifc__103.651_212>;
tsvc.c:149:5: note:  ------>vectorizing statement: _29 = prephitmp_80 + prephitmp_82;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _66 ? _10 : _ifc__101, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand _66 ? pretmp_81 : _ifc__103, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: prephitmp_80
tsvc.c:149:5: note:  vect_is_simple_use: operand _66 ? _10 : _ifc__101, type of def: internal
tsvc.c:149:5: note:    def_stmt =  prephitmp_80 = _66 ? _10 : _ifc__101;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: prephitmp_82
tsvc.c:149:5: note:  vect_is_simple_use: operand _66 ? pretmp_81 : _ifc__103, type of def: internal
tsvc.c:149:5: note:    def_stmt =  prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
tsvc.c:149:5: note:  add new stmt: vect__29.653_214 = vect_prephitmp_80.649_209 + vect_prephitmp_82.652_213;
tsvc.c:149:5: note:  ------>vectorizing statement: _31 = *_84;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  transform load. ncopies = 1
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_38(D)
tsvc.c:149:5: note:  created d_38(D)
tsvc.c:149:5: note:  add new stmt: vect__31.656_217 = MEM <vector(8) int> [(int *)vectp_d.654_215];
tsvc.c:149:5: note:  ------>vectorizing statement: _32 = _29 + _31;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand prephitmp_80 + prephitmp_82, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform binary/unary operation.
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _29
tsvc.c:149:5: note:  vect_is_simple_use: operand prephitmp_80 + prephitmp_82, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _29 = prephitmp_80 + prephitmp_82;
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _31
tsvc.c:149:5: note:  vect_is_simple_use: operand *_84, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _31 = *_84;
tsvc.c:149:5: note:  add new stmt: vect__32.657_218 = vect__29.653_214 + vect__31.656_217;
tsvc.c:149:5: note:  ------>vectorizing statement: *_3 = _32;
tsvc.c:149:5: note:  transform statement.
tsvc.c:149:5: note:  vect_is_simple_use: operand _29 + _31, type of def: internal
tsvc.c:149:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:149:5: note:  transform store. ncopies = 1
tsvc.c:149:5: note:  vect_get_vec_def_for_operand: _32
tsvc.c:149:5: note:  vect_is_simple_use: operand _29 + _31, type of def: internal
tsvc.c:149:5: note:    def_stmt =  _32 = _29 + _31;
tsvc.c:149:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_37(D)
tsvc.c:149:5: note:  created a_37(D)
tsvc.c:149:5: note:  add new stmt: MEM <vector(8) int> [(int *)vectp_a.658_219] = vect__32.657_218;
tsvc.c:149:5: note:  ------>vectorizing statement: i_46 = i_55 + 1;
tsvc.c:149:5: note:  ------>vectorizing statement: ivtmp_70 = ivtmp_71 - 1;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_a.593_148 = vectp_a.593_147 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_e.597_153 = vectp_e.597_152 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_c.600_156 = vectp_c.600_155 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_c.605_161 = vectp_c.605_160 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_b.607_164 = vectp_b.607_163 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_d.610_167 = vectp_d.610_166 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_b.615_173 = vectp_b.615_172 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_b.619_177 = vectp_b.619_176 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_a.621_180 = vectp_a.621_179 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_c.626_185 = vectp_c.626_184 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_c.631_190 = vectp_c.631_189 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_d.634_193 = vectp_d.634_192 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_e.637_196 = vectp_e.637_195 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_c.642_201 = vectp_c.642_200 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_b.644_204 = vectp_b.644_203 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_d.654_216 = vectp_d.654_215 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: vectp_a.658_220 = vectp_a.658_219 + 32;
tsvc.c:149:5: note:  ------>vectorizing statement: if (ivtmp_70 != 0)
tsvc.c:149:5: note:  New loop exit condition: if (ivtmp_223 < 8192)
tsvc.c:149:5: note:  LOOP VECTORIZED

tsvc.c:147:6: note: vectorized 1 loops in function.
Removing basic block 19
;; basic block 19, loop depth 0
;;  pred:      
;;  succ:       23


fix_loop_structure: fixing up loops for function
s279 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_a.659;
  vector(8) int * vectp_a.658;
  vector(8) int vect__32.657;
  vector(8) int vect__31.656;
  vector(8) int * vectp_d.655;
  vector(8) int * vectp_d.654;
  vector(8) int vect__29.653;
  vector(8) int vect_prephitmp_82.652;
  vector(8) int vect__ifc__103.651;
  vector(8) int vect__ifc__102.650;
  vector(8) int vect_prephitmp_80.649;
  vector(8) int vect__ifc__101.648;
  vector(8) int vect__ifc__100.647;
  vector(8) int vect_pretmp_79.646;
  vector(8) int * vectp_b.645;
  vector(8) int * vectp_b.644;
  vector(8) int * vectp_c.643;
  vector(8) int * vectp_c.642;
  vector(8) int vect__18.641;
  vector(8) int vect__17.640;
  vector(8) int vect__16.639;
  vector(8) int * vectp_e.638;
  vector(8) int * vectp_e.637;
  vector(8) int vect__14.636;
  vector(8) int * vectp_d.635;
  vector(8) int * vectp_d.634;
  vector(8) int vect__13.633;
  vector(8) int * vectp_c.632;
  vector(8) int * vectp_c.631;
  vector(8) <unnamed type> mask__52.630;
  vector(8) <unnamed type> mask__53.629;
  vector(8) int vect_pretmp_81.628;
  vector(8) int * vectp_c.627;
  vector(8) int * vectp_c.626;
  vector(8) <unnamed type> mask__66.625;
  vector(8) <unnamed type> mask__67.624;
  vector(8) int vect__11.623;
  vector(8) int * vectp_a.622;
  vector(8) int * vectp_a.621;
  vector(8) int * vectp_b.620;
  vector(8) int * vectp_b.619;
  vector(8) int vect__10.618;
  vector(8) int vect__9.617;
  vector(8) int * vectp_b.616;
  vector(8) int * vectp_b.615;
  vector(8) <unnamed type> mask__106.614;
  vector(8) int vect__7.613;
  vector(8) int vect__6.612;
  vector(8) int * vectp_d.611;
  vector(8) int * vectp_d.610;
  vector(8) int vect_pretmp_78.609;
  vector(8) int * vectp_b.608;
  vector(8) int * vectp_b.607;
  vector(8) int * vectp_c.606;
  vector(8) int * vectp_c.605;
  vector(8) int vect__24.604;
  vector(8) int vect__23.603;
  vector(8) int vect__22.602;
  vector(8) int * vectp_c.601;
  vector(8) int * vectp_c.600;
  vector(8) int vect__20.599;
  vector(8) int * vectp_e.598;
  vector(8) int * vectp_e.597;
  vector(8) <unnamed type> mask__104.596;
  vector(8) int vect__4.595;
  vector(8) int * vectp_a.594;
  vector(8) int * vectp_a.593;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int _5;
  int _6;
  int _7;
  int _9;
  int _10;
  int _11;
  int pretmp_12;
  int _13;
  int _14;
  _Bool _15;
  int _16;
  int _17;
  int _18;
  int * _19;
  int _20;
  int _21;
  int _22;
  int _23;
  int _24;
  int pretmp_25;
  int * _26;
  int _27;
  int _28;
  int _29;
  int _30;
  int _31;
  int _32;
  int * _33;
  int * _34;
  long unsigned int _35;
  long unsigned int _47;
  unsigned int ivtmp_48;
  _Bool _51;
  _Bool _52;
  _Bool _53;
  sizetype _54;
  ssizetype _57;
  int * _58;
  int * _59;
  int * _60;
  int _61;
  int _62;
  int _63;
  int * _64;
  int _65;
  _Bool _66;
  _Bool _67;
  unsigned int ivtmp_70;
  unsigned int ivtmp_71;
  int * _72;
  int _73;
  int _74;
  int _75;
  int _76;
  int pretmp_78;
  int pretmp_79;
  int prephitmp_80;
  int pretmp_81;
  int prephitmp_82;
  int _83;
  int * _84;
  int * _85;
  int * _86;
  int _87;
  int pretmp_89;
  int prephitmp_91;
  int prephitmp_92;
  int _93;
  int _94;
  int _95;
  unsigned int ivtmp_98;
  int _ifc__100;
  int _ifc__101;
  int _ifc__102;
  int _ifc__103;
  _Bool _104;
  _Bool _106;
  ssizetype _107;
  sizetype _108;
  _Bool _109;
  _Bool _110;
  int * _111;
  ssizetype _112;
  sizetype _113;
  _Bool _114;
  _Bool _115;
  int * _116;
  ssizetype _117;
  sizetype _118;
  _Bool _119;
  _Bool _120;
  int * _121;
  ssizetype _122;
  sizetype _123;
  _Bool _124;
  _Bool _125;
  int * _126;
  ssizetype _127;
  sizetype _128;
  _Bool _129;
  _Bool _130;
  int * _131;
  ssizetype _132;
  sizetype _133;
  _Bool _134;
  _Bool _135;
  int * _136;
  ssizetype _137;
  sizetype _138;
  _Bool _139;
  _Bool _140;
  int * _141;
  ssizetype _142;
  sizetype _143;
  _Bool _144;
  _Bool _145;
  vector(8) int vect_cst__150;
  vector(8) int vect_cst__170;
  vector(8) int vect_cst__206;
  vector(8) int vect_cst__210;
  unsigned int ivtmp_222;
  unsigned int ivtmp_223;

  <bb 2> [local count: 10737416]:
  _58 = d_38(D) + 4;
  _57 = a_37(D) - _58;
  _54 = (sizetype) _57;
  _15 = _54 > 24;
  _34 = a_37(D) + 31;
  _107 = _34 - b_39(D);
  _108 = (sizetype) _107;
  _109 = _108 > 62;
  _110 = _15 & _109;
  _111 = a_37(D) + 31;
  _112 = _111 - c_41(D);
  _113 = (sizetype) _112;
  _114 = _113 > 62;
  _115 = _110 & _114;
  _116 = e_42(D) + 4;
  _117 = a_37(D) - _116;
  _118 = (sizetype) _117;
  _119 = _118 > 24;
  _120 = _115 & _119;
  _121 = d_38(D) + 31;
  _122 = _121 - b_39(D);
  _123 = (sizetype) _122;
  _124 = _123 > 62;
  _125 = _120 & _124;
  _126 = d_38(D) + 31;
  _127 = _126 - c_41(D);
  _128 = (sizetype) _127;
  _129 = _128 > 62;
  _130 = _125 & _129;
  _131 = b_39(D) + 31;
  _132 = _131 - c_41(D);
  _133 = (sizetype) _132;
  _134 = _133 > 62;
  _135 = _130 & _134;
  _136 = b_39(D) + 31;
  _137 = _136 - e_42(D);
  _138 = (sizetype) _137;
  _139 = _138 > 62;
  _140 = _135 & _139;
  _141 = c_41(D) + 31;
  _142 = _141 - e_42(D);
  _143 = (sizetype) _142;
  _144 = _143 > 62;
  _145 = _140 & _144;
  _51 = 1;
  if (_145 != 0)
    goto <bb 23>; [80.00%]
  else
    goto <bb 20>; [20.00%]

  <bb 23> [local count: 10737416]:
  vect_cst__150 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__170 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__206 = { 0, 0, 0, 0, 0, 0, 0, 0 };
  vect_cst__210 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374159]:
  # i_55 = PHI <i_46(10), 0(23)>
  # ivtmp_71 = PHI <ivtmp_70(10), 65536(23)>
  # vectp_a.593_147 = PHI <vectp_a.593_148(10), a_37(D)(23)>
  # vectp_e.597_152 = PHI <vectp_e.597_153(10), e_42(D)(23)>
  # vectp_c.600_155 = PHI <vectp_c.600_156(10), c_41(D)(23)>
  # vectp_c.605_160 = PHI <vectp_c.605_161(10), c_41(D)(23)>
  # vectp_b.607_163 = PHI <vectp_b.607_164(10), b_39(D)(23)>
  # vectp_d.610_166 = PHI <vectp_d.610_167(10), d_38(D)(23)>
  # vectp_b.615_172 = PHI <vectp_b.615_173(10), b_39(D)(23)>
  # vectp_b.619_176 = PHI <vectp_b.619_177(10), b_39(D)(23)>
  # vectp_a.621_179 = PHI <vectp_a.621_180(10), a_37(D)(23)>
  # vectp_c.626_184 = PHI <vectp_c.626_185(10), c_41(D)(23)>
  # vectp_c.631_189 = PHI <vectp_c.631_190(10), c_41(D)(23)>
  # vectp_d.634_192 = PHI <vectp_d.634_193(10), d_38(D)(23)>
  # vectp_e.637_195 = PHI <vectp_e.637_196(10), e_42(D)(23)>
  # vectp_c.642_200 = PHI <vectp_c.642_201(10), c_41(D)(23)>
  # vectp_b.644_203 = PHI <vectp_b.644_204(10), b_39(D)(23)>
  # vectp_d.654_215 = PHI <vectp_d.654_216(10), d_38(D)(23)>
  # vectp_a.658_219 = PHI <vectp_a.658_220(10), a_37(D)(23)>
  # ivtmp_222 = PHI <ivtmp_223(10), 0(23)>
  _1 = (long unsigned int) i_55;
  _2 = _1 * 4;
  _3 = a_37(D) + _2;
  vect__4.595_149 = MEM <vector(8) int> [(int *)vectp_a.593_147];
  _4 = *_3;
  _84 = d_38(D) + _2;
  _85 = b_39(D) + _2;
  _86 = c_41(D) + _2;
  _19 = e_42(D) + _2;
  mask__104.596_151 = vect__4.595_149 > vect_cst__150;
  _104 = _4 > 0;
  vect__20.599_154 = .MASK_LOAD (vectp_e.597_152, 32B, mask__104.596_151);
  _20 = 0;
  vect__22.602_157 = .MASK_LOAD (vectp_c.600_155, 32B, mask__104.596_151);
  _22 = 0;
  vect__23.603_158 = vect__20.599_154 - vect__22.602_157;
  _23 = _20 - _22;
  vect__24.604_159 = vect__20.599_154 + vect__23.603_158;
  _24 = _20 + _23;
  .MASK_STORE (vectp_c.605_160, 32B, mask__104.596_151, vect__24.604_159);
  vect_pretmp_78.609_165 = .MASK_LOAD (vectp_b.607_163, 32B, mask__104.596_151);
  pretmp_78 = 0;
  vect__6.612_168 = MEM <vector(8) int> [(int *)vectp_d.610_166];
  _6 = *_84;
  vect__7.613_169 = vect__6.612_168 * vect__6.612_168;
  _7 = _6 * _6;
  mask__106.614_171 = vect__4.595_149 <= vect_cst__170;
  _106 = _4 <= 0;
  vect__9.617_174 = .MASK_LOAD (vectp_b.615_172, 32B, mask__106.614_171);
  _9 = 0;
  vect__10.618_175 = vect__7.613_169 - vect__9.617_174;
  _10 = _7 - _9;
  .MASK_STORE (vectp_b.619_176, 32B, mask__106.614_171, vect__10.618_175);
  vect__11.623_181 = MEM <vector(8) int> [(int *)vectp_a.621_179];
  _11 = *_3;
  mask__67.624_182 = vect__10.618_175 <= vect__11.623_181;
  _67 = _10 <= _11;
  mask__66.625_183 = mask__67.624_182 & mask__106.614_171;
  _66 = _67 & _106;
  vect_pretmp_81.628_186 = .MASK_LOAD (vectp_c.626_184, 32B, mask__66.625_183);
  pretmp_81 = 0;
  mask__53.629_187 = ~mask__67.624_182;
  _53 = ~_67;
  mask__52.630_188 = mask__53.629_187 & mask__106.614_171;
  _52 = _53 & _106;
  vect__13.633_191 = .MASK_LOAD (vectp_c.631_189, 32B, mask__52.630_188);
  _13 = 0;
  vect__14.636_194 = MEM <vector(8) int> [(int *)vectp_d.634_192];
  _14 = *_84;
  vect__16.639_197 = .MASK_LOAD (vectp_e.637_195, 32B, mask__52.630_188);
  _16 = 0;
  vect__17.640_198 = vect__14.636_194 + vect__16.639_197;
  _17 = _14 + _16;
  vect__18.641_199 = vect__13.633_191 + vect__17.640_198;
  _18 = _13 + _17;
  .MASK_STORE (vectp_c.642_200, 32B, mask__52.630_188, vect__18.641_199);
  vect_pretmp_79.646_205 = .MASK_LOAD (vectp_b.644_203, 32B, mask__52.630_188);
  pretmp_79 = 0;
  vect__ifc__100.647_207 = VEC_COND_EXPR <vect__4.595_149 > vect_cst__206, vect_pretmp_78.609_165, vect_pretmp_79.646_205>;
  _ifc__100 = _4 > 0 ? pretmp_78 : pretmp_79;
  vect__ifc__101.648_208 = VEC_COND_EXPR <mask__52.630_188, vect_pretmp_79.646_205, vect__ifc__100.647_207>;
  _ifc__101 = _52 ? pretmp_79 : _ifc__100;
  vect_prephitmp_80.649_209 = VEC_COND_EXPR <mask__66.625_183, vect__10.618_175, vect__ifc__101.648_208>;
  prephitmp_80 = _66 ? _10 : _ifc__101;
  vect__ifc__102.650_211 = VEC_COND_EXPR <vect__4.595_149 > vect_cst__210, vect__24.604_159, vect__18.641_199>;
  _ifc__102 = _4 > 0 ? _24 : _18;
  vect__ifc__103.651_212 = VEC_COND_EXPR <mask__52.630_188, vect__18.641_199, vect__ifc__102.650_211>;
  _ifc__103 = _52 ? _18 : _ifc__102;
  vect_prephitmp_82.652_213 = VEC_COND_EXPR <mask__66.625_183, vect_pretmp_81.628_186, vect__ifc__103.651_212>;
  prephitmp_82 = _66 ? pretmp_81 : _ifc__103;
  vect__29.653_214 = vect_prephitmp_80.649_209 + vect_prephitmp_82.652_213;
  _29 = prephitmp_80 + prephitmp_82;
  vect__31.656_217 = MEM <vector(8) int> [(int *)vectp_d.654_215];
  _31 = *_84;
  vect__32.657_218 = vect__29.653_214 + vect__31.656_217;
  _32 = _29 + _31;
  MEM <vector(8) int> [(int *)vectp_a.658_219] = vect__32.657_218;
  i_46 = i_55 + 1;
  ivtmp_70 = ivtmp_71 - 1;
  vectp_a.593_148 = vectp_a.593_147 + 32;
  vectp_e.597_153 = vectp_e.597_152 + 32;
  vectp_c.600_156 = vectp_c.600_155 + 32;
  vectp_c.605_161 = vectp_c.605_160 + 32;
  vectp_b.607_164 = vectp_b.607_163 + 32;
  vectp_d.610_167 = vectp_d.610_166 + 32;
  vectp_b.615_173 = vectp_b.615_172 + 32;
  vectp_b.619_177 = vectp_b.619_176 + 32;
  vectp_a.621_180 = vectp_a.621_179 + 32;
  vectp_c.626_185 = vectp_c.626_184 + 32;
  vectp_c.631_190 = vectp_c.631_189 + 32;
  vectp_d.634_193 = vectp_d.634_192 + 32;
  vectp_e.637_196 = vectp_e.637_195 + 32;
  vectp_c.642_201 = vectp_c.642_200 + 32;
  vectp_b.644_204 = vectp_b.644_203 + 32;
  vectp_d.654_216 = vectp_d.654_215 + 32;
  vectp_a.658_220 = vectp_a.658_219 + 32;
  ivtmp_223 = ivtmp_222 + 1;
  if (ivtmp_223 < 8192)
    goto <bb 10>; [90.00%]
  else
    goto <bb 21>; [10.00%]

  <bb 10> [local count: 96636743]:
  goto <bb 3>; [100.00%]

  <bb 20> [local count: 10737416]:

  <bb 11> [local count: 212600877]:
  # i_50 = PHI <i_97(17), 0(20)>
  # ivtmp_48 = PHI <ivtmp_98(17), 65536(20)>
  _47 = (long unsigned int) i_50;
  _35 = _47 * 4;
  _33 = a_37(D) + _35;
  _65 = *_33;
  _59 = d_38(D) + _35;
  _60 = b_39(D) + _35;
  _64 = c_41(D) + _35;
  if (_65 > 0)
    goto <bb 15>; [42.57%]
  else
    goto <bb 12>; [57.43%]

  <bb 15> [local count: 90504194]:
  _26 = e_42(D) + _35;
  _27 = *_26;
  _28 = *_64;
  _30 = _27 - _28;
  _87 = _27 + _30;
  *_64 = _87;
  pretmp_89 = *_60;
  goto <bb 16>; [100.00%]

  <bb 12> [local count: 122096683]:
  _63 = *_59;
  _62 = _63 * _63;
  _61 = *_60;
  _5 = _62 - _61;
  *_60 = _5;
  _83 = *_33;
  if (_5 <= _83)
    goto <bb 13>; [50.00%]
  else
    goto <bb 14>; [50.00%]

  <bb 14> [local count: 61048342]:
  _76 = *_64;
  _21 = *_59;
  _72 = e_42(D) + _35;
  _74 = *_72;
  _73 = _21 + _74;
  _75 = _76 + _73;
  *_64 = _75;
  pretmp_25 = *_60;
  goto <bb 16>; [100.00%]

  <bb 13> [local count: 61048342]:
  pretmp_12 = *_64;

  <bb 16> [local count: 212600877]:
  # prephitmp_91 = PHI <_5(13), pretmp_25(14), pretmp_89(15)>
  # prephitmp_92 = PHI <pretmp_12(13), _75(14), _87(15)>
  _93 = prephitmp_91 + prephitmp_92;
  _94 = *_59;
  _95 = _93 + _94;
  *_33 = _95;
  i_97 = i_50 + 1;
  ivtmp_98 = ivtmp_48 - 1;
  if (ivtmp_98 != 0)
    goto <bb 17>; [98.99%]
  else
    goto <bb 22>; [1.01%]

  <bb 22> [local count: 10737413]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 210453394]:
  goto <bb 11>; [100.00%]

  <bb 21> [local count: 10737413]:

  <bb 9> [local count: 10737416]:
  return;

}



;; Function s1279 (s1279, funcdef_no=34, decl_uid=3727, cgraph_uid=35, symbol_order=34)


Analyzing loop at tsvc.c:170
tsvc.c:170:5: note:  === analyze_loop_nest ===
tsvc.c:170:5: note:   === vect_analyze_loop_form ===
tsvc.c:170:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: a_19(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_19(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_21(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_9
analyze_innermost: success.
	base_address: d_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_11
analyze_innermost: success.
	base_address: e_23(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_23(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_21(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:170:5: note:   === vect_analyze_data_refs ===
tsvc.c:170:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:170:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _61);
vector(8) int
tsvc.c:170:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _30);
vector(8) int
tsvc.c:170:5: note:   got vectype for stmt: _10 = .MASK_LOAD (_9, 32B, _30);
vector(8) int
tsvc.c:170:5: note:   got vectype for stmt: _12 = .MASK_LOAD (_11, 32B, _30);
vector(8) int
tsvc.c:170:5: note:   got vectype for stmt: .MASK_STORE (_7, 32B, _30, _14);
vector(8) int
tsvc.c:170:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:170:5: note:   Analyze phi: i_31 = PHI <i_25(8), 0(22)>
tsvc.c:170:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:170:5: note:   step: 1,  init: 0
tsvc.c:170:5: note:   Detected induction.
tsvc.c:170:5: note:   Analyze phi: .MEM_32 = PHI <.MEM_24(8), .MEM_18(D)(22)>
tsvc.c:170:5: note:   Analyze phi: ivtmp_36 = PHI <ivtmp_35(8), 65536(22)>
tsvc.c:170:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:170:5: note:   step: 4294967295,  init: 65536
tsvc.c:170:5: note:   Detected induction.
tsvc.c:170:5: note:   === vect_determine_precisions ===
tsvc.c:170:5: note:   ivtmp_35 has no range info
tsvc.c:170:5: note:   i_25 has range [0x1, 0x10000]
tsvc.c:170:5: note:   can narrow to unsigned:17 without loss of precision: i_25 = i_31 + 1;
tsvc.c:170:5: note:   _14 has no range info
tsvc.c:170:5: note:   _13 has no range info
tsvc.c:170:5: note:   using boolean precision 32 for _61 = _4 < 0;
tsvc.c:170:5: note:   using boolean precision 32 for _33 = _4 < _6;
tsvc.c:170:5: note:   using boolean precision 32 for _30 = _33 & _61;
tsvc.c:170:5: note:   _4 has no range info
tsvc.c:170:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:170:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:170:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:170:5: note:   === vect_pattern_recog ===
tsvc.c:170:5: note:   vect_is_simple_use: operand (long unsigned int) i_31, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: operand i_31 = PHI <i_25(8), 0(22)>, type of def: induction
tsvc.c:170:5: note:   vect_is_simple_use: operand (long unsigned int) i_31, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: operand i_31 = PHI <i_25(8), 0(22)>, type of def: induction
tsvc.c:170:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:170:5: note:   widen_mult pattern recognized: patt_28 = (long unsigned int) patt_29;
tsvc.c:170:5: note:   extra pattern stmt: patt_29 = i_31 w* 4;
tsvc.c:170:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:170:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:170:5: note:   init: phi relevant? i_31 = PHI <i_25(8), 0(22)>
tsvc.c:170:5: note:   init: phi relevant? .MEM_32 = PHI <.MEM_24(8), .MEM_18(D)(22)>
tsvc.c:170:5: note:   init: phi relevant? ivtmp_36 = PHI <ivtmp_35(8), 65536(22)>
tsvc.c:170:5: note:   init: stmt relevant? _1 = (long unsigned int) i_31;
tsvc.c:170:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:170:5: note:   init: stmt relevant? _3 = a_19(D) + _2;
tsvc.c:170:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:170:5: note:   init: stmt relevant? _5 = b_20(D) + _2;
tsvc.c:170:5: note:   init: stmt relevant? _61 = _4 < 0;
tsvc.c:170:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _61);
tsvc.c:170:5: note:   init: stmt relevant? _33 = _4 < _6;
tsvc.c:170:5: note:   init: stmt relevant? _30 = _33 & _61;
tsvc.c:170:5: note:   init: stmt relevant? _7 = c_21(D) + _2;
tsvc.c:170:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _30);
tsvc.c:170:5: note:   init: stmt relevant? _9 = d_22(D) + _2;
tsvc.c:170:5: note:   init: stmt relevant? _10 = .MASK_LOAD (_9, 32B, _30);
tsvc.c:170:5: note:   init: stmt relevant? _11 = e_23(D) + _2;
tsvc.c:170:5: note:   init: stmt relevant? _12 = .MASK_LOAD (_11, 32B, _30);
tsvc.c:170:5: note:   init: stmt relevant? _13 = _10 + _12;
tsvc.c:170:5: note:   init: stmt relevant? _14 = _8 + _13;
tsvc.c:170:5: note:   init: stmt relevant? .MASK_STORE (_7, 32B, _30, _14);
tsvc.c:170:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:170:5: note:   mark relevant 5, live 0: .MASK_STORE (_7, 32B, _30, _14);
tsvc.c:170:5: note:   init: stmt relevant? i_25 = i_31 + 1;
tsvc.c:170:5: note:   init: stmt relevant? ivtmp_35 = ivtmp_36 - 1;
tsvc.c:170:5: note:   init: stmt relevant? if (ivtmp_35 != 0)
tsvc.c:170:5: note:   worklist: examine stmt: .MASK_STORE (_7, 32B, _30, _14);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _30 = _33 & _61;
tsvc.c:170:5: note:   vect_is_simple_use: operand _8 + _13, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _14 = _8 + _13;
tsvc.c:170:5: note:   worklist: examine stmt: _14 = _8 + _13;
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _30), type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand _10 + _12, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _13 = _10 + _12;
tsvc.c:170:5: note:   worklist: examine stmt: _13 = _10 + _12;
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _30), type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _10 = .MASK_LOAD (_9, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _30), type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _12 = .MASK_LOAD (_11, 32B, _30);
tsvc.c:170:5: note:   worklist: examine stmt: _12 = .MASK_LOAD (_11, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _30 = _33 & _61;
tsvc.c:170:5: note:   already marked relevant/live.
tsvc.c:170:5: note:   worklist: examine stmt: _10 = .MASK_LOAD (_9, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _30 = _33 & _61;
tsvc.c:170:5: note:   already marked relevant/live.
tsvc.c:170:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _30 = _33 & _61;
tsvc.c:170:5: note:   already marked relevant/live.
tsvc.c:170:5: note:   worklist: examine stmt: _30 = _33 & _61;
tsvc.c:170:5: note:   vect_is_simple_use: operand _4 < _6, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _33 = _4 < _6;
tsvc.c:170:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _61 = _4 < 0;
tsvc.c:170:5: note:   worklist: examine stmt: _61 = _4 < 0;
tsvc.c:170:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:170:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:170:5: note:   worklist: examine stmt: _33 = _4 < _6;
tsvc.c:170:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:170:5: note:   already marked relevant/live.
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _61), type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _61);
tsvc.c:170:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _61);
tsvc.c:170:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:   mark relevant 5, live 0: _61 = _4 < 0;
tsvc.c:170:5: note:   already marked relevant/live.
tsvc.c:170:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _61);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_7, 32B, _30, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _61);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _61);
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _61);
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _61);
  stmt_b: .MASK_STORE (_7, 32B, _30, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _30);
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _30);
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _30);
  stmt_b: .MASK_STORE (_7, 32B, _30, _14);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _30);
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _30);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _30);
  stmt_b: .MASK_STORE (_7, 32B, _30, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _30);
  stmt_b: .MASK_STORE (_7, 32B, _30, _14);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _61);
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _61);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _30);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _30);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _10 = .MASK_LOAD (_9, 32B, _30);
  stmt_b: _10 = .MASK_LOAD (_9, 32B, _30);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_11, 32B, _30);
  stmt_b: _12 = .MASK_LOAD (_11, 32B, _30);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_7, 32B, _30, _14);
  stmt_b: .MASK_STORE (_7, 32B, _30, _14);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:172:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:174:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_7
consider run-time aliasing test between *_5 and *_7
tsvc.c:170:5: note:   dependence distance  = 0.
tsvc.c:170:5: note:   dependence distance == 0 between *_7 and *_7
tsvc.c:176:26: missed:   versioning for alias required: can't determine dependence between *_9 and *_7
consider run-time aliasing test between *_9 and *_7
tsvc.c:176:33: missed:   versioning for alias required: can't determine dependence between *_11 and *_7
consider run-time aliasing test between *_11 and *_7
tsvc.c:170:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:170:5: note:   ==> examining phi: i_31 = PHI <i_25(8), 0(22)>
tsvc.c:170:5: note:   ==> examining phi: .MEM_32 = PHI <.MEM_24(8), .MEM_18(D)(22)>
tsvc.c:170:5: note:   ==> examining phi: ivtmp_36 = PHI <ivtmp_35(8), 65536(22)>
tsvc.c:170:5: note:   ==> examining statement: _1 = (long unsigned int) i_31;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining pattern def stmt: patt_29 = i_31 w* 4;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining pattern statement: patt_28 = (long unsigned int) patt_29;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: _3 = a_19(D) + _2;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:170:5: note:   precomputed vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _5 = b_20(D) + _2;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: _61 = _4 < 0;
tsvc.c:170:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _61);
tsvc.c:170:5: note:   precomputed vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _33 = _4 < _6;
tsvc.c:170:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _30 = _33 & _61;
tsvc.c:170:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _7 = c_21(D) + _2;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _30);
tsvc.c:170:5: note:   precomputed vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _9 = d_22(D) + _2;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: _10 = .MASK_LOAD (_9, 32B, _30);
tsvc.c:170:5: note:   precomputed vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _11 = e_23(D) + _2;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: _12 = .MASK_LOAD (_11, 32B, _30);
tsvc.c:170:5: note:   precomputed vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _13 = _10 + _12;
tsvc.c:170:5: note:   get vectype for scalar type: int
tsvc.c:170:5: note:   vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: _14 = _8 + _13;
tsvc.c:170:5: note:   get vectype for scalar type: int
tsvc.c:170:5: note:   vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: .MASK_STORE (_7, 32B, _30, _14);
tsvc.c:170:5: note:   precomputed vectype: vector(8) int
tsvc.c:170:5: note:   nunits = 8
tsvc.c:170:5: note:   ==> examining statement: i_25 = i_31 + 1;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: ivtmp_35 = ivtmp_36 - 1;
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   ==> examining statement: if (ivtmp_35 != 0)
tsvc.c:170:5: note:   skip.
tsvc.c:170:5: note:   vectorization factor = 8
tsvc.c:170:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x5044910 *_3 1 times scalar_load costs 12 in body
0x5044910 _4 < 0 1 times scalar_stmt costs 4 in body
0x5044910 .MASK_LOAD (_5, 32B, _61) 1 times scalar_load costs 12 in body
0x5044910 _4 < _6 1 times scalar_stmt costs 4 in body
0x5044910 _33 & _61 1 times scalar_stmt costs 4 in body
0x5044910 .MASK_LOAD (_7, 32B, _30) 1 times scalar_load costs 12 in body
0x5044910 .MASK_LOAD (_9, 32B, _30) 1 times scalar_load costs 12 in body
0x5044910 .MASK_LOAD (_11, 32B, _30) 1 times scalar_load costs 12 in body
0x5044910 _10 + _12 1 times scalar_stmt costs 4 in body
0x5044910 _8 + _13 1 times scalar_stmt costs 4 in body
0x5044910 .MASK_STORE (_7, 32B, _30, _14) 1 times scalar_store costs 12 in body
tsvc.c:170:5: note:   === vect_analyze_slp ===
tsvc.c:170:5: note:   === vect_make_slp_decision ===
tsvc.c:170:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:170:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:170:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:170:5: note:   recording new base alignment for a_19(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:170:5: note:   vect_compute_data_ref_alignment:
tsvc.c:170:5: note:   can't force alignment of ref: *_3
tsvc.c:170:5: note:   vect_compute_data_ref_alignment:
tsvc.c:170:5: note:   can't force alignment of ref: *_5
tsvc.c:170:5: note:   vect_compute_data_ref_alignment:
tsvc.c:170:5: note:   can't force alignment of ref: *_7
tsvc.c:170:5: note:   vect_compute_data_ref_alignment:
tsvc.c:170:5: note:   can't force alignment of ref: *_9
tsvc.c:170:5: note:   vect_compute_data_ref_alignment:
tsvc.c:170:5: note:   can't force alignment of ref: *_11
tsvc.c:170:5: note:   vect_compute_data_ref_alignment:
tsvc.c:170:5: note:   can't force alignment of ref: *_7
tsvc.c:170:5: note:   === vect_prune_runtime_alias_test_list ===
merged alias checks:
  reference:      *_3 vs. *_7
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_5 vs. *_7
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_9 vs. *_7
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_11 vs. *_7
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:170:5: note:   improved number of alias checks from 4 to 4
tsvc.c:170:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:170:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:170:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:170:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:170:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:170:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:170:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:170:5: note:   vect_can_advance_ivs_p:
tsvc.c:170:5: note:   Analyze phi: i_31 = PHI <i_25(8), 0(22)>
tsvc.c:170:5: note:   Analyze phi: .MEM_32 = PHI <.MEM_24(8), .MEM_18(D)(22)>
tsvc.c:170:5: note:   reduc or virtual phi. skip.
tsvc.c:170:5: note:   Analyze phi: ivtmp_36 = PHI <ivtmp_35(8), 65536(22)>
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_load_cost: aligned.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_store_cost: aligned.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_load_cost: aligned.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:170:5: note:   Setting misalignment to unknown (-1).
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_store_cost: aligned.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 100, outside_cost = 0.
tsvc.c:170:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_get_data_access_cost: inside_cost = 120, outside_cost = 0.
tsvc.c:170:5: note:   Vectorizing an unaligned access.
tsvc.c:170:5: note:   Vectorizing an unaligned access.
tsvc.c:170:5: note:   Vectorizing an unaligned access.
tsvc.c:170:5: note:   Vectorizing an unaligned access.
tsvc.c:170:5: note:   Vectorizing an unaligned access.
tsvc.c:170:5: note:   Vectorizing an unaligned access.
tsvc.c:170:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:170:5: note:   === vect_analyze_loop_operations ===
tsvc.c:170:5: note:   examining phi: i_31 = PHI <i_25(8), 0(22)>
tsvc.c:170:5: note:   examining phi: .MEM_32 = PHI <.MEM_24(8), .MEM_18(D)(22)>
tsvc.c:170:5: note:   examining phi: ivtmp_36 = PHI <ivtmp_35(8), 65536(22)>
tsvc.c:170:5: note:   ==> examining statement: _1 = (long unsigned int) i_31;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: _3 = a_19(D) + _2;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:170:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:170:5: missed:   Unsupported pattern.
tsvc.c:170:5: missed:   use not simple.
tsvc.c:170:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:170:5: missed:   Unsupported pattern.
tsvc.c:170:5: missed:   use not simple.
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _5 = b_20(D) + _2;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: _61 = _4 < 0;
tsvc.c:170:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:170:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:170:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _61);
tsvc.c:170:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _33 = _4 < _6;
tsvc.c:170:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _61), type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _30 = _33 & _61;
tsvc.c:170:5: note:   vect_is_simple_use: operand _4 < _6, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:   vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:    === vectorizable_operation ===
tsvc.c:170:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _7 = c_21(D) + _2;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _9 = d_22(D) + _2;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: _10 = .MASK_LOAD (_9, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _11 = e_23(D) + _2;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: _12 = .MASK_LOAD (_11, 32B, _30);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _13 = _10 + _12;
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _30), type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _30), type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:    === vectorizable_operation ===
tsvc.c:170:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: _14 = _8 + _13;
tsvc.c:170:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _30), type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:   vect_is_simple_use: operand _10 + _12, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:    === vectorizable_operation ===
tsvc.c:170:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: .MASK_STORE (_7, 32B, _30, _14);
tsvc.c:170:5: note:   vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:   vect_is_simple_use: operand _8 + _13, type of def: internal
tsvc.c:170:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:170:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:170:5: note:   ==> examining statement: i_25 = i_31 + 1;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: ivtmp_35 = ivtmp_36 - 1;
tsvc.c:170:5: note:   irrelevant.
tsvc.c:170:5: note:   ==> examining statement: if (ivtmp_35 != 0)
tsvc.c:170:5: note:   irrelevant.
0x5043d40 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x5043d40 _4 < 0 1 times scalar_to_vec costs 4 in prologue
0x5043d40 _4 < 0 1 times vector_stmt costs 4 in body
0x5043d40 .MASK_LOAD (_5, 32B, _61) 1 times unaligned_load (misalign -1) costs 20 in body
0x5043d40 _4 < _6 1 times vector_stmt costs 4 in body
0x5043d40 _33 & _61 1 times vector_stmt costs 4 in body
0x5043d40 .MASK_LOAD (_7, 32B, _30) 1 times unaligned_load (misalign -1) costs 20 in body
0x5043d40 .MASK_LOAD (_9, 32B, _30) 1 times unaligned_load (misalign -1) costs 20 in body
0x5043d40 .MASK_LOAD (_11, 32B, _30) 1 times unaligned_load (misalign -1) costs 20 in body
0x5043d40 _10 + _12 1 times vector_stmt costs 4 in body
0x5043d40 _8 + _13 1 times vector_stmt costs 4 in body
0x5043d40 .MASK_STORE (_7, 32B, _30, _14) 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_35 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) a_19(D) + 4 * iteration does not wrap in statement _3 = a_19(D) + _2;
 in loop 1.
Statement _3 = a_19(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_20(D) + 4 * iteration does not wrap in statement _5 = b_20(D) + _2;
 in loop 1.
Statement _5 = b_20(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_21(D) + 4 * iteration does not wrap in statement _7 = c_21(D) + _2;
 in loop 1.
Statement _7 = c_21(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) d_22(D) + 4 * iteration does not wrap in statement _9 = d_22(D) + _2;
 in loop 1.
Statement _9 = d_22(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) e_23(D) + 4 * iteration does not wrap in statement _11 = e_23(D) + _2;
 in loop 1.
Statement _11 = e_23(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_25 = i_31 + 1;
 in loop 1.
Statement i_25 = i_31 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:170:5: note:  not using a fully-masked loop.
0x5043d40 <unknown> 4 times vector_stmt costs 16 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x5043d40 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:170:5: note:  Cost model analysis: 
  Vector inside of loop cost: 140
  Vector prologue cost: 36
  Vector epilogue cost: 0
  Scalar iteration cost: 92
  Scalar outside cost: 8
  Vector outside cost: 36
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:170:5: note:    Runtime profitability threshold = 8
tsvc.c:170:5: note:    Static estimate profitability threshold = 8
tsvc.c:170:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:170:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:170:5: note:  ***** Choosing vector mode V8SI
tsvc.c:170:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:170:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_7
using an address-based WAR/WAW test
create runtime check for data references *_5 and *_7
using an address-based WAR/WAW test
create runtime check for data references *_9 and *_7
using an address-based WAR/WAW test
create runtime check for data references *_11 and *_7
using an address-based WAR/WAW test
tsvc.c:170:5: note:  created 4 versioning for alias checks.
tsvc.c:170:5: note:  trying to apply versioning to outer loop 0
tsvc.c:170:5: note:  reusing loop version created by if conversion
tsvc.c:170:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:170:5: note:  ------>vectorizing phi: i_31 = PHI <i_25(8), 0(26)>
tsvc.c:170:5: note:  ------>vectorizing phi: .MEM_32 = PHI <.MEM_24(8), .MEM_18(D)(26)>
tsvc.c:170:5: note:  ------>vectorizing phi: ivtmp_36 = PHI <ivtmp_35(8), 65536(26)>
tsvc.c:170:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_31;
tsvc.c:170:5: note:  ------>vectorizing statement: patt_29 = i_31 w* 4;
tsvc.c:170:5: note:  ------>vectorizing statement: patt_28 = (long unsigned int) patt_29;
tsvc.c:170:5: note:  ------>vectorizing statement: _3 = a_19(D) + _2;
tsvc.c:170:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  transform load. ncopies = 1
tsvc.c:170:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_19(D)
tsvc.c:170:5: note:  created a_19(D)
tsvc.c:170:5: note:  add new stmt: vect__4.692_78 = MEM <vector(8) int> [(int *)vectp_a.690_76];
tsvc.c:170:5: note:  ------>vectorizing statement: _5 = b_20(D) + _2;
tsvc.c:170:5: note:  ------>vectorizing statement: _61 = _4 < 0;
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:170:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _4 = *_3;
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:170:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:170:5: note:  created new init_stmt: vect_cst__79 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:170:5: note:  add new stmt: mask__61.693_80 = vect__4.692_78 < vect_cst__79;
tsvc.c:170:5: note:  ------>vectorizing statement: _6 = .MASK_LOAD (_5, 32B, _61);
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:  transform load. ncopies = 1
tsvc.c:170:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_20(D)
tsvc.c:170:5: note:  created b_20(D)
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _61
tsvc.c:170:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _61 = _4 < 0;
tsvc.c:170:5: note:  add new stmt: vect__6.696_83 = .MASK_LOAD (vectp_b.694_81, 32B, mask__61.693_80);
tsvc.c:170:5: note:  ------>vectorizing statement: _33 = _4 < _6;
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _61), type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:170:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _4 = *_3;
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _61), type of def: internal
tsvc.c:170:5: note:    def_stmt =  _6 = .MASK_LOAD (_5, 32B, _61);
tsvc.c:170:5: note:  add new stmt: mask__33.697_84 = vect__4.692_78 < vect__6.696_83;
tsvc.c:170:5: note:  ------>vectorizing statement: _30 = _33 & _61;
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand _4 < _6, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:  transform binary/unary operation.
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _33
tsvc.c:170:5: note:  vect_is_simple_use: operand _4 < _6, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _33 = _4 < _6;
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _61
tsvc.c:170:5: note:  vect_is_simple_use: operand _4 < 0, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _61 = _4 < 0;
tsvc.c:170:5: note:  add new stmt: mask__30.698_85 = mask__33.697_84 & mask__61.693_80;
tsvc.c:170:5: note:  ------>vectorizing statement: _7 = c_21(D) + _2;
tsvc.c:170:5: note:  ------>vectorizing statement: _8 = .MASK_LOAD (_7, 32B, _30);
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:  transform load. ncopies = 1
tsvc.c:170:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_21(D)
tsvc.c:170:5: note:  created c_21(D)
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _30
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _30 = _33 & _61;
tsvc.c:170:5: note:  add new stmt: vect__8.701_88 = .MASK_LOAD (vectp_c.699_86, 32B, mask__30.698_85);
tsvc.c:170:5: note:  ------>vectorizing statement: _9 = d_22(D) + _2;
tsvc.c:170:5: note:  ------>vectorizing statement: _10 = .MASK_LOAD (_9, 32B, _30);
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:  transform load. ncopies = 1
tsvc.c:170:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *d_22(D)
tsvc.c:170:5: note:  created d_22(D)
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _30
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _30 = _33 & _61;
tsvc.c:170:5: note:  add new stmt: vect__10.704_91 = .MASK_LOAD (vectp_d.702_89, 32B, mask__30.698_85);
tsvc.c:170:5: note:  ------>vectorizing statement: _11 = e_23(D) + _2;
tsvc.c:170:5: note:  ------>vectorizing statement: _12 = .MASK_LOAD (_11, 32B, _30);
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:  transform load. ncopies = 1
tsvc.c:170:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *e_23(D)
tsvc.c:170:5: note:  created e_23(D)
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _30
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _30 = _33 & _61;
tsvc.c:170:5: note:  add new stmt: vect__12.707_94 = .MASK_LOAD (vectp_e.705_92, 32B, mask__30.698_85);
tsvc.c:170:5: note:  ------>vectorizing statement: _13 = _10 + _12;
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _30), type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _30), type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  transform binary/unary operation.
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_9, 32B, _30), type of def: internal
tsvc.c:170:5: note:    def_stmt =  _10 = .MASK_LOAD (_9, 32B, _30);
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _12
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_11, 32B, _30), type of def: internal
tsvc.c:170:5: note:    def_stmt =  _12 = .MASK_LOAD (_11, 32B, _30);
tsvc.c:170:5: note:  add new stmt: vect__13.708_95 = vect__10.704_91 + vect__12.707_94;
tsvc.c:170:5: note:  ------>vectorizing statement: _14 = _8 + _13;
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _30), type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  vect_is_simple_use: operand _10 + _12, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  transform binary/unary operation.
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _8
tsvc.c:170:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _30), type of def: internal
tsvc.c:170:5: note:    def_stmt =  _8 = .MASK_LOAD (_7, 32B, _30);
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _13
tsvc.c:170:5: note:  vect_is_simple_use: operand _10 + _12, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _13 = _10 + _12;
tsvc.c:170:5: note:  add new stmt: vect__14.709_96 = vect__8.701_88 + vect__13.708_95;
tsvc.c:170:5: note:  ------>vectorizing statement: .MASK_STORE (_7, 32B, _30, _14);
tsvc.c:170:5: note:  transform statement.
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:170:5: note:  vect_is_simple_use: operand _8 + _13, type of def: internal
tsvc.c:170:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:170:5: note:  transform store. ncopies = 1
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _14
tsvc.c:170:5: note:  vect_is_simple_use: operand _8 + _13, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _14 = _8 + _13;
tsvc.c:170:5: note:  vect_get_vec_def_for_operand: _30
tsvc.c:170:5: note:  vect_is_simple_use: operand _33 & _61, type of def: internal
tsvc.c:170:5: note:    def_stmt =  _30 = _33 & _61;
tsvc.c:170:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_21(D)
tsvc.c:170:5: note:  created c_21(D)
tsvc.c:170:5: note:  add new stmt: .MASK_STORE (vectp_c.710_97, 32B, mask__30.698_85, vect__14.709_96);
tsvc.c:170:5: note:  ------>vectorizing statement: i_25 = i_31 + 1;
tsvc.c:170:5: note:  ------>vectorizing statement: ivtmp_35 = ivtmp_36 - 1;
tsvc.c:170:5: note:  ------>vectorizing statement: vectp_a.690_77 = vectp_a.690_76 + 32;
tsvc.c:170:5: note:  ------>vectorizing statement: vectp_b.694_82 = vectp_b.694_81 + 32;
tsvc.c:170:5: note:  ------>vectorizing statement: vectp_c.699_87 = vectp_c.699_86 + 32;
tsvc.c:170:5: note:  ------>vectorizing statement: vectp_d.702_90 = vectp_d.702_89 + 32;
tsvc.c:170:5: note:  ------>vectorizing statement: vectp_e.705_93 = vectp_e.705_92 + 32;
tsvc.c:170:5: note:  ------>vectorizing statement: vectp_c.710_98 = vectp_c.710_97 + 32;
tsvc.c:170:5: note:  ------>vectorizing statement: if (ivtmp_35 != 0)
tsvc.c:170:5: note:  New loop exit condition: if (ivtmp_101 < 8192)
tsvc.c:170:5: note:  LOOP VECTORIZED

tsvc.c:168:6: note: vectorized 1 loops in function.
Removing basic block 22
;; basic block 22, loop depth 0
;;  pred:      
;;  succ:       26


fix_loop_structure: fixing up loops for function
s1279 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_c.711;
  vector(8) int * vectp_c.710;
  vector(8) int vect__14.709;
  vector(8) int vect__13.708;
  vector(8) int vect__12.707;
  vector(8) int * vectp_e.706;
  vector(8) int * vectp_e.705;
  vector(8) int vect__10.704;
  vector(8) int * vectp_d.703;
  vector(8) int * vectp_d.702;
  vector(8) int vect__8.701;
  vector(8) int * vectp_c.700;
  vector(8) int * vectp_c.699;
  vector(8) <unnamed type> mask__30.698;
  vector(8) <unnamed type> mask__33.697;
  vector(8) int vect__6.696;
  vector(8) int * vectp_b.695;
  vector(8) int * vectp_b.694;
  vector(8) <unnamed type> mask__61.693;
  vector(8) int vect__4.692;
  vector(8) int * vectp_a.691;
  vector(8) int * vectp_a.690;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int * _9;
  int _10;
  int * _11;
  int _12;
  int _13;
  int _14;
  _Bool _15;
  ssizetype _16;
  sizetype _17;
  int * _27;
  _Bool _30;
  _Bool _33;
  ssizetype _34;
  unsigned int ivtmp_35;
  unsigned int ivtmp_36;
  int * _37;
  _Bool _38;
  unsigned int ivtmp_41;
  long unsigned int _42;
  long unsigned int _43;
  int * _44;
  int _45;
  int * _46;
  int _47;
  int * _48;
  int _49;
  int * _50;
  int _51;
  int * _52;
  int _53;
  int _54;
  int _55;
  unsigned int ivtmp_59;
  _Bool _61;
  sizetype _62;
  _Bool _63;
  _Bool _64;
  int * _65;
  ssizetype _66;
  sizetype _67;
  _Bool _68;
  _Bool _69;
  int * _70;
  ssizetype _71;
  sizetype _72;
  _Bool _73;
  _Bool _74;
  vector(8) int vect_cst__79;
  unsigned int ivtmp_100;
  unsigned int ivtmp_101;

  <bb 2> [local count: 10737414]:
  _37 = a_19(D) + 4;
  _34 = c_21(D) - _37;
  _17 = (sizetype) _34;
  _15 = _17 > 24;
  _27 = b_20(D) + 4;
  _16 = c_21(D) - _27;
  _62 = (sizetype) _16;
  _63 = _62 > 24;
  _64 = _15 & _63;
  _65 = d_22(D) + 4;
  _66 = c_21(D) - _65;
  _67 = (sizetype) _66;
  _68 = _67 > 24;
  _69 = _64 & _68;
  _70 = e_23(D) + 4;
  _71 = c_21(D) - _70;
  _72 = (sizetype) _71;
  _73 = _72 > 24;
  _74 = _69 & _73;
  _38 = 1;
  if (_74 != 0)
    goto <bb 26>; [80.00%]
  else
    goto <bb 23>; [20.00%]

  <bb 26> [local count: 10737414]:
  vect_cst__79 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374140]:
  # i_31 = PHI <i_25(8), 0(26)>
  # ivtmp_36 = PHI <ivtmp_35(8), 65536(26)>
  # vectp_a.690_76 = PHI <vectp_a.690_77(8), a_19(D)(26)>
  # vectp_b.694_81 = PHI <vectp_b.694_82(8), b_20(D)(26)>
  # vectp_c.699_86 = PHI <vectp_c.699_87(8), c_21(D)(26)>
  # vectp_d.702_89 = PHI <vectp_d.702_90(8), d_22(D)(26)>
  # vectp_e.705_92 = PHI <vectp_e.705_93(8), e_23(D)(26)>
  # vectp_c.710_97 = PHI <vectp_c.710_98(8), c_21(D)(26)>
  # ivtmp_100 = PHI <ivtmp_101(8), 0(26)>
  _1 = (long unsigned int) i_31;
  _2 = _1 * 4;
  _3 = a_19(D) + _2;
  vect__4.692_78 = MEM <vector(8) int> [(int *)vectp_a.690_76];
  _4 = *_3;
  _5 = b_20(D) + _2;
  mask__61.693_80 = vect__4.692_78 < vect_cst__79;
  _61 = _4 < 0;
  vect__6.696_83 = .MASK_LOAD (vectp_b.694_81, 32B, mask__61.693_80);
  _6 = 0;
  mask__33.697_84 = vect__4.692_78 < vect__6.696_83;
  _33 = _4 < _6;
  mask__30.698_85 = mask__33.697_84 & mask__61.693_80;
  _30 = _33 & _61;
  _7 = c_21(D) + _2;
  vect__8.701_88 = .MASK_LOAD (vectp_c.699_86, 32B, mask__30.698_85);
  _8 = 0;
  _9 = d_22(D) + _2;
  vect__10.704_91 = .MASK_LOAD (vectp_d.702_89, 32B, mask__30.698_85);
  _10 = 0;
  _11 = e_23(D) + _2;
  vect__12.707_94 = .MASK_LOAD (vectp_e.705_92, 32B, mask__30.698_85);
  _12 = 0;
  vect__13.708_95 = vect__10.704_91 + vect__12.707_94;
  _13 = _10 + _12;
  vect__14.709_96 = vect__8.701_88 + vect__13.708_95;
  _14 = _8 + _13;
  .MASK_STORE (vectp_c.710_97, 32B, mask__30.698_85, vect__14.709_96);
  i_25 = i_31 + 1;
  ivtmp_35 = ivtmp_36 - 1;
  vectp_a.690_77 = vectp_a.690_76 + 32;
  vectp_b.694_82 = vectp_b.694_81 + 32;
  vectp_c.699_87 = vectp_c.699_86 + 32;
  vectp_d.702_90 = vectp_d.702_89 + 32;
  vectp_e.705_93 = vectp_e.705_92 + 32;
  vectp_c.710_98 = vectp_c.710_97 + 32;
  ivtmp_101 = ivtmp_100 + 1;
  if (ivtmp_101 < 8192)
    goto <bb 8>; [90.00%]
  else
    goto <bb 24>; [10.00%]

  <bb 8> [local count: 96636725]:
  goto <bb 3>; [100.00%]

  <bb 23> [local count: 10737414]:

  <bb 13> [local count: 212600877]:
  # i_39 = PHI <i_58(20), 0(23)>
  # ivtmp_41 = PHI <ivtmp_59(20), 65536(23)>
  _42 = (long unsigned int) i_39;
  _43 = _42 * 4;
  _44 = a_19(D) + _43;
  _45 = *_44;
  if (_45 < 0)
    goto <bb 15>; [41.00%]
  else
    goto <bb 19>; [59.00%]

  <bb 15> [local count: 87166359]:
  _46 = b_20(D) + _43;
  _47 = *_46;
  if (_45 < _47)
    goto <bb 17>; [50.00%]
  else
    goto <bb 19>; [50.00%]

  <bb 17> [local count: 43583179]:
  _48 = c_21(D) + _43;
  _49 = *_48;
  _50 = d_22(D) + _43;
  _51 = *_50;
  _52 = e_23(D) + _43;
  _53 = *_52;
  _54 = _51 + _53;
  _55 = _49 + _54;
  *_48 = _55;

  <bb 19> [local count: 212600877]:
  i_58 = i_39 + 1;
  ivtmp_59 = ivtmp_41 - 1;
  if (ivtmp_59 != 0)
    goto <bb 20>; [98.99%]
  else
    goto <bb 25>; [1.01%]

  <bb 25> [local count: 10737413]:
  goto <bb 7>; [100.00%]

  <bb 20> [local count: 210453395]:
  goto <bb 13>; [100.00%]

  <bb 24> [local count: 10737413]:

  <bb 7> [local count: 10737416]:
  return;

}



;; Function s2710 (s2710, funcdef_no=35, decl_uid=3745, cgraph_uid=36, symbol_order=35)


Analyzing loop at tsvc.c:183
tsvc.c:183:5: note:  === analyze_loop_nest ===
tsvc.c:183:5: note:   === vect_analyze_loop_form ===
tsvc.c:183:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_21(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: d_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: d_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_28
analyze_innermost: success.
	base_address: e_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_21(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_21(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_101
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 131072
	step: 0
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 256
	base_object: *_101
Creating dr for *_3
analyze_innermost: success.
	base_address: a_20(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_20(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: d_26(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *d_26(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_28
analyze_innermost: success.
	base_address: e_22(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *e_22(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_64
analyze_innermost: success.
	base_address: c_24(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_24(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:183:5: note:   === vect_analyze_data_refs ===
tsvc.c:183:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _6 = *_5;
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _98);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_3, 32B, _98, _10);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _12 = .MASK_LOAD (_64, 32B, _98);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _13 = .MASK_LOAD (_7, 32B, _98);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _98, _15);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _29 = .MASK_LOAD (_28, 32B, _100);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_5, 32B, _100, _31);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _32 = .MASK_LOAD (_101, 32B, _100);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _33 = *_3;
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _35 = .MASK_LOAD (_7, 32B, _50);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _50, _38);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _40 = .MASK_LOAD (_64, 32B, _57);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: _41 = .MASK_LOAD (_28, 32B, _57);
vector(8) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _57, _43);
vector(8) int
tsvc.c:183:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:183:5: note:   Analyze phi: i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:183:5: note:   step: 1,  init: 0
tsvc.c:183:5: note:   Detected induction.
tsvc.c:183:5: note:   Analyze phi: .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   Analyze phi: ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:183:5: note:   step: 4294967295,  init: 65536
tsvc.c:183:5: note:   Detected induction.
tsvc.c:183:5: note:   === vect_determine_precisions ===
tsvc.c:183:5: note:   ivtmp_59 has no range info
tsvc.c:183:5: note:   i_46 has range [0x1, 0x10000]
tsvc.c:183:5: note:   can narrow to unsigned:17 without loss of precision: i_46 = i_60 + 1;
tsvc.c:183:5: note:   _43 has no range info
tsvc.c:183:5: note:   _42 has no range info
tsvc.c:183:5: note:   using boolean precision 32 for _100 = _4 <= _6;
tsvc.c:183:5: note:   using boolean precision 32 for _51 = _32 > 0;
tsvc.c:183:5: note:   using boolean precision 32 for _16 = ~_51;
tsvc.c:183:5: note:   using boolean precision 32 for _57 = _16 & _100;
tsvc.c:183:5: note:   _38 has no range info
tsvc.c:183:5: note:   _36 has no range info
tsvc.c:183:5: note:   _33 has no range info
tsvc.c:183:5: note:   using boolean precision 32 for _50 = _51 & _100;
tsvc.c:183:5: note:   _31 has no range info
tsvc.c:183:5: note:   _30 has no range info
tsvc.c:183:5: note:   _15 has no range info
tsvc.c:183:5: note:   _14 has no range info
tsvc.c:183:5: note:   _10 has no range info
tsvc.c:183:5: note:   _9 has no range info
tsvc.c:183:5: note:   using boolean precision 32 for _98 = _4 > _6;
tsvc.c:183:5: note:   _6 has no range info
tsvc.c:183:5: note:   _4 has no range info
tsvc.c:183:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:183:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:183:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:183:5: note:   === vect_pattern_recog ===
tsvc.c:183:5: note:   vect_is_simple_use: operand (long unsigned int) i_60, type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand i_60 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:183:5: note:   vect_is_simple_use: operand (long unsigned int) i_60, type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand i_60 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:183:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:183:5: note:   widen_mult pattern recognized: patt_58 = (long unsigned int) patt_99;
tsvc.c:183:5: note:   extra pattern stmt: patt_99 = i_60 w* 4;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _57), type of def: internal
tsvc.c:183:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:183:5: note:   Detected interleaving load *_3 and *_3
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_28 and *_28
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_64 and *_64
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:183:5: note:   init: phi relevant? i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   init: phi relevant? .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   init: phi relevant? ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   init: stmt relevant? _1 = (long unsigned int) i_60;
tsvc.c:183:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:183:5: note:   init: stmt relevant? _3 = a_20(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:183:5: note:   init: stmt relevant? _5 = b_21(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:183:5: note:   init: stmt relevant? _64 = c_24(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _7 = d_26(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _98 = _4 > _6;
tsvc.c:183:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:183:5: note:   init: stmt relevant? _10 = _4 + _9;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   init: stmt relevant? _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _14 = _13 * 2;
tsvc.c:183:5: note:   init: stmt relevant? _15 = _12 + _14;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   init: stmt relevant? _28 = e_22(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _100 = _4 <= _6;
tsvc.c:183:5: note:   init: stmt relevant? _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   init: stmt relevant? _30 = _4 + _29;
tsvc.c:183:5: note:   init: stmt relevant? _31 = _29 + _30;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   init: stmt relevant? _101 = &MEM[(int *)c_24(D) + 131072B];
tsvc.c:183:5: note:   init: stmt relevant? _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   init: stmt relevant? _51 = _32 > 0;
tsvc.c:183:5: note:   init: stmt relevant? _50 = _51 & _100;
tsvc.c:183:5: note:   init: stmt relevant? _33 = *_3;
tsvc.c:183:5: note:   init: stmt relevant? _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   init: stmt relevant? _36 = _33 + _35;
tsvc.c:183:5: note:   init: stmt relevant? _38 = _35 + _36;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   init: stmt relevant? _16 = ~_51;
tsvc.c:183:5: note:   init: stmt relevant? _57 = _16 & _100;
tsvc.c:183:5: note:   init: stmt relevant? _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   init: stmt relevant? _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   init: stmt relevant? _42 = _41 * 2;
tsvc.c:183:5: note:   init: stmt relevant? _43 = _40 + _42;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   init: stmt relevant? i_46 = i_60 + 1;
tsvc.c:183:5: note:   init: stmt relevant? ivtmp_59 = ivtmp_62 - 1;
tsvc.c:183:5: note:   init: stmt relevant? if (ivtmp_59 != 0)
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _40 + _42, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _43 = _40 + _42;
tsvc.c:183:5: note:   worklist: examine stmt: _43 = _40 + _42;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_64, 32B, _57), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _41 * 2, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _42 = _41 * 2;
tsvc.c:183:5: note:   worklist: examine stmt: _42 = _41 * 2;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _57), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   worklist: examine stmt: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _57 = _16 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand ~_51, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _16 = ~_51;
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   worklist: examine stmt: _100 = _4 <= _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:183:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:183:5: note:   worklist: examine stmt: _16 = ~_51;
tsvc.c:183:5: note:   vect_is_simple_use: operand _32 > 0, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _51 = _32 > 0;
tsvc.c:183:5: note:   worklist: examine stmt: _51 = _32 > 0;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_101, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   worklist: examine stmt: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   vect_is_simple_use: operand _51 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _50 = _51 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _35 + _36, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _38 = _35 + _36;
tsvc.c:183:5: note:   worklist: examine stmt: _38 = _35 + _36;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _50), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   vect_is_simple_use: operand _33 + _35, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _36 = _33 + _35;
tsvc.c:183:5: note:   worklist: examine stmt: _36 = _33 + _35;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _33 = *_3;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _50), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _33 = *_3;
tsvc.c:183:5: note:   worklist: examine stmt: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   vect_is_simple_use: operand _51 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _50 = _51 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _50 = _51 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _32 > 0, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _51 = _32 > 0;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _29 + _30, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _31 = _29 + _30;
tsvc.c:183:5: note:   worklist: examine stmt: _31 = _29 + _30;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 + _29, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _30 = _4 + _29;
tsvc.c:183:5: note:   worklist: examine stmt: _30 = _4 + _29;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand _12 + _14, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _15 = _12 + _14;
tsvc.c:183:5: note:   worklist: examine stmt: _15 = _12 + _14;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_64, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _13 * 2, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _14 = _13 * 2;
tsvc.c:183:5: note:   worklist: examine stmt: _14 = _13 * 2;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   worklist: examine stmt: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _98 = _4 > _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:183:5: note:   worklist: examine stmt: _10 = _4 + _9;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:183:5: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_3, 32B, _98, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _12 = .MASK_LOAD (_64, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _13 = .MASK_LOAD (_7, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_64, 32B, _98, _15);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _33 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_3, 32B, _98, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _12 = .MASK_LOAD (_64, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _13 = .MASK_LOAD (_7, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_64, 32B, _98, _15);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_3, 32B, _98, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _12 = .MASK_LOAD (_64, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _13 = .MASK_LOAD (_7, 32B, _98);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _98, _15);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _12 = .MASK_LOAD (_64, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _13 = .MASK_LOAD (_7, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: .MASK_STORE (_64, 32B, _98, _15);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _33 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _13 = .MASK_LOAD (_7, 32B, _98);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _98, _15);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _98, _15);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = .MASK_LOAD (_101, 32B, _100);
  stmt_b: _33 = *_3;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = .MASK_LOAD (_101, 32B, _100);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = .MASK_LOAD (_101, 32B, _100);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = .MASK_LOAD (_101, 32B, _100);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = .MASK_LOAD (_101, 32B, _100);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _32 = .MASK_LOAD (_101, 32B, _100);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_3;
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_3;
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_3;
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_3;
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_3;
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _35 = .MASK_LOAD (_7, 32B, _50);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _35 = .MASK_LOAD (_7, 32B, _50);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _35 = .MASK_LOAD (_7, 32B, _50);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _35 = .MASK_LOAD (_7, 32B, _50);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _50, _38);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _50, _38);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _50, _38);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _40 = .MASK_LOAD (_64, 32B, _57);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _40 = .MASK_LOAD (_64, 32B, _57);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = .MASK_LOAD (_28, 32B, _57);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _6 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _98);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _98, _10);
  stmt_b: .MASK_STORE (_3, 32B, _98, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _12 = .MASK_LOAD (_64, 32B, _98);
  stmt_b: _12 = .MASK_LOAD (_64, 32B, _98);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _13 = .MASK_LOAD (_7, 32B, _98);
  stmt_b: _13 = .MASK_LOAD (_7, 32B, _98);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _98, _15);
  stmt_b: .MASK_STORE (_64, 32B, _98, _15);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _29 = .MASK_LOAD (_28, 32B, _100);
  stmt_b: _29 = .MASK_LOAD (_28, 32B, _100);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _100, _31);
  stmt_b: .MASK_STORE (_5, 32B, _100, _31);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _32 = .MASK_LOAD (_101, 32B, _100);
  stmt_b: _32 = .MASK_LOAD (_101, 32B, _100);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _33 = *_3;
  stmt_b: _33 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _35 = .MASK_LOAD (_7, 32B, _50);
  stmt_b: _35 = .MASK_LOAD (_7, 32B, _50);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _50, _38);
  stmt_b: .MASK_STORE (_64, 32B, _50, _38);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _40 = .MASK_LOAD (_64, 32B, _57);
  stmt_b: _40 = .MASK_LOAD (_64, 32B, _57);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _41 = .MASK_LOAD (_28, 32B, _57);
  stmt_b: _41 = .MASK_LOAD (_28, 32B, _57);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_64, 32B, _57, _43);
  stmt_b: .MASK_STORE (_64, 32B, _57, _43);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_5 and *_5
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_3
consider run-time aliasing test between *_7 and *_3
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_28
consider run-time aliasing test between *_3 and *_28
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_101
consider run-time aliasing test between *_3 and *_101
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_28
consider run-time aliasing test between *_3 and *_28
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_5
consider run-time aliasing test between *_64 and *_5
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_5
consider run-time aliasing test between *_64 and *_5
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_101
consider run-time aliasing test between *_64 and *_101
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_3
consider run-time aliasing test between *_64 and *_3
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_7
consider run-time aliasing test between *_64 and *_7
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_5
consider run-time aliasing test between *_28 and *_5
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_101
consider run-time aliasing test between *_5 and *_101
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_7
consider run-time aliasing test between *_5 and *_7
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_28
consider run-time aliasing test between *_5 and *_28
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:200:18: missed:   versioning for alias required: can't determine dependence between *_101 and *_64
consider run-time aliasing test between *_101 and *_64
tsvc.c:200:18: missed:   versioning for alias required: can't determine dependence between *_101 and *_64
consider run-time aliasing test between *_101 and *_64
tsvc.c:202:25: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:202:25: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:202:32: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:202:32: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:202:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:206:26: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:183:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:183:5: note:   ==> examining phi: i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   ==> examining phi: .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   ==> examining phi: ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   ==> examining statement: _1 = (long unsigned int) i_60;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining pattern def stmt: patt_99 = i_60 w* 4;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining pattern statement: patt_58 = (long unsigned int) patt_99;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _3 = a_20(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _5 = b_21(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _64 = c_24(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _7 = d_26(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _98 = _4 > _6;
tsvc.c:183:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _9 = _6 + _8;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _10 = _4 + _9;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _14 = _13 * 2;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _15 = _12 + _14;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _28 = e_22(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _100 = _4 <= _6;
tsvc.c:183:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _30 = _4 + _29;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _31 = _29 + _30;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _101 = &MEM[(int *)c_24(D) + 131072B];
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _51 = _32 > 0;
tsvc.c:183:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _50 = _51 & _100;
tsvc.c:183:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _33 = *_3;
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _36 = _33 + _35;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _38 = _35 + _36;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _16 = ~_51;
tsvc.c:183:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _57 = _16 & _100;
tsvc.c:183:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _42 = _41 * 2;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _43 = _40 + _42;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   precomputed vectype: vector(8) int
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: i_46 = i_60 + 1;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: ivtmp_59 = ivtmp_62 - 1;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: if (ivtmp_59 != 0)
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   vectorization factor = 8
tsvc.c:183:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x510c260 *_3 1 times scalar_load costs 12 in body
0x510c260 *_5 1 times scalar_load costs 12 in body
0x510c260 _4 > _6 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_LOAD (_7, 32B, _98) 1 times scalar_load costs 12 in body
0x510c260 _6 + _8 1 times scalar_stmt costs 4 in body
0x510c260 _4 + _9 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_STORE (_3, 32B, _98, _10) 1 times scalar_store costs 12 in body
0x510c260 .MASK_LOAD (_64, 32B, _98) 1 times scalar_load costs 12 in body
0x510c260 .MASK_LOAD (_7, 32B, _98) 1 times scalar_load costs 12 in body
0x510c260 _13 * 2 1 times scalar_stmt costs 12 in body
0x510c260 _12 + _14 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_STORE (_64, 32B, _98, _15) 1 times scalar_store costs 12 in body
0x510c260 _4 <= _6 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_LOAD (_28, 32B, _100) 1 times scalar_load costs 12 in body
0x510c260 _4 + _29 1 times scalar_stmt costs 4 in body
0x510c260 _29 + _30 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_STORE (_5, 32B, _100, _31) 1 times scalar_store costs 12 in body
0x510c260 .MASK_LOAD (_101, 32B, _100) 1 times scalar_load costs 12 in body
0x510c260 _32 > 0 1 times scalar_stmt costs 4 in body
0x510c260 _51 & _100 1 times scalar_stmt costs 4 in body
0x510c260 *_3 1 times scalar_load costs 12 in body
0x510c260 .MASK_LOAD (_7, 32B, _50) 1 times scalar_load costs 12 in body
0x510c260 _33 + _35 1 times scalar_stmt costs 4 in body
0x510c260 _35 + _36 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_STORE (_64, 32B, _50, _38) 1 times scalar_store costs 12 in body
0x510c260 ~_51 1 times scalar_stmt costs 4 in body
0x510c260 _16 & _100 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_LOAD (_64, 32B, _57) 1 times scalar_load costs 12 in body
0x510c260 .MASK_LOAD (_28, 32B, _57) 1 times scalar_load costs 12 in body
0x510c260 _41 * 2 1 times scalar_stmt costs 12 in body
0x510c260 _40 + _42 1 times scalar_stmt costs 4 in body
0x510c260 .MASK_STORE (_64, 32B, _57, _43) 1 times scalar_store costs 12 in body
tsvc.c:183:5: note:   === vect_analyze_slp ===
tsvc.c:183:5: note:   === vect_make_slp_decision ===
tsvc.c:183:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:183:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_28 and *_28
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   recording new base alignment for a_20(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:183:5: note:   recording new base alignment for b_21(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_5
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_28
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_5
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_101
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_28
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   === vect_prune_runtime_alias_test_list ===
tsvc.c:183:5: note:   can tell at compile time that *_64 and *_101 alias
tsvc.c:200:18: missed:   not vectorized: compilation time alias: .MASK_STORE (_64, 32B, _98, _15);
_32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:  ***** Analysis failed with vector mode V8SI
tsvc.c:183:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:183:5: note:  ***** Re-trying analysis with vector mode V16QI
tsvc.c:183:5: note:   === vect_analyze_loop_form ===
tsvc.c:183:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
tsvc.c:183:5: note:   === vect_analyze_data_refs ===
tsvc.c:183:5: note:   got vectype for stmt: _4 = *_3;
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _6 = *_5;
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _98);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_3, 32B, _98, _10);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _12 = .MASK_LOAD (_64, 32B, _98);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _13 = .MASK_LOAD (_7, 32B, _98);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _98, _15);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _29 = .MASK_LOAD (_28, 32B, _100);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_5, 32B, _100, _31);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _32 = .MASK_LOAD (_101, 32B, _100);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _33 = *_3;
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _35 = .MASK_LOAD (_7, 32B, _50);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _50, _38);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _40 = .MASK_LOAD (_64, 32B, _57);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: _41 = .MASK_LOAD (_28, 32B, _57);
vector(4) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _57, _43);
vector(4) int
tsvc.c:183:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:183:5: note:   Analyze phi: i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:183:5: note:   step: 1,  init: 0
tsvc.c:183:5: note:   Detected induction.
tsvc.c:183:5: note:   Analyze phi: .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   Analyze phi: ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:183:5: note:   step: 4294967295,  init: 65536
tsvc.c:183:5: note:   Detected induction.
tsvc.c:183:5: note:   === vect_determine_precisions ===
tsvc.c:183:5: note:   ivtmp_59 has no range info
tsvc.c:183:5: note:   i_46 has range [0x1, 0x10000]
tsvc.c:183:5: note:   can narrow to unsigned:17 without loss of precision: i_46 = i_60 + 1;
tsvc.c:183:5: note:   _43 has no range info
tsvc.c:183:5: note:   _42 has no range info
tsvc.c:183:5: note:   using boolean precision 32 for _100 = _4 <= _6;
tsvc.c:183:5: note:   using boolean precision 32 for _51 = _32 > 0;
tsvc.c:183:5: note:   using boolean precision 32 for _16 = ~_51;
tsvc.c:183:5: note:   using boolean precision 32 for _57 = _16 & _100;
tsvc.c:183:5: note:   _38 has no range info
tsvc.c:183:5: note:   _36 has no range info
tsvc.c:183:5: note:   _33 has no range info
tsvc.c:183:5: note:   using boolean precision 32 for _50 = _51 & _100;
tsvc.c:183:5: note:   _31 has no range info
tsvc.c:183:5: note:   _30 has no range info
tsvc.c:183:5: note:   _15 has no range info
tsvc.c:183:5: note:   _14 has no range info
tsvc.c:183:5: note:   _10 has no range info
tsvc.c:183:5: note:   _9 has no range info
tsvc.c:183:5: note:   using boolean precision 32 for _98 = _4 > _6;
tsvc.c:183:5: note:   _6 has no range info
tsvc.c:183:5: note:   _4 has no range info
tsvc.c:183:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:183:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:183:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:183:5: note:   === vect_pattern_recog ===
tsvc.c:183:5: note:   vect_is_simple_use: operand (long unsigned int) i_60, type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand i_60 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:183:5: note:   vect_is_simple_use: operand (long unsigned int) i_60, type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand i_60 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:183:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:183:5: note:   widen_mult pattern recognized: patt_34 = (long unsigned int) patt_54;
tsvc.c:183:5: note:   extra pattern stmt: patt_54 = i_60 w* 4;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _57), type of def: internal
tsvc.c:183:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:183:5: note:   Detected interleaving load *_3 and *_3
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_28 and *_28
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_64 and *_64
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:183:5: note:   init: phi relevant? i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   init: phi relevant? .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   init: phi relevant? ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   init: stmt relevant? _1 = (long unsigned int) i_60;
tsvc.c:183:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:183:5: note:   init: stmt relevant? _3 = a_20(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:183:5: note:   init: stmt relevant? _5 = b_21(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:183:5: note:   init: stmt relevant? _64 = c_24(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _7 = d_26(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _98 = _4 > _6;
tsvc.c:183:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:183:5: note:   init: stmt relevant? _10 = _4 + _9;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   init: stmt relevant? _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _14 = _13 * 2;
tsvc.c:183:5: note:   init: stmt relevant? _15 = _12 + _14;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   init: stmt relevant? _28 = e_22(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _100 = _4 <= _6;
tsvc.c:183:5: note:   init: stmt relevant? _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   init: stmt relevant? _30 = _4 + _29;
tsvc.c:183:5: note:   init: stmt relevant? _31 = _29 + _30;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   init: stmt relevant? _101 = &MEM[(int *)c_24(D) + 131072B];
tsvc.c:183:5: note:   init: stmt relevant? _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   init: stmt relevant? _51 = _32 > 0;
tsvc.c:183:5: note:   init: stmt relevant? _50 = _51 & _100;
tsvc.c:183:5: note:   init: stmt relevant? _33 = *_3;
tsvc.c:183:5: note:   init: stmt relevant? _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   init: stmt relevant? _36 = _33 + _35;
tsvc.c:183:5: note:   init: stmt relevant? _38 = _35 + _36;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   init: stmt relevant? _16 = ~_51;
tsvc.c:183:5: note:   init: stmt relevant? _57 = _16 & _100;
tsvc.c:183:5: note:   init: stmt relevant? _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   init: stmt relevant? _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   init: stmt relevant? _42 = _41 * 2;
tsvc.c:183:5: note:   init: stmt relevant? _43 = _40 + _42;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   init: stmt relevant? i_46 = i_60 + 1;
tsvc.c:183:5: note:   init: stmt relevant? ivtmp_59 = ivtmp_62 - 1;
tsvc.c:183:5: note:   init: stmt relevant? if (ivtmp_59 != 0)
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _40 + _42, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _43 = _40 + _42;
tsvc.c:183:5: note:   worklist: examine stmt: _43 = _40 + _42;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_64, 32B, _57), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _41 * 2, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _42 = _41 * 2;
tsvc.c:183:5: note:   worklist: examine stmt: _42 = _41 * 2;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _57), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   worklist: examine stmt: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _57 = _16 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand ~_51, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _16 = ~_51;
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   worklist: examine stmt: _100 = _4 <= _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:183:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:183:5: note:   worklist: examine stmt: _16 = ~_51;
tsvc.c:183:5: note:   vect_is_simple_use: operand _32 > 0, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _51 = _32 > 0;
tsvc.c:183:5: note:   worklist: examine stmt: _51 = _32 > 0;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_101, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   worklist: examine stmt: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   vect_is_simple_use: operand _51 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _50 = _51 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _35 + _36, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _38 = _35 + _36;
tsvc.c:183:5: note:   worklist: examine stmt: _38 = _35 + _36;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _50), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   vect_is_simple_use: operand _33 + _35, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _36 = _33 + _35;
tsvc.c:183:5: note:   worklist: examine stmt: _36 = _33 + _35;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _33 = *_3;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _50), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _33 = *_3;
tsvc.c:183:5: note:   worklist: examine stmt: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   vect_is_simple_use: operand _51 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _50 = _51 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _50 = _51 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _32 > 0, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _51 = _32 > 0;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _29 + _30, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _31 = _29 + _30;
tsvc.c:183:5: note:   worklist: examine stmt: _31 = _29 + _30;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 + _29, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _30 = _4 + _29;
tsvc.c:183:5: note:   worklist: examine stmt: _30 = _4 + _29;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand _12 + _14, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _15 = _12 + _14;
tsvc.c:183:5: note:   worklist: examine stmt: _15 = _12 + _14;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_64, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _13 * 2, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _14 = _13 * 2;
tsvc.c:183:5: note:   worklist: examine stmt: _14 = _13 * 2;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   worklist: examine stmt: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _98 = _4 > _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:183:5: note:   worklist: examine stmt: _10 = _4 + _9;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:183:5: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_5 and *_5
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_3
consider run-time aliasing test between *_7 and *_3
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_28
consider run-time aliasing test between *_3 and *_28
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_101
consider run-time aliasing test between *_3 and *_101
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_28
consider run-time aliasing test between *_3 and *_28
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_5
consider run-time aliasing test between *_64 and *_5
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_5
consider run-time aliasing test between *_64 and *_5
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_101
consider run-time aliasing test between *_64 and *_101
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_3
consider run-time aliasing test between *_64 and *_3
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_7
consider run-time aliasing test between *_64 and *_7
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_5
consider run-time aliasing test between *_28 and *_5
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_101
consider run-time aliasing test between *_5 and *_101
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_7
consider run-time aliasing test between *_5 and *_7
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_28
consider run-time aliasing test between *_5 and *_28
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:200:18: missed:   versioning for alias required: can't determine dependence between *_101 and *_64
consider run-time aliasing test between *_101 and *_64
tsvc.c:200:18: missed:   versioning for alias required: can't determine dependence between *_101 and *_64
consider run-time aliasing test between *_101 and *_64
tsvc.c:202:25: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:202:25: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:202:32: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:202:32: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:202:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:206:26: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:183:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:183:5: note:   ==> examining phi: i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   ==> examining phi: .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   ==> examining phi: ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   ==> examining statement: _1 = (long unsigned int) i_60;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining pattern def stmt: patt_54 = i_60 w* 4;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining pattern statement: patt_34 = (long unsigned int) patt_54;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _3 = a_20(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _5 = b_21(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _64 = c_24(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _7 = d_26(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _98 = _4 > _6;
tsvc.c:183:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _9 = _6 + _8;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _10 = _4 + _9;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _14 = _13 * 2;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _15 = _12 + _14;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _28 = e_22(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _100 = _4 <= _6;
tsvc.c:183:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _30 = _4 + _29;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _31 = _29 + _30;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _101 = &MEM[(int *)c_24(D) + 131072B];
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _51 = _32 > 0;
tsvc.c:183:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _50 = _51 & _100;
tsvc.c:183:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _33 = *_3;
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _36 = _33 + _35;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _38 = _35 + _36;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _16 = ~_51;
tsvc.c:183:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _57 = _16 & _100;
tsvc.c:183:5: note:   vectype: vector(4) <unnamed type>
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _42 = _41 * 2;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: _43 = _40 + _42;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   precomputed vectype: vector(4) int
tsvc.c:183:5: note:   nunits = 4
tsvc.c:183:5: note:   ==> examining statement: i_46 = i_60 + 1;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: ivtmp_59 = ivtmp_62 - 1;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: if (ivtmp_59 != 0)
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   vectorization factor = 4
tsvc.c:183:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x527add0 *_3 1 times scalar_load costs 12 in body
0x527add0 *_5 1 times scalar_load costs 12 in body
0x527add0 _4 > _6 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_LOAD (_7, 32B, _98) 1 times scalar_load costs 12 in body
0x527add0 _6 + _8 1 times scalar_stmt costs 4 in body
0x527add0 _4 + _9 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_STORE (_3, 32B, _98, _10) 1 times scalar_store costs 12 in body
0x527add0 .MASK_LOAD (_64, 32B, _98) 1 times scalar_load costs 12 in body
0x527add0 .MASK_LOAD (_7, 32B, _98) 1 times scalar_load costs 12 in body
0x527add0 _13 * 2 1 times scalar_stmt costs 12 in body
0x527add0 _12 + _14 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_STORE (_64, 32B, _98, _15) 1 times scalar_store costs 12 in body
0x527add0 _4 <= _6 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_LOAD (_28, 32B, _100) 1 times scalar_load costs 12 in body
0x527add0 _4 + _29 1 times scalar_stmt costs 4 in body
0x527add0 _29 + _30 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_STORE (_5, 32B, _100, _31) 1 times scalar_store costs 12 in body
0x527add0 .MASK_LOAD (_101, 32B, _100) 1 times scalar_load costs 12 in body
0x527add0 _32 > 0 1 times scalar_stmt costs 4 in body
0x527add0 _51 & _100 1 times scalar_stmt costs 4 in body
0x527add0 *_3 1 times scalar_load costs 12 in body
0x527add0 .MASK_LOAD (_7, 32B, _50) 1 times scalar_load costs 12 in body
0x527add0 _33 + _35 1 times scalar_stmt costs 4 in body
0x527add0 _35 + _36 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_STORE (_64, 32B, _50, _38) 1 times scalar_store costs 12 in body
0x527add0 ~_51 1 times scalar_stmt costs 4 in body
0x527add0 _16 & _100 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_LOAD (_64, 32B, _57) 1 times scalar_load costs 12 in body
0x527add0 .MASK_LOAD (_28, 32B, _57) 1 times scalar_load costs 12 in body
0x527add0 _41 * 2 1 times scalar_stmt costs 12 in body
0x527add0 _40 + _42 1 times scalar_stmt costs 4 in body
0x527add0 .MASK_STORE (_64, 32B, _57, _43) 1 times scalar_store costs 12 in body
tsvc.c:183:5: note:   === vect_analyze_slp ===
tsvc.c:183:5: note:   === vect_make_slp_decision ===
tsvc.c:183:5: note:  vectorization_factor = 4, niters = 65536
tsvc.c:183:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_28 and *_28
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   recording new base alignment for a_20(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:183:5: note:   recording new base alignment for b_21(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_5
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_28
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_5
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_101
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_28
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   === vect_prune_runtime_alias_test_list ===
tsvc.c:183:5: note:   can tell at compile time that *_64 and *_101 alias
tsvc.c:200:18: missed:   not vectorized: compilation time alias: .MASK_STORE (_64, 32B, _98, _15);
_32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:  ***** Analysis failed with vector mode V16QI
tsvc.c:183:5: note:  ***** Re-trying analysis with vector mode V8QI
tsvc.c:183:5: note:   === vect_analyze_loop_form ===
tsvc.c:183:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
tsvc.c:183:5: note:   === vect_analyze_data_refs ===
tsvc.c:183:5: note:   got vectype for stmt: _4 = *_3;
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _6 = *_5;
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _98);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_3, 32B, _98, _10);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _12 = .MASK_LOAD (_64, 32B, _98);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _13 = .MASK_LOAD (_7, 32B, _98);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _98, _15);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _29 = .MASK_LOAD (_28, 32B, _100);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_5, 32B, _100, _31);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _32 = .MASK_LOAD (_101, 32B, _100);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _33 = *_3;
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _35 = .MASK_LOAD (_7, 32B, _50);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _50, _38);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _40 = .MASK_LOAD (_64, 32B, _57);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: _41 = .MASK_LOAD (_28, 32B, _57);
vector(2) int
tsvc.c:183:5: note:   got vectype for stmt: .MASK_STORE (_64, 32B, _57, _43);
vector(2) int
tsvc.c:183:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:183:5: note:   Analyze phi: i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:183:5: note:   step: 1,  init: 0
tsvc.c:183:5: note:   Detected induction.
tsvc.c:183:5: note:   Analyze phi: .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   Analyze phi: ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:183:5: note:   step: 4294967295,  init: 65536
tsvc.c:183:5: note:   Detected induction.
tsvc.c:183:5: note:   === vect_determine_precisions ===
tsvc.c:183:5: note:   ivtmp_59 has no range info
tsvc.c:183:5: note:   i_46 has range [0x1, 0x10000]
tsvc.c:183:5: note:   can narrow to unsigned:17 without loss of precision: i_46 = i_60 + 1;
tsvc.c:183:5: note:   _43 has no range info
tsvc.c:183:5: note:   _42 has no range info
tsvc.c:183:5: note:   using normal nonmask vectors for _100 = _4 <= _6;
tsvc.c:183:5: note:   using normal nonmask vectors for _51 = _32 > 0;
tsvc.c:183:5: note:   using normal nonmask vectors for _16 = ~_51;
tsvc.c:183:5: note:   using normal nonmask vectors for _57 = _16 & _100;
tsvc.c:183:5: note:   _38 has no range info
tsvc.c:183:5: note:   _36 has no range info
tsvc.c:183:5: note:   _33 has no range info
tsvc.c:183:5: note:   using normal nonmask vectors for _50 = _51 & _100;
tsvc.c:183:5: note:   _31 has no range info
tsvc.c:183:5: note:   _30 has no range info
tsvc.c:183:5: note:   _15 has no range info
tsvc.c:183:5: note:   _14 has no range info
tsvc.c:183:5: note:   _10 has no range info
tsvc.c:183:5: note:   _9 has no range info
tsvc.c:183:5: note:   using normal nonmask vectors for _98 = _4 > _6;
tsvc.c:183:5: note:   _6 has no range info
tsvc.c:183:5: note:   _4 has no range info
tsvc.c:183:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:183:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:183:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:183:5: note:   === vect_pattern_recog ===
tsvc.c:183:5: note:   vect_is_simple_use: operand (long unsigned int) i_60, type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand i_60 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:183:5: note:   vect_is_simple_use: operand (long unsigned int) i_60, type of def: internal
tsvc.c:183:5: note:   vect_is_simple_use: operand i_60 = PHI <i_46(10), 0(19)>, type of def: induction
tsvc.c:183:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   vect_recog_mult_pattern: detected: _14 = _13 * 2;
tsvc.c:183:5: note:   mult pattern recognized: patt_18 = (int) patt_47;
tsvc.c:183:5: note:   extra pattern stmt: patt_48 = (unsigned int) _13;
tsvc.c:183:5: note:   extra pattern stmt: patt_47 = patt_48 << 1;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _57), type of def: internal
tsvc.c:183:5: note:   vect_recog_mult_pattern: detected: _42 = _41 * 2;
tsvc.c:183:5: note:   mult pattern recognized: patt_103 = (int) patt_102;
tsvc.c:183:5: note:   extra pattern stmt: patt_17 = (unsigned int) _41;
tsvc.c:183:5: note:   extra pattern stmt: patt_102 = patt_17 << 1;
tsvc.c:183:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:183:5: note:   Detected interleaving load *_3 and *_3
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_28 and *_28
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_64 and *_64
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:183:5: note:   Queuing group with duplicate access for fixup
tsvc.c:183:5: note:   Detected interleaving load *_7 and *_7
tsvc.c:183:5: note:   Load suitable for SLP vectorization only.
tsvc.c:183:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:183:5: note:   init: phi relevant? i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   init: phi relevant? .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   init: phi relevant? ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   init: stmt relevant? _1 = (long unsigned int) i_60;
tsvc.c:183:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:183:5: note:   init: stmt relevant? _3 = a_20(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:183:5: note:   init: stmt relevant? _5 = b_21(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:183:5: note:   init: stmt relevant? _64 = c_24(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _7 = d_26(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _98 = _4 > _6;
tsvc.c:183:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:183:5: note:   init: stmt relevant? _10 = _4 + _9;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   init: stmt relevant? _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   init: stmt relevant? _14 = _13 * 2;
tsvc.c:183:5: note:   init: stmt relevant? _15 = _12 + _14;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   init: stmt relevant? _28 = e_22(D) + _2;
tsvc.c:183:5: note:   init: stmt relevant? _100 = _4 <= _6;
tsvc.c:183:5: note:   init: stmt relevant? _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   init: stmt relevant? _30 = _4 + _29;
tsvc.c:183:5: note:   init: stmt relevant? _31 = _29 + _30;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   init: stmt relevant? _101 = &MEM[(int *)c_24(D) + 131072B];
tsvc.c:183:5: note:   init: stmt relevant? _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   init: stmt relevant? _51 = _32 > 0;
tsvc.c:183:5: note:   init: stmt relevant? _50 = _51 & _100;
tsvc.c:183:5: note:   init: stmt relevant? _33 = *_3;
tsvc.c:183:5: note:   init: stmt relevant? _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   init: stmt relevant? _36 = _33 + _35;
tsvc.c:183:5: note:   init: stmt relevant? _38 = _35 + _36;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   init: stmt relevant? _16 = ~_51;
tsvc.c:183:5: note:   init: stmt relevant? _57 = _16 & _100;
tsvc.c:183:5: note:   init: stmt relevant? _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   init: stmt relevant? _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   init: stmt relevant? _42 = _41 * 2;
tsvc.c:183:5: note:   init: stmt relevant? _43 = _40 + _42;
tsvc.c:183:5: note:   init: stmt relevant? .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:183:5: note:   mark relevant 5, live 0: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   init: stmt relevant? i_46 = i_60 + 1;
tsvc.c:183:5: note:   init: stmt relevant? ivtmp_59 = ivtmp_62 - 1;
tsvc.c:183:5: note:   init: stmt relevant? if (ivtmp_59 != 0)
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _40 + _42, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _43 = _40 + _42;
tsvc.c:183:5: note:   worklist: examine stmt: _43 = _40 + _42;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_64, 32B, _57), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _41 * 2, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: patt_103 = (int) patt_102;
tsvc.c:183:5: note:   worklist: examine stmt: patt_103 = (int) patt_102;
tsvc.c:183:5: note:   vect_is_simple_use: operand patt_17 << 1, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: patt_102 = patt_17 << 1;
tsvc.c:183:5: note:   worklist: examine stmt: patt_102 = patt_17 << 1;
tsvc.c:183:5: note:   vect_is_simple_use: operand (unsigned int) _41, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: patt_17 = (unsigned int) _41;
tsvc.c:183:5: note:   worklist: examine stmt: patt_17 = (unsigned int) _41;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _57), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   worklist: examine stmt: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   vect_is_simple_use: operand _16 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _57 = _16 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _57 = _16 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand ~_51, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _16 = ~_51;
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   worklist: examine stmt: _100 = _4 <= _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:183:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:183:5: note:   worklist: examine stmt: _16 = ~_51;
tsvc.c:183:5: note:   vect_is_simple_use: operand _32 > 0, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _51 = _32 > 0;
tsvc.c:183:5: note:   worklist: examine stmt: _51 = _32 > 0;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_101, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   worklist: examine stmt: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   vect_is_simple_use: operand _51 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _50 = _51 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _35 + _36, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _38 = _35 + _36;
tsvc.c:183:5: note:   worklist: examine stmt: _38 = _35 + _36;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _50), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   vect_is_simple_use: operand _33 + _35, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _36 = _33 + _35;
tsvc.c:183:5: note:   worklist: examine stmt: _36 = _33 + _35;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _33 = *_3;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _50), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _33 = *_3;
tsvc.c:183:5: note:   worklist: examine stmt: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   vect_is_simple_use: operand _51 & _100, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _50 = _51 & _100;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _50 = _51 & _100;
tsvc.c:183:5: note:   vect_is_simple_use: operand _32 > 0, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _51 = _32 > 0;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _29 + _30, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _31 = _29 + _30;
tsvc.c:183:5: note:   worklist: examine stmt: _31 = _29 + _30;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 + _29, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _30 = _4 + _29;
tsvc.c:183:5: note:   worklist: examine stmt: _30 = _4 + _29;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_28, 32B, _100), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 <= _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _100 = _4 <= _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand _12 + _14, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _15 = _12 + _14;
tsvc.c:183:5: note:   worklist: examine stmt: _15 = _12 + _14;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_64, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _13 * 2, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: patt_18 = (int) patt_47;
tsvc.c:183:5: note:   worklist: examine stmt: patt_18 = (int) patt_47;
tsvc.c:183:5: note:   vect_is_simple_use: operand patt_48 << 1, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: patt_47 = patt_48 << 1;
tsvc.c:183:5: note:   worklist: examine stmt: patt_47 = patt_48 << 1;
tsvc.c:183:5: note:   vect_is_simple_use: operand (unsigned int) _13, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: patt_48 = (unsigned int) _13;
tsvc.c:183:5: note:   worklist: examine stmt: patt_48 = (unsigned int) _13;
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   worklist: examine stmt: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: _98 = _4 > _6;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   worklist: examine stmt: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:183:5: note:   worklist: examine stmt: _10 = _4 + _9;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:183:5: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:183:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _98), type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:183:5: note:   mark relevant 5, live 0: _98 = _4 > _6;
tsvc.c:183:5: note:   already marked relevant/live.
tsvc.c:183:5: note:   === vect_analyze_data_ref_dependences ===
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_5 and *_5
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:185:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_3
consider run-time aliasing test between *_7 and *_3
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_28
consider run-time aliasing test between *_3 and *_28
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_101
consider run-time aliasing test between *_3 and *_101
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_7
consider run-time aliasing test between *_3 and *_7
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_28
consider run-time aliasing test between *_3 and *_28
tsvc.c:187:18: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_5
consider run-time aliasing test between *_64 and *_5
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:26: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_5
consider run-time aliasing test between *_64 and *_5
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_101
consider run-time aliasing test between *_64 and *_101
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_3
consider run-time aliasing test between *_64 and *_3
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_7
consider run-time aliasing test between *_64 and *_7
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:190:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_5
consider run-time aliasing test between *_28 and *_5
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:199:28: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_101
consider run-time aliasing test between *_5 and *_101
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_7
consider run-time aliasing test between *_5 and *_7
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_28
consider run-time aliasing test between *_5 and *_28
tsvc.c:199:18: missed:   versioning for alias required: can't determine dependence between *_5 and *_64
consider run-time aliasing test between *_5 and *_64
tsvc.c:200:18: missed:   versioning for alias required: can't determine dependence between *_101 and *_64
consider run-time aliasing test between *_101 and *_64
tsvc.c:200:18: missed:   versioning for alias required: can't determine dependence between *_101 and *_64
consider run-time aliasing test between *_101 and *_64
tsvc.c:202:25: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:202:25: missed:   versioning for alias required: can't determine dependence between *_3 and *_64
consider run-time aliasing test between *_3 and *_64
tsvc.c:202:32: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:202:32: missed:   versioning for alias required: can't determine dependence between *_7 and *_64
consider run-time aliasing test between *_7 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:202:22: missed:   versioning for alias required: can't determine dependence between *_64 and *_28
consider run-time aliasing test between *_64 and *_28
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:183:5: note:   dependence distance  = 0.
tsvc.c:183:5: note:   dependence distance == 0 between *_64 and *_64
tsvc.c:206:26: missed:   versioning for alias required: can't determine dependence between *_28 and *_64
consider run-time aliasing test between *_28 and *_64
tsvc.c:183:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:183:5: note:   ==> examining phi: i_60 = PHI <i_46(10), 0(19)>
tsvc.c:183:5: note:   ==> examining phi: .MEM_61 = PHI <.MEM_25(10), .MEM_19(D)(19)>
tsvc.c:183:5: note:   ==> examining phi: ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
tsvc.c:183:5: note:   ==> examining statement: _1 = (long unsigned int) i_60;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _3 = a_20(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _5 = b_21(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _64 = c_24(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _7 = d_26(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _98 = _4 > _6;
tsvc.c:183:5: note:   get vectype for scalar type: _Bool
tsvc.c:183:5: note:   vectype: vector(8) unsigned char
tsvc.c:183:5: note:   get vectype for smallest scalar type: _Bool
tsvc.c:183:5: note:   nunits vectype: vector(8) unsigned char
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _9 = _6 + _8;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _10 = _4 + _9;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_3, 32B, _98, _10);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _12 = .MASK_LOAD (_64, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _13 = .MASK_LOAD (_7, 32B, _98);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _14 = _13 * 2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining pattern def stmt: patt_48 = (unsigned int) _13;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   get vectype for smallest scalar type: unsigned int
tsvc.c:183:5: note:   nunits vectype: vector(2) unsigned int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining pattern def stmt: patt_47 = patt_48 << 1;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   get vectype for smallest scalar type: unsigned int
tsvc.c:183:5: note:   nunits vectype: vector(2) unsigned int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining pattern statement: patt_18 = (int) patt_47;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _15 = _12 + _14;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _98, _15);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _28 = e_22(D) + _2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _100 = _4 <= _6;
tsvc.c:183:5: note:   get vectype for scalar type: _Bool
tsvc.c:183:5: note:   vectype: vector(8) unsigned char
tsvc.c:183:5: note:   get vectype for smallest scalar type: _Bool
tsvc.c:183:5: note:   nunits vectype: vector(8) unsigned char
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _29 = .MASK_LOAD (_28, 32B, _100);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _30 = _4 + _29;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _31 = _29 + _30;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _100, _31);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _101 = &MEM[(int *)c_24(D) + 131072B];
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: _32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _51 = _32 > 0;
tsvc.c:183:5: note:   get vectype for scalar type: _Bool
tsvc.c:183:5: note:   vectype: vector(8) unsigned char
tsvc.c:183:5: note:   get vectype for smallest scalar type: _Bool
tsvc.c:183:5: note:   nunits vectype: vector(8) unsigned char
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _50 = _51 & _100;
tsvc.c:183:5: note:   get vectype for scalar type: _Bool
tsvc.c:183:5: note:   vectype: vector(8) unsigned char
tsvc.c:183:5: note:   get vectype for smallest scalar type: _Bool
tsvc.c:183:5: note:   nunits vectype: vector(8) unsigned char
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _33 = *_3;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _35 = .MASK_LOAD (_7, 32B, _50);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _36 = _33 + _35;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _38 = _35 + _36;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _50, _38);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _16 = ~_51;
tsvc.c:183:5: note:   get vectype for scalar type: _Bool
tsvc.c:183:5: note:   vectype: vector(8) unsigned char
tsvc.c:183:5: note:   get vectype for smallest scalar type: _Bool
tsvc.c:183:5: note:   nunits vectype: vector(8) unsigned char
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _57 = _16 & _100;
tsvc.c:183:5: note:   get vectype for scalar type: _Bool
tsvc.c:183:5: note:   vectype: vector(8) unsigned char
tsvc.c:183:5: note:   get vectype for smallest scalar type: _Bool
tsvc.c:183:5: note:   nunits vectype: vector(8) unsigned char
tsvc.c:183:5: note:   nunits = 8
tsvc.c:183:5: note:   ==> examining statement: _40 = .MASK_LOAD (_64, 32B, _57);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _41 = .MASK_LOAD (_28, 32B, _57);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _42 = _41 * 2;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining pattern def stmt: patt_17 = (unsigned int) _41;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   get vectype for smallest scalar type: unsigned int
tsvc.c:183:5: note:   nunits vectype: vector(2) unsigned int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining pattern def stmt: patt_102 = patt_17 << 1;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   get vectype for smallest scalar type: unsigned int
tsvc.c:183:5: note:   nunits vectype: vector(2) unsigned int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining pattern statement: patt_103 = (int) patt_102;
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: _43 = _40 + _42;
tsvc.c:183:5: note:   get vectype for scalar type: int
tsvc.c:183:5: note:   vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: .MASK_STORE (_64, 32B, _57, _43);
tsvc.c:183:5: note:   precomputed vectype: vector(2) int
tsvc.c:183:5: note:   nunits = 2
tsvc.c:183:5: note:   ==> examining statement: i_46 = i_60 + 1;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: ivtmp_59 = ivtmp_62 - 1;
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   ==> examining statement: if (ivtmp_59 != 0)
tsvc.c:183:5: note:   skip.
tsvc.c:183:5: note:   vectorization factor = 8
tsvc.c:183:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x510c240 *_3 1 times scalar_load costs 12 in body
0x510c240 *_5 1 times scalar_load costs 12 in body
0x510c240 _4 > _6 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_LOAD (_7, 32B, _98) 1 times scalar_load costs 12 in body
0x510c240 _6 + _8 1 times scalar_stmt costs 4 in body
0x510c240 _4 + _9 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_STORE (_3, 32B, _98, _10) 1 times scalar_store costs 12 in body
0x510c240 .MASK_LOAD (_64, 32B, _98) 1 times scalar_load costs 12 in body
0x510c240 .MASK_LOAD (_7, 32B, _98) 1 times scalar_load costs 12 in body
0x510c240 _13 * 2 1 times scalar_stmt costs 12 in body
0x510c240 _12 + _14 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_STORE (_64, 32B, _98, _15) 1 times scalar_store costs 12 in body
0x510c240 _4 <= _6 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_LOAD (_28, 32B, _100) 1 times scalar_load costs 12 in body
0x510c240 _4 + _29 1 times scalar_stmt costs 4 in body
0x510c240 _29 + _30 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_STORE (_5, 32B, _100, _31) 1 times scalar_store costs 12 in body
0x510c240 .MASK_LOAD (_101, 32B, _100) 1 times scalar_load costs 12 in body
0x510c240 _32 > 0 1 times scalar_stmt costs 4 in body
0x510c240 _51 & _100 1 times scalar_stmt costs 4 in body
0x510c240 *_3 1 times scalar_load costs 12 in body
0x510c240 .MASK_LOAD (_7, 32B, _50) 1 times scalar_load costs 12 in body
0x510c240 _33 + _35 1 times scalar_stmt costs 4 in body
0x510c240 _35 + _36 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_STORE (_64, 32B, _50, _38) 1 times scalar_store costs 12 in body
0x510c240 ~_51 1 times scalar_stmt costs 4 in body
0x510c240 _16 & _100 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_LOAD (_64, 32B, _57) 1 times scalar_load costs 12 in body
0x510c240 .MASK_LOAD (_28, 32B, _57) 1 times scalar_load costs 12 in body
0x510c240 _41 * 2 1 times scalar_stmt costs 12 in body
0x510c240 _40 + _42 1 times scalar_stmt costs 4 in body
0x510c240 .MASK_STORE (_64, 32B, _57, _43) 1 times scalar_store costs 12 in body
tsvc.c:183:5: note:   === vect_analyze_slp ===
tsvc.c:183:5: note:   === vect_make_slp_decision ===
tsvc.c:183:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:183:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_7 and *_7
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_28 and *_28
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   accesses have the same alignment: *_64 and *_64
tsvc.c:183:5: note:   recording new base alignment for a_20(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:183:5: note:   recording new base alignment for b_21(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_5
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_28
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_5
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_101
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_3
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_7
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_28
tsvc.c:183:5: note:   vect_compute_data_ref_alignment:
tsvc.c:183:5: note:   can't force alignment of ref: *_64
tsvc.c:183:5: note:   === vect_prune_runtime_alias_test_list ===
tsvc.c:183:5: note:   can tell at compile time that *_64 and *_101 alias
tsvc.c:200:18: missed:   not vectorized: compilation time alias: .MASK_STORE (_64, 32B, _98, _15);
_32 = .MASK_LOAD (_101, 32B, _100);
tsvc.c:183:5: note:  ***** Analysis failed with vector mode V8QI
tsvc.c:183:5: missed: couldn't vectorize loop
tsvc.c:181:6: note: vectorized 0 loops in function.
Removing basic block 3
;; basic block 3, loop depth 1
;;  pred:       10
;;              19
# i_60 = PHI <i_46(10), 0(19)>
# ivtmp_62 = PHI <ivtmp_59(10), 65536(19)>
_1 = (long unsigned int) i_60;
_2 = _1 * 4;
_3 = a_20(D) + _2;
_4 = *_3;
_5 = b_21(D) + _2;
_6 = *_5;
_64 = c_24(D) + _2;
_7 = d_26(D) + _2;
_98 = _4 > _6;
_8 = .MASK_LOAD (_7, 32B, _98);
_9 = _6 + _8;
_10 = _4 + _9;
.MASK_STORE (_3, 32B, _98, _10);
_12 = .MASK_LOAD (_64, 32B, _98);
_13 = .MASK_LOAD (_7, 32B, _98);
_14 = _13 * 2;
_15 = _12 + _14;
.MASK_STORE (_64, 32B, _98, _15);
_28 = e_22(D) + _2;
_100 = _4 <= _6;
_29 = .MASK_LOAD (_28, 32B, _100);
_30 = _4 + _29;
_31 = _29 + _30;
.MASK_STORE (_5, 32B, _100, _31);
_101 = &MEM[(int *)c_24(D) + 131072B];
_32 = .MASK_LOAD (_101, 32B, _100);
_51 = _32 > 0;
_50 = _51 & _100;
_33 = *_3;
_35 = .MASK_LOAD (_7, 32B, _50);
_36 = _33 + _35;
_38 = _35 + _36;
.MASK_STORE (_64, 32B, _50, _38);
_16 = ~_51;
_57 = _16 & _100;
_40 = .MASK_LOAD (_64, 32B, _57);
_41 = .MASK_LOAD (_28, 32B, _57);
_42 = _41 * 2;
_43 = _40 + _42;
.MASK_STORE (_64, 32B, _57, _43);
i_46 = i_60 + 1;
ivtmp_59 = ivtmp_62 - 1;
if (ivtmp_59 != 0)
  goto <bb 10>; [98.99%]
else
  goto <bb 9>; [1.01%]
;;  succ:       10
;;              9


Removing basic block 10
;; basic block 10, loop depth 1
;;  pred:      
;;  succ:      


Removing basic block 19
;; basic block 19, loop depth 0
;;  pred:      
;;  succ:      


Merging blocks 2 and 20
fix_loop_structure: fixing up loops for function
fix_loop_structure: removing loop 1
s2710 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  int i;
  int * _11;
  int _37;
  int * _39;
  long unsigned int _49;
  unsigned int ivtmp_52;
  _Bool _55;
  long unsigned int _63;
  int _65;
  int * _66;
  int * _67;
  int _68;
  int _69;
  int _70;
  int _72;
  int _73;
  int _74;
  int _75;
  int _76;
  int _78;
  int * _79;
  int _80;
  int _81;
  int _82;
  int * _84;
  int _85;
  int _86;
  int _87;
  int _89;
  int _90;
  int _91;
  int _92;
  unsigned int ivtmp_96;

  <bb 2> [local count: 10737414]:
  _55 = 0;

  <bb 11> [local count: 1063004408]:
  # i_56 = PHI <i_95(17), 0(2)>
  # ivtmp_52 = PHI <ivtmp_96(17), 65536(2)>
  _49 = (long unsigned int) i_56;
  _63 = _49 * 4;
  _39 = a_20(D) + _63;
  _37 = *_39;
  _11 = b_21(D) + _63;
  _65 = *_11;
  _66 = c_24(D) + _63;
  if (_37 > _65)
    goto <bb 15>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 15> [local count: 531502204]:
  _84 = d_26(D) + _63;
  _85 = *_84;
  _86 = _65 + _85;
  _87 = _37 + _86;
  *_39 = _87;
  _89 = *_66;
  _90 = *_84;
  _91 = _90 * 2;
  _92 = _89 + _91;
  *_66 = _92;
  goto <bb 16>; [100.00%]

  <bb 12> [local count: 531502204]:
  _67 = e_22(D) + _63;
  _68 = *_67;
  _69 = _37 + _68;
  _70 = _68 + _69;
  *_11 = _70;
  _72 = MEM[(int *)c_24(D) + 131072B];
  if (_72 > 0)
    goto <bb 14>; [59.00%]
  else
    goto <bb 13>; [41.00%]

  <bb 14> [local count: 313586302]:
  _78 = *_39;
  _79 = d_26(D) + _63;
  _80 = *_79;
  _81 = _78 + _80;
  _82 = _80 + _81;
  *_66 = _82;
  goto <bb 16>; [100.00%]

  <bb 13> [local count: 217915902]:
  _73 = *_66;
  _74 = *_67;
  _75 = _74 * 2;
  _76 = _73 + _75;
  *_66 = _76;

  <bb 16> [local count: 1063004410]:
  i_95 = i_56 + 1;
  ivtmp_96 = ivtmp_52 - 1;
  if (ivtmp_96 != 0)
    goto <bb 17>; [98.99%]
  else
    goto <bb 9>; [1.01%]

  <bb 17> [local count: 1052266997]:
  goto <bb 11>; [100.00%]

  <bb 9> [local count: 10737416]:
  return;

}



;; Function s2711 (s2711, funcdef_no=36, decl_uid=3763, cgraph_uid=37, symbol_order=36)


Analyzing loop at tsvc.c:213
tsvc.c:213:5: note:  === analyze_loop_nest ===
tsvc.c:213:5: note:   === vect_analyze_loop_form ===
tsvc.c:213:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: b_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_15(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_17(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: a_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_16(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:213:5: note:   === vect_analyze_data_refs ===
tsvc.c:213:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:213:5: note:   got vectype for stmt: _6 = .MASK_LOAD (_5, 32B, _41);
vector(8) int
tsvc.c:213:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _41);
vector(8) int
tsvc.c:213:5: note:   got vectype for stmt: .MASK_STORE (_5, 32B, _41, _10);
vector(8) int
tsvc.c:213:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:213:5: note:   Analyze phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:213:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:213:5: note:   step: 1,  init: 0
tsvc.c:213:5: note:   Detected induction.
tsvc.c:213:5: note:   Analyze phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:213:5: note:   Analyze phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:213:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:213:5: note:   step: 4294967295,  init: 65536
tsvc.c:213:5: note:   Detected induction.
tsvc.c:213:5: note:   === vect_determine_precisions ===
tsvc.c:213:5: note:   ivtmp_29 has no range info
tsvc.c:213:5: note:   i_19 has range [0x1, 0x10000]
tsvc.c:213:5: note:   can narrow to unsigned:17 without loss of precision: i_19 = i_25 + 1;
tsvc.c:213:5: note:   _10 has no range info
tsvc.c:213:5: note:   _9 has no range info
tsvc.c:213:5: note:   using boolean precision 32 for _41 = _4 != 0;
tsvc.c:213:5: note:   _4 has no range info
tsvc.c:213:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:213:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:213:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:213:5: note:   === vect_pattern_recog ===
tsvc.c:213:5: note:   vect_is_simple_use: operand (long unsigned int) i_25, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: operand i_25 = PHI <i_19(7), 0(15)>, type of def: induction
tsvc.c:213:5: note:   vect_is_simple_use: operand (long unsigned int) i_25, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: operand i_25 = PHI <i_19(7), 0(15)>, type of def: induction
tsvc.c:213:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:213:5: note:   widen_mult pattern recognized: patt_42 = (long unsigned int) patt_12;
tsvc.c:213:5: note:   extra pattern stmt: patt_12 = i_25 w* 4;
tsvc.c:213:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:213:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:213:5: note:   init: phi relevant? i_25 = PHI <i_19(7), 0(15)>
tsvc.c:213:5: note:   init: phi relevant? .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:213:5: note:   init: phi relevant? ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:213:5: note:   init: stmt relevant? _1 = (long unsigned int) i_25;
tsvc.c:213:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:213:5: note:   init: stmt relevant? _3 = b_15(D) + _2;
tsvc.c:213:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:213:5: note:   init: stmt relevant? _5 = a_16(D) + _2;
tsvc.c:213:5: note:   init: stmt relevant? _41 = _4 != 0;
tsvc.c:213:5: note:   init: stmt relevant? _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:213:5: note:   init: stmt relevant? _7 = c_17(D) + _2;
tsvc.c:213:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:213:5: note:   init: stmt relevant? _9 = _4 + _8;
tsvc.c:213:5: note:   init: stmt relevant? _10 = _6 + _9;
tsvc.c:213:5: note:   init: stmt relevant? .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:213:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:213:5: note:   mark relevant 5, live 0: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:213:5: note:   init: stmt relevant? i_19 = i_25 + 1;
tsvc.c:213:5: note:   init: stmt relevant? ivtmp_29 = ivtmp_30 - 1;
tsvc.c:213:5: note:   init: stmt relevant? if (ivtmp_29 != 0)
tsvc.c:213:5: note:   worklist: examine stmt: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _41 = _4 != 0;
tsvc.c:213:5: note:   vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _10 = _6 + _9;
tsvc.c:213:5: note:   worklist: examine stmt: _10 = _6 + _9;
tsvc.c:213:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _9 = _4 + _8;
tsvc.c:213:5: note:   worklist: examine stmt: _9 = _4 + _8;
tsvc.c:213:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:213:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:213:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _41 = _4 != 0;
tsvc.c:213:5: note:   already marked relevant/live.
tsvc.c:213:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:213:5: note:   worklist: examine stmt: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _41 = _4 != 0;
tsvc.c:213:5: note:   already marked relevant/live.
tsvc.c:213:5: note:   worklist: examine stmt: _41 = _4 != 0;
tsvc.c:213:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:213:5: note:   already marked relevant/live.
tsvc.c:213:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _41);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _41);
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _41);
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = .MASK_LOAD (_5, 32B, _41);
  stmt_b: _6 = .MASK_LOAD (_5, 32B, _41);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _41);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_5, 32B, _41, _10);
  stmt_b: .MASK_STORE (_5, 32B, _41, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:215:14: missed:   versioning for alias required: can't determine dependence between *_3 and *_5
consider run-time aliasing test between *_3 and *_5
tsvc.c:213:5: note:   dependence distance  = 0.
tsvc.c:213:5: note:   dependence distance == 0 between *_5 and *_5
tsvc.c:217:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_5
consider run-time aliasing test between *_7 and *_5
tsvc.c:213:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:213:5: note:   ==> examining phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:213:5: note:   ==> examining phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:213:5: note:   ==> examining phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:213:5: note:   ==> examining statement: _1 = (long unsigned int) i_25;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining pattern def stmt: patt_12 = i_25 w* 4;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining pattern statement: patt_42 = (long unsigned int) patt_12;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining statement: _3 = b_15(D) + _2;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:213:5: note:   precomputed vectype: vector(8) int
tsvc.c:213:5: note:   nunits = 8
tsvc.c:213:5: note:   ==> examining statement: _5 = a_16(D) + _2;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining statement: _41 = _4 != 0;
tsvc.c:213:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:213:5: note:   nunits = 8
tsvc.c:213:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:213:5: note:   precomputed vectype: vector(8) int
tsvc.c:213:5: note:   nunits = 8
tsvc.c:213:5: note:   ==> examining statement: _7 = c_17(D) + _2;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:213:5: note:   precomputed vectype: vector(8) int
tsvc.c:213:5: note:   nunits = 8
tsvc.c:213:5: note:   ==> examining statement: _9 = _4 + _8;
tsvc.c:213:5: note:   get vectype for scalar type: int
tsvc.c:213:5: note:   vectype: vector(8) int
tsvc.c:213:5: note:   nunits = 8
tsvc.c:213:5: note:   ==> examining statement: _10 = _6 + _9;
tsvc.c:213:5: note:   get vectype for scalar type: int
tsvc.c:213:5: note:   vectype: vector(8) int
tsvc.c:213:5: note:   nunits = 8
tsvc.c:213:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:213:5: note:   precomputed vectype: vector(8) int
tsvc.c:213:5: note:   nunits = 8
tsvc.c:213:5: note:   ==> examining statement: i_19 = i_25 + 1;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining statement: ivtmp_29 = ivtmp_30 - 1;
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   ==> examining statement: if (ivtmp_29 != 0)
tsvc.c:213:5: note:   skip.
tsvc.c:213:5: note:   vectorization factor = 8
tsvc.c:213:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x518cb20 *_3 1 times scalar_load costs 12 in body
0x518cb20 _4 != 0 1 times scalar_stmt costs 4 in body
0x518cb20 .MASK_LOAD (_5, 32B, _41) 1 times scalar_load costs 12 in body
0x518cb20 .MASK_LOAD (_7, 32B, _41) 1 times scalar_load costs 12 in body
0x518cb20 _4 + _8 1 times scalar_stmt costs 4 in body
0x518cb20 _6 + _9 1 times scalar_stmt costs 4 in body
0x518cb20 .MASK_STORE (_5, 32B, _41, _10) 1 times scalar_store costs 12 in body
tsvc.c:213:5: note:   === vect_analyze_slp ===
tsvc.c:213:5: note:   === vect_make_slp_decision ===
tsvc.c:213:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:213:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:213:5: note:   accesses have the same alignment: *_5 and *_5
tsvc.c:213:5: note:   recording new base alignment for b_15(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:213:5: note:   vect_compute_data_ref_alignment:
tsvc.c:213:5: note:   can't force alignment of ref: *_3
tsvc.c:213:5: note:   vect_compute_data_ref_alignment:
tsvc.c:213:5: note:   can't force alignment of ref: *_5
tsvc.c:213:5: note:   vect_compute_data_ref_alignment:
tsvc.c:213:5: note:   can't force alignment of ref: *_7
tsvc.c:213:5: note:   vect_compute_data_ref_alignment:
tsvc.c:213:5: note:   can't force alignment of ref: *_5
tsvc.c:213:5: note:   === vect_prune_runtime_alias_test_list ===
merged alias checks:
  reference:      *_3 vs. *_5
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_7 vs. *_5
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:213:5: note:   improved number of alias checks from 2 to 2
tsvc.c:213:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:213:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:213:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:213:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:213:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:213:5: note:   vect_can_advance_ivs_p:
tsvc.c:213:5: note:   Analyze phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:213:5: note:   Analyze phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:213:5: note:   reduc or virtual phi. skip.
tsvc.c:213:5: note:   Analyze phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:213:5: note:   Setting misalignment to unknown (-1).
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_load_cost: aligned.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:213:5: note:   Setting misalignment to unknown (-1).
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_store_cost: aligned.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:213:5: note:   Setting misalignment to unknown (-1).
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_load_cost: aligned.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:213:5: note:   Setting misalignment to unknown (-1).
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_store_cost: aligned.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:213:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:213:5: note:   Vectorizing an unaligned access.
tsvc.c:213:5: note:   Vectorizing an unaligned access.
tsvc.c:213:5: note:   Vectorizing an unaligned access.
tsvc.c:213:5: note:   Vectorizing an unaligned access.
tsvc.c:213:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:213:5: note:   === vect_analyze_loop_operations ===
tsvc.c:213:5: note:   examining phi: i_25 = PHI <i_19(7), 0(15)>
tsvc.c:213:5: note:   examining phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:213:5: note:   examining phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(15)>
tsvc.c:213:5: note:   ==> examining statement: _1 = (long unsigned int) i_25;
tsvc.c:213:5: note:   irrelevant.
tsvc.c:213:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:213:5: note:   irrelevant.
tsvc.c:213:5: note:   ==> examining statement: _3 = b_15(D) + _2;
tsvc.c:213:5: note:   irrelevant.
tsvc.c:213:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:213:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:213:5: missed:   Unsupported pattern.
tsvc.c:213:5: missed:   use not simple.
tsvc.c:213:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:213:5: missed:   Unsupported pattern.
tsvc.c:213:5: missed:   use not simple.
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:213:5: note:   ==> examining statement: _5 = a_16(D) + _2;
tsvc.c:213:5: note:   irrelevant.
tsvc.c:213:5: note:   ==> examining statement: _41 = _4 != 0;
tsvc.c:213:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:   vect_is_simple_use: operand 0, type of def: constant
tsvc.c:213:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 4 .
tsvc.c:213:5: note:   ==> examining statement: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:213:5: note:   ==> examining statement: _7 = c_17(D) + _2;
tsvc.c:213:5: note:   irrelevant.
tsvc.c:213:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:213:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:213:5: note:   ==> examining statement: _9 = _4 + _8;
tsvc.c:213:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:    === vectorizable_operation ===
tsvc.c:213:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:213:5: note:   ==> examining statement: _10 = _6 + _9;
tsvc.c:213:5: note:   vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:    === vectorizable_operation ===
tsvc.c:213:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:213:5: note:   ==> examining statement: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:213:5: note:   vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:213:5: note:   vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:213:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:213:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:213:5: note:   ==> examining statement: i_19 = i_25 + 1;
tsvc.c:213:5: note:   irrelevant.
tsvc.c:213:5: note:   ==> examining statement: ivtmp_29 = ivtmp_30 - 1;
tsvc.c:213:5: note:   irrelevant.
tsvc.c:213:5: note:   ==> examining statement: if (ivtmp_29 != 0)
tsvc.c:213:5: note:   irrelevant.
0x51bdbc0 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x51bdbc0 _4 != 0 1 times scalar_to_vec costs 4 in prologue
0x51bdbc0 _4 != 0 1 times vector_stmt costs 4 in body
0x51bdbc0 .MASK_LOAD (_5, 32B, _41) 1 times unaligned_load (misalign -1) costs 20 in body
0x51bdbc0 .MASK_LOAD (_7, 32B, _41) 1 times unaligned_load (misalign -1) costs 20 in body
0x51bdbc0 _4 + _8 1 times vector_stmt costs 4 in body
0x51bdbc0 _6 + _9 1 times vector_stmt costs 4 in body
0x51bdbc0 .MASK_STORE (_5, 32B, _41, _10) 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_29 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) b_15(D) + 4 * iteration does not wrap in statement _3 = b_15(D) + _2;
 in loop 1.
Statement _3 = b_15(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) a_16(D) + 4 * iteration does not wrap in statement _5 = a_16(D) + _2;
 in loop 1.
Statement _5 = a_16(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_17(D) + 4 * iteration does not wrap in statement _7 = c_17(D) + _2;
 in loop 1.
Statement _7 = c_17(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_19 = i_25 + 1;
 in loop 1.
Statement i_19 = i_25 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:213:5: note:  not using a fully-masked loop.
0x51bdbc0 <unknown> 2 times vector_stmt costs 8 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x51bdbc0 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:213:5: note:  Cost model analysis: 
  Vector inside of loop cost: 92
  Vector prologue cost: 28
  Vector epilogue cost: 0
  Scalar iteration cost: 60
  Scalar outside cost: 8
  Vector outside cost: 28
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:213:5: note:    Runtime profitability threshold = 8
tsvc.c:213:5: note:    Static estimate profitability threshold = 8
tsvc.c:213:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:213:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:213:5: note:  ***** Choosing vector mode V8SI
tsvc.c:213:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:213:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_3 and *_5
using an address-based WAR/WAW test
create runtime check for data references *_7 and *_5
using an address-based WAR/WAW test
tsvc.c:213:5: note:  created 2 versioning for alias checks.
tsvc.c:213:5: note:  trying to apply versioning to outer loop 0
tsvc.c:213:5: note:  reusing loop version created by if conversion
tsvc.c:213:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:213:5: note:  ------>vectorizing phi: i_25 = PHI <i_19(7), 0(19)>
tsvc.c:213:5: note:  ------>vectorizing phi: .MEM_26 = PHI <.MEM_18(7), .MEM_14(D)(19)>
tsvc.c:213:5: note:  ------>vectorizing phi: ivtmp_30 = PHI <ivtmp_29(7), 65536(19)>
tsvc.c:213:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_25;
tsvc.c:213:5: note:  ------>vectorizing statement: patt_12 = i_25 w* 4;
tsvc.c:213:5: note:  ------>vectorizing statement: patt_42 = (long unsigned int) patt_12;
tsvc.c:213:5: note:  ------>vectorizing statement: _3 = b_15(D) + _2;
tsvc.c:213:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:213:5: note:  transform statement.
tsvc.c:213:5: note:  transform load. ncopies = 1
tsvc.c:213:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_15(D)
tsvc.c:213:5: note:  created b_15(D)
tsvc.c:213:5: note:  add new stmt: vect__4.760_56 = MEM <vector(8) int> [(int *)vectp_b.758_54];
tsvc.c:213:5: note:  ------>vectorizing statement: _5 = a_16(D) + _2;
tsvc.c:213:5: note:  ------>vectorizing statement: _41 = _4 != 0;
tsvc.c:213:5: note:  transform statement.
tsvc.c:213:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:213:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:    def_stmt =  _4 = *_3;
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: 0
tsvc.c:213:5: note:  vect_is_simple_use: operand 0, type of def: constant
tsvc.c:213:5: note:  created new init_stmt: vect_cst__57 = { 0, 0, 0, 0, 0, 0, 0, 0 };
tsvc.c:213:5: note:  add new stmt: mask__41.761_58 = vect__4.760_56 != vect_cst__57;
tsvc.c:213:5: note:  ------>vectorizing statement: _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:213:5: note:  transform statement.
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:213:5: note:  transform load. ncopies = 1
tsvc.c:213:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_16(D)
tsvc.c:213:5: note:  created a_16(D)
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:    def_stmt =  _41 = _4 != 0;
tsvc.c:213:5: note:  add new stmt: vect__6.764_61 = .MASK_LOAD (vectp_a.762_59, 32B, mask__41.761_58);
tsvc.c:213:5: note:  ------>vectorizing statement: _7 = c_17(D) + _2;
tsvc.c:213:5: note:  ------>vectorizing statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:213:5: note:  transform statement.
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:213:5: note:  transform load. ncopies = 1
tsvc.c:213:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_17(D)
tsvc.c:213:5: note:  created c_17(D)
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:    def_stmt =  _41 = _4 != 0;
tsvc.c:213:5: note:  add new stmt: vect__8.767_64 = .MASK_LOAD (vectp_c.765_62, 32B, mask__41.761_58);
tsvc.c:213:5: note:  ------>vectorizing statement: _9 = _4 + _8;
tsvc.c:213:5: note:  transform statement.
tsvc.c:213:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:  transform binary/unary operation.
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:213:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:213:5: note:    def_stmt =  _4 = *_3;
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _8
tsvc.c:213:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:213:5: note:    def_stmt =  _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:213:5: note:  add new stmt: vect__9.768_65 = vect__4.760_56 + vect__8.767_64;
tsvc.c:213:5: note:  ------>vectorizing statement: _10 = _6 + _9;
tsvc.c:213:5: note:  transform statement.
tsvc.c:213:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:  transform binary/unary operation.
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:213:5: note:  vect_is_simple_use: operand .MASK_LOAD (_5, 32B, _41), type of def: internal
tsvc.c:213:5: note:    def_stmt =  _6 = .MASK_LOAD (_5, 32B, _41);
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 + _8, type of def: internal
tsvc.c:213:5: note:    def_stmt =  _9 = _4 + _8;
tsvc.c:213:5: note:  add new stmt: vect__10.769_66 = vect__6.764_61 + vect__9.768_65;
tsvc.c:213:5: note:  ------>vectorizing statement: .MASK_STORE (_5, 32B, _41, _10);
tsvc.c:213:5: note:  transform statement.
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:213:5: note:  vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:213:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:213:5: note:  transform store. ncopies = 1
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:213:5: note:  vect_is_simple_use: operand _6 + _9, type of def: internal
tsvc.c:213:5: note:    def_stmt =  _10 = _6 + _9;
tsvc.c:213:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:213:5: note:  vect_is_simple_use: operand _4 != 0, type of def: internal
tsvc.c:213:5: note:    def_stmt =  _41 = _4 != 0;
tsvc.c:213:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_16(D)
tsvc.c:213:5: note:  created a_16(D)
tsvc.c:213:5: note:  add new stmt: .MASK_STORE (vectp_a.770_67, 32B, mask__41.761_58, vect__10.769_66);
tsvc.c:213:5: note:  ------>vectorizing statement: i_19 = i_25 + 1;
tsvc.c:213:5: note:  ------>vectorizing statement: ivtmp_29 = ivtmp_30 - 1;
tsvc.c:213:5: note:  ------>vectorizing statement: vectp_b.758_55 = vectp_b.758_54 + 32;
tsvc.c:213:5: note:  ------>vectorizing statement: vectp_a.762_60 = vectp_a.762_59 + 32;
tsvc.c:213:5: note:  ------>vectorizing statement: vectp_c.765_63 = vectp_c.765_62 + 32;
tsvc.c:213:5: note:  ------>vectorizing statement: vectp_a.770_68 = vectp_a.770_67 + 32;
tsvc.c:213:5: note:  ------>vectorizing statement: if (ivtmp_29 != 0)
tsvc.c:213:5: note:  New loop exit condition: if (ivtmp_71 < 8192)
tsvc.c:213:5: note:  LOOP VECTORIZED

tsvc.c:211:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       19


fix_loop_structure: fixing up loops for function
s2711 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_a.771;
  vector(8) int * vectp_a.770;
  vector(8) int vect__10.769;
  vector(8) int vect__9.768;
  vector(8) int vect__8.767;
  vector(8) int * vectp_c.766;
  vector(8) int * vectp_c.765;
  vector(8) int vect__6.764;
  vector(8) int * vectp_a.763;
  vector(8) int * vectp_a.762;
  vector(8) <unnamed type> mask__41.761;
  vector(8) int vect__4.760;
  vector(8) int * vectp_b.759;
  vector(8) int * vectp_b.758;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  long unsigned int _11;
  unsigned int ivtmp_13;
  int * _20;
  int _21;
  int * _22;
  long unsigned int _23;
  _Bool _28;
  unsigned int ivtmp_29;
  unsigned int ivtmp_30;
  int _31;
  int * _32;
  int _33;
  int _34;
  int _35;
  unsigned int ivtmp_39;
  _Bool _41;
  int * _44;
  ssizetype _45;
  sizetype _46;
  _Bool _47;
  int * _48;
  ssizetype _49;
  sizetype _50;
  _Bool _51;
  _Bool _52;
  vector(8) int vect_cst__57;
  unsigned int ivtmp_70;
  unsigned int ivtmp_71;

  <bb 2> [local count: 10737416]:
  _44 = b_15(D) + 4;
  _45 = a_16(D) - _44;
  _46 = (sizetype) _45;
  _47 = _46 > 24;
  _48 = c_17(D) + 4;
  _49 = a_16(D) - _48;
  _50 = (sizetype) _49;
  _51 = _50 > 24;
  _52 = _47 & _51;
  _28 = 1;
  if (_52 != 0)
    goto <bb 19>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 19> [local count: 10737416]:
  vect_cst__57 = { 0, 0, 0, 0, 0, 0, 0, 0 };

  <bb 3> [local count: 107374159]:
  # i_25 = PHI <i_19(7), 0(19)>
  # ivtmp_30 = PHI <ivtmp_29(7), 65536(19)>
  # vectp_b.758_54 = PHI <vectp_b.758_55(7), b_15(D)(19)>
  # vectp_a.762_59 = PHI <vectp_a.762_60(7), a_16(D)(19)>
  # vectp_c.765_62 = PHI <vectp_c.765_63(7), c_17(D)(19)>
  # vectp_a.770_67 = PHI <vectp_a.770_68(7), a_16(D)(19)>
  # ivtmp_70 = PHI <ivtmp_71(7), 0(19)>
  _1 = (long unsigned int) i_25;
  _2 = _1 * 4;
  _3 = b_15(D) + _2;
  vect__4.760_56 = MEM <vector(8) int> [(int *)vectp_b.758_54];
  _4 = *_3;
  _5 = a_16(D) + _2;
  mask__41.761_58 = vect__4.760_56 != vect_cst__57;
  _41 = _4 != 0;
  vect__6.764_61 = .MASK_LOAD (vectp_a.762_59, 32B, mask__41.761_58);
  _6 = 0;
  _7 = c_17(D) + _2;
  vect__8.767_64 = .MASK_LOAD (vectp_c.765_62, 32B, mask__41.761_58);
  _8 = 0;
  vect__9.768_65 = vect__4.760_56 + vect__8.767_64;
  _9 = _4 + _8;
  vect__10.769_66 = vect__6.764_61 + vect__9.768_65;
  _10 = _6 + _9;
  .MASK_STORE (vectp_a.770_67, 32B, mask__41.761_58, vect__10.769_66);
  i_19 = i_25 + 1;
  ivtmp_29 = ivtmp_30 - 1;
  vectp_b.758_55 = vectp_b.758_54 + 32;
  vectp_a.762_60 = vectp_a.762_59 + 32;
  vectp_c.765_63 = vectp_c.765_62 + 32;
  vectp_a.770_68 = vectp_a.770_67 + 32;
  ivtmp_71 = ivtmp_70 + 1;
  if (ivtmp_71 < 8192)
    goto <bb 7>; [90.00%]
  else
    goto <bb 17>; [10.00%]

  <bb 7> [local count: 96636743]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737416]:

  <bb 9> [local count: 212600877]:
  # i_27 = PHI <i_38(13), 0(16)>
  # ivtmp_13 = PHI <ivtmp_39(13), 65536(16)>
  _11 = (long unsigned int) i_27;
  _23 = _11 * 4;
  _22 = b_15(D) + _23;
  _21 = *_22;
  if (_21 != 0)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 106300438]:
  _20 = a_16(D) + _23;
  _31 = *_20;
  _32 = c_17(D) + _23;
  _33 = *_32;
  _34 = _21 + _33;
  _35 = _31 + _34;
  *_20 = _35;

  <bb 12> [local count: 212600877]:
  i_38 = i_27 + 1;
  ivtmp_39 = ivtmp_13 - 1;
  if (ivtmp_39 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 6>; [100.00%]

  <bb 13> [local count: 210453394]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 6> [local count: 10737416]:
  return;

}



;; Function s2712 (s2712, funcdef_no=37, decl_uid=3781, cgraph_uid=38, symbol_order=37)


Analyzing loop at tsvc.c:223
tsvc.c:223:5: note:  === analyze_loop_nest ===
tsvc.c:223:5: note:   === vect_analyze_loop_form ===
tsvc.c:223:5: note:    === get_loop_niters ===
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Creating dr for *_3
analyze_innermost: success.
	base_address: a_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_15(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_5
analyze_innermost: success.
	base_address: b_16(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *b_16(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_7
analyze_innermost: success.
	base_address: c_17(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *c_17(D)
	Access function 0: {0B, +, 4}_1
Creating dr for *_3
analyze_innermost: success.
	base_address: a_15(D)
	offset from base address: 0
	constant offset from base address: 0
	step: 4
	base alignment: 4
	base misalignment: 0
	offset alignment: 256
	step alignment: 4
	base_object: *a_15(D)
	Access function 0: {0B, +, 4}_1
tsvc.c:223:5: note:   === vect_analyze_data_refs ===
tsvc.c:223:5: note:   got vectype for stmt: _4 = *_3;
vector(8) int
tsvc.c:223:5: note:   got vectype for stmt: _6 = *_5;
vector(8) int
tsvc.c:223:5: note:   got vectype for stmt: _8 = .MASK_LOAD (_7, 32B, _41);
vector(8) int
tsvc.c:223:5: note:   got vectype for stmt: .MASK_STORE (_3, 32B, _41, _10);
vector(8) int
tsvc.c:223:5: note:   === vect_analyze_scalar_cycles ===
tsvc.c:223:5: note:   Analyze phi: i_26 = PHI <i_19(7), 0(15)>
tsvc.c:223:5: note:   Access function of PHI: {0, +, 1}_1
tsvc.c:223:5: note:   step: 1,  init: 0
tsvc.c:223:5: note:   Detected induction.
tsvc.c:223:5: note:   Analyze phi: .MEM_27 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:223:5: note:   Analyze phi: ivtmp_32 = PHI <ivtmp_31(7), 65536(15)>
tsvc.c:223:5: note:   Access function of PHI: {65536, +, 4294967295}_1
tsvc.c:223:5: note:   step: 4294967295,  init: 65536
tsvc.c:223:5: note:   Detected induction.
tsvc.c:223:5: note:   === vect_determine_precisions ===
tsvc.c:223:5: note:   ivtmp_31 has no range info
tsvc.c:223:5: note:   i_19 has range [0x1, 0x10000]
tsvc.c:223:5: note:   can narrow to unsigned:17 without loss of precision: i_19 = i_26 + 1;
tsvc.c:223:5: note:   _10 has no range info
tsvc.c:223:5: note:   _9 has no range info
tsvc.c:223:5: note:   using boolean precision 32 for _41 = _4 > _6;
tsvc.c:223:5: note:   _6 has no range info
tsvc.c:223:5: note:   _4 has no range info
tsvc.c:223:5: note:   _2 has range [0x0, 0x3fffc]
tsvc.c:223:5: note:   can narrow to unsigned:18 without loss of precision: _2 = _1 * 4;
tsvc.c:223:5: note:   _1 has range [0x0, 0xffff]
tsvc.c:223:5: note:   === vect_pattern_recog ===
tsvc.c:223:5: note:   vect_is_simple_use: operand (long unsigned int) i_26, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: operand i_26 = PHI <i_19(7), 0(15)>, type of def: induction
tsvc.c:223:5: note:   vect_is_simple_use: operand (long unsigned int) i_26, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: operand i_26 = PHI <i_19(7), 0(15)>, type of def: induction
tsvc.c:223:5: note:   vect_recog_widen_mult_pattern: detected: _2 = _1 * 4;
tsvc.c:223:5: note:   widen_mult pattern recognized: patt_42 = (long unsigned int) patt_12;
tsvc.c:223:5: note:   extra pattern stmt: patt_12 = i_26 w* 4;
tsvc.c:223:5: note:   === vect_analyze_data_ref_accesses ===
tsvc.c:223:5: note:   === vect_mark_stmts_to_be_vectorized ===
tsvc.c:223:5: note:   init: phi relevant? i_26 = PHI <i_19(7), 0(15)>
tsvc.c:223:5: note:   init: phi relevant? .MEM_27 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:223:5: note:   init: phi relevant? ivtmp_32 = PHI <ivtmp_31(7), 65536(15)>
tsvc.c:223:5: note:   init: stmt relevant? _1 = (long unsigned int) i_26;
tsvc.c:223:5: note:   init: stmt relevant? _2 = _1 * 4;
tsvc.c:223:5: note:   init: stmt relevant? _3 = a_15(D) + _2;
tsvc.c:223:5: note:   init: stmt relevant? _4 = *_3;
tsvc.c:223:5: note:   init: stmt relevant? _5 = b_16(D) + _2;
tsvc.c:223:5: note:   init: stmt relevant? _6 = *_5;
tsvc.c:223:5: note:   init: stmt relevant? _7 = c_17(D) + _2;
tsvc.c:223:5: note:   init: stmt relevant? _41 = _4 > _6;
tsvc.c:223:5: note:   init: stmt relevant? _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:223:5: note:   init: stmt relevant? _9 = _6 + _8;
tsvc.c:223:5: note:   init: stmt relevant? _10 = _4 + _9;
tsvc.c:223:5: note:   init: stmt relevant? .MASK_STORE (_3, 32B, _41, _10);
tsvc.c:223:5: note:   vec_stmt_relevant_p: stmt has vdefs.
tsvc.c:223:5: note:   mark relevant 5, live 0: .MASK_STORE (_3, 32B, _41, _10);
tsvc.c:223:5: note:   init: stmt relevant? i_19 = i_26 + 1;
tsvc.c:223:5: note:   init: stmt relevant? ivtmp_31 = ivtmp_32 - 1;
tsvc.c:223:5: note:   init: stmt relevant? if (ivtmp_31 != 0)
tsvc.c:223:5: note:   worklist: examine stmt: .MASK_STORE (_3, 32B, _41, _10);
tsvc.c:223:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _41 = _4 > _6;
tsvc.c:223:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _10 = _4 + _9;
tsvc.c:223:5: note:   worklist: examine stmt: _10 = _4 + _9;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:223:5: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _9 = _6 + _8;
tsvc.c:223:5: note:   worklist: examine stmt: _9 = _6 + _8;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:223:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:223:5: note:   worklist: examine stmt: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:223:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _41 = _4 > _6;
tsvc.c:223:5: note:   already marked relevant/live.
tsvc.c:223:5: note:   worklist: examine stmt: _6 = *_5;
tsvc.c:223:5: note:   worklist: examine stmt: _4 = *_3;
tsvc.c:223:5: note:   worklist: examine stmt: _41 = _4 > _6;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _4 = *_3;
tsvc.c:223:5: note:   already marked relevant/live.
tsvc.c:223:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:   mark relevant 5, live 0: _6 = *_5;
tsvc.c:223:5: note:   already marked relevant/live.
tsvc.c:223:5: note:   === vect_analyze_data_ref_dependences ===
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _6 = *_5;
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: .MASK_STORE (_3, 32B, _41, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: .MASK_STORE (_3, 32B, _41, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _41);
  stmt_b: .MASK_STORE (_3, 32B, _41, _10);
) -> dependence analysis failed
(compute_affine_dependence
  stmt_a: _4 = *_3;
  stmt_b: _4 = *_3;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _6 = *_5;
  stmt_b: _6 = *_5;
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: _8 = .MASK_LOAD (_7, 32B, _41);
  stmt_b: _8 = .MASK_LOAD (_7, 32B, _41);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
(compute_affine_dependence
  stmt_a: .MASK_STORE (_3, 32B, _41, _10);
  stmt_b: .MASK_STORE (_3, 32B, _41, _10);
(analyze_overlapping_iterations 
  (chrec_a = {0B, +, 4}_1)
  (chrec_b = {0B, +, 4}_1)
  (overlap_iterations_a = [0])
  (overlap_iterations_b = [0]))
)
tsvc.c:223:5: note:   dependence distance  = 0.
tsvc.c:223:5: note:   dependence distance == 0 between *_3 and *_3
tsvc.c:225:21: missed:   versioning for alias required: can't determine dependence between *_5 and *_3
consider run-time aliasing test between *_5 and *_3
tsvc.c:227:29: missed:   versioning for alias required: can't determine dependence between *_7 and *_3
consider run-time aliasing test between *_7 and *_3
tsvc.c:223:5: note:   === vect_determine_vectorization_factor ===
tsvc.c:223:5: note:   ==> examining phi: i_26 = PHI <i_19(7), 0(15)>
tsvc.c:223:5: note:   ==> examining phi: .MEM_27 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:223:5: note:   ==> examining phi: ivtmp_32 = PHI <ivtmp_31(7), 65536(15)>
tsvc.c:223:5: note:   ==> examining statement: _1 = (long unsigned int) i_26;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining pattern def stmt: patt_12 = i_26 w* 4;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining pattern statement: patt_42 = (long unsigned int) patt_12;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining statement: _3 = a_15(D) + _2;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:223:5: note:   precomputed vectype: vector(8) int
tsvc.c:223:5: note:   nunits = 8
tsvc.c:223:5: note:   ==> examining statement: _5 = b_16(D) + _2;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:223:5: note:   precomputed vectype: vector(8) int
tsvc.c:223:5: note:   nunits = 8
tsvc.c:223:5: note:   ==> examining statement: _7 = c_17(D) + _2;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining statement: _41 = _4 > _6;
tsvc.c:223:5: note:   vectype: vector(8) <unnamed type>
tsvc.c:223:5: note:   nunits = 8
tsvc.c:223:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:223:5: note:   precomputed vectype: vector(8) int
tsvc.c:223:5: note:   nunits = 8
tsvc.c:223:5: note:   ==> examining statement: _9 = _6 + _8;
tsvc.c:223:5: note:   get vectype for scalar type: int
tsvc.c:223:5: note:   vectype: vector(8) int
tsvc.c:223:5: note:   nunits = 8
tsvc.c:223:5: note:   ==> examining statement: _10 = _4 + _9;
tsvc.c:223:5: note:   get vectype for scalar type: int
tsvc.c:223:5: note:   vectype: vector(8) int
tsvc.c:223:5: note:   nunits = 8
tsvc.c:223:5: note:   ==> examining statement: .MASK_STORE (_3, 32B, _41, _10);
tsvc.c:223:5: note:   precomputed vectype: vector(8) int
tsvc.c:223:5: note:   nunits = 8
tsvc.c:223:5: note:   ==> examining statement: i_19 = i_26 + 1;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining statement: ivtmp_31 = ivtmp_32 - 1;
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   ==> examining statement: if (ivtmp_31 != 0)
tsvc.c:223:5: note:   skip.
tsvc.c:223:5: note:   vectorization factor = 8
tsvc.c:223:5: note:   === vect_compute_single_scalar_iteration_cost ===
0x518cb20 *_3 1 times scalar_load costs 12 in body
0x518cb20 *_5 1 times scalar_load costs 12 in body
0x518cb20 _4 > _6 1 times scalar_stmt costs 4 in body
0x518cb20 .MASK_LOAD (_7, 32B, _41) 1 times scalar_load costs 12 in body
0x518cb20 _6 + _8 1 times scalar_stmt costs 4 in body
0x518cb20 _4 + _9 1 times scalar_stmt costs 4 in body
0x518cb20 .MASK_STORE (_3, 32B, _41, _10) 1 times scalar_store costs 12 in body
tsvc.c:223:5: note:   === vect_analyze_slp ===
tsvc.c:223:5: note:   === vect_make_slp_decision ===
tsvc.c:223:5: note:  vectorization_factor = 8, niters = 65536
tsvc.c:223:5: note:   === vect_analyze_data_refs_alignment ===
tsvc.c:223:5: note:   accesses have the same alignment: *_3 and *_3
tsvc.c:223:5: note:   recording new base alignment for a_15(D)
  alignment:    4
  misalignment: 0
  based on:     _4 = *_3;
tsvc.c:223:5: note:   recording new base alignment for b_16(D)
  alignment:    4
  misalignment: 0
  based on:     _6 = *_5;
tsvc.c:223:5: note:   vect_compute_data_ref_alignment:
tsvc.c:223:5: note:   can't force alignment of ref: *_3
tsvc.c:223:5: note:   vect_compute_data_ref_alignment:
tsvc.c:223:5: note:   can't force alignment of ref: *_5
tsvc.c:223:5: note:   vect_compute_data_ref_alignment:
tsvc.c:223:5: note:   can't force alignment of ref: *_7
tsvc.c:223:5: note:   vect_compute_data_ref_alignment:
tsvc.c:223:5: note:   can't force alignment of ref: *_3
tsvc.c:223:5: note:   === vect_prune_runtime_alias_test_list ===
merged alias checks:
  reference:      *_5 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
  reference:      *_7 vs. *_3
  segment length: 28
  access size:    4
  alignment:      4
  flags:          WAR
tsvc.c:223:5: note:   improved number of alias checks from 2 to 2
tsvc.c:223:5: note:   === vect_enhance_data_refs_alignment ===
tsvc.c:223:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:223:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:223:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:223:5: missed:   Unknown misalignment, naturally aligned
tsvc.c:223:5: note:   vect_can_advance_ivs_p:
tsvc.c:223:5: note:   Analyze phi: i_26 = PHI <i_19(7), 0(15)>
tsvc.c:223:5: note:   Analyze phi: .MEM_27 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:223:5: note:   reduc or virtual phi. skip.
tsvc.c:223:5: note:   Analyze phi: ivtmp_32 = PHI <ivtmp_31(7), 65536(15)>
tsvc.c:223:5: note:   vect_model_load_cost: aligned.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:223:5: note:   Setting misalignment to unknown (-1).
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:223:5: note:   Setting misalignment to unknown (-1).
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:223:5: note:   vect_model_store_cost: aligned.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:223:5: note:   vect_model_load_cost: aligned.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:223:5: note:   Setting misalignment to unknown (-1).
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:223:5: note:   Setting misalignment to unknown (-1).
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:223:5: note:   vect_model_store_cost: aligned.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 20, outside_cost = 0.
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 40, outside_cost = 0.
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 60, outside_cost = 0.
tsvc.c:223:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_get_data_access_cost: inside_cost = 80, outside_cost = 0.
tsvc.c:223:5: note:   Vectorizing an unaligned access.
tsvc.c:223:5: note:   Vectorizing an unaligned access.
tsvc.c:223:5: note:   Vectorizing an unaligned access.
tsvc.c:223:5: note:   Vectorizing an unaligned access.
tsvc.c:223:5: note:   === vect_dissolve_slp_only_groups ===
tsvc.c:223:5: note:   === vect_analyze_loop_operations ===
tsvc.c:223:5: note:   examining phi: i_26 = PHI <i_19(7), 0(15)>
tsvc.c:223:5: note:   examining phi: .MEM_27 = PHI <.MEM_18(7), .MEM_14(D)(15)>
tsvc.c:223:5: note:   examining phi: ivtmp_32 = PHI <ivtmp_31(7), 65536(15)>
tsvc.c:223:5: note:   ==> examining statement: _1 = (long unsigned int) i_26;
tsvc.c:223:5: note:   irrelevant.
tsvc.c:223:5: note:   ==> examining statement: _2 = _1 * 4;
tsvc.c:223:5: note:   irrelevant.
tsvc.c:223:5: note:   ==> examining statement: _3 = a_15(D) + _2;
tsvc.c:223:5: note:   irrelevant.
tsvc.c:223:5: note:   ==> examining statement: _4 = *_3;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:223:5: missed:   Unsupported pattern.
tsvc.c:223:5: missed:   use not simple.
tsvc.c:223:5: note:   vect_is_simple_use: operand *_3, type of def: unknown
tsvc.c:223:5: missed:   Unsupported pattern.
tsvc.c:223:5: missed:   use not simple.
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:223:5: note:   ==> examining statement: _5 = b_16(D) + _2;
tsvc.c:223:5: note:   irrelevant.
tsvc.c:223:5: note:   ==> examining statement: _6 = *_5;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:223:5: missed:   Unsupported pattern.
tsvc.c:223:5: missed:   use not simple.
tsvc.c:223:5: note:   vect_is_simple_use: operand *_5, type of def: unknown
tsvc.c:223:5: missed:   Unsupported pattern.
tsvc.c:223:5: missed:   use not simple.
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:223:5: note:   ==> examining statement: _7 = c_17(D) + _2;
tsvc.c:223:5: note:   irrelevant.
tsvc.c:223:5: note:   ==> examining statement: _41 = _4 > _6;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:   vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:223:5: note:   ==> examining statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:223:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:223:5: note:   vect_model_load_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_model_load_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:223:5: note:   ==> examining statement: _9 = _6 + _8;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:   vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:    === vectorizable_operation ===
tsvc.c:223:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:223:5: note:   ==> examining statement: _10 = _4 + _9;
tsvc.c:223:5: note:   vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:   vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:    === vectorizable_operation ===
tsvc.c:223:5: note:    vect_model_simple_cost: inside_cost = 4, prologue_cost = 0 .
tsvc.c:223:5: note:   ==> examining statement: .MASK_STORE (_3, 32B, _41, _10);
tsvc.c:223:5: note:   vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:223:5: note:   vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:223:5: note:   vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:   vect_model_store_cost: unaligned supported by hardware.
tsvc.c:223:5: note:   vect_model_store_cost: inside_cost = 20, prologue_cost = 0 .
tsvc.c:223:5: note:   ==> examining statement: i_19 = i_26 + 1;
tsvc.c:223:5: note:   irrelevant.
tsvc.c:223:5: note:   ==> examining statement: ivtmp_31 = ivtmp_32 - 1;
tsvc.c:223:5: note:   irrelevant.
tsvc.c:223:5: note:   ==> examining statement: if (ivtmp_31 != 0)
tsvc.c:223:5: note:   irrelevant.
0x5046880 *_3 1 times unaligned_load (misalign -1) costs 20 in body
0x5046880 *_5 1 times unaligned_load (misalign -1) costs 20 in body
0x5046880 _4 > _6 1 times vector_stmt costs 4 in body
0x5046880 .MASK_LOAD (_7, 32B, _41) 1 times unaligned_load (misalign -1) costs 20 in body
0x5046880 _6 + _8 1 times vector_stmt costs 4 in body
0x5046880 _4 + _9 1 times vector_stmt costs 4 in body
0x5046880 .MASK_STORE (_3, 32B, _41, _10) 1 times unaligned_store (misalign -1) costs 20 in body
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Analyzing # of iterations of loop 1
  exit condition [65535, + , 4294967295] != 0
  bounds on difference of bases: -65535 ... -65535
  result:
    # of iterations 65535, bounded by 65535
Statement (exit)if (ivtmp_31 != 0)
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
Induction variable (int *) a_15(D) + 4 * iteration does not wrap in statement _3 = a_15(D) + _2;
 in loop 1.
Statement _3 = a_15(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) b_16(D) + 4 * iteration does not wrap in statement _5 = b_16(D) + _2;
 in loop 1.
Statement _5 = b_16(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int *) c_17(D) + 4 * iteration does not wrap in statement _7 = c_17(D) + _2;
 in loop 1.
Statement _7 = c_17(D) + _2;
 is executed at most 4611686018427387902 (bounded by 4611686018427387902) + 1 times in loop 1.
Induction variable (int) 1 + 1 * iteration does not wrap in statement i_19 = i_26 + 1;
 in loop 1.
Statement i_19 = i_26 + 1;
 is executed at most 65535 (bounded by 65535) + 1 times in loop 1.
tsvc.c:223:5: note:  not using a fully-masked loop.
0x5046880 <unknown> 2 times vector_stmt costs 8 in prologue
cost model: Adding cost of checks for loop versioning aliasing.
0x5046880 <unknown> 1 times cond_branch_taken costs 16 in prologue
tsvc.c:223:5: note:  Cost model analysis: 
  Vector inside of loop cost: 92
  Vector prologue cost: 24
  Vector epilogue cost: 0
  Scalar iteration cost: 60
  Scalar outside cost: 8
  Vector outside cost: 24
  prologue iterations: 0
  epilogue iterations: 0
  Calculated minimum iters for profitability: 1
tsvc.c:223:5: note:    Runtime profitability threshold = 8
tsvc.c:223:5: note:    Static estimate profitability threshold = 8
tsvc.c:223:5: note:  ***** Analysis succeeded with vector mode V8SI
tsvc.c:223:5: note:  ***** The result for vector mode V32QI would be the same
tsvc.c:223:5: note:  ***** Choosing vector mode V8SI
tsvc.c:223:5: optimized: loop vectorized using 32 byte vectors
tsvc.c:223:5: note:  === vec_transform_loop ===
split exit edge
create runtime check for data references *_5 and *_3
using an address-based WAR/WAW test
create runtime check for data references *_7 and *_3
using an address-based WAR/WAW test
tsvc.c:223:5: note:  created 2 versioning for alias checks.
tsvc.c:223:5: note:  trying to apply versioning to outer loop 0
tsvc.c:223:5: note:  reusing loop version created by if conversion
tsvc.c:223:5: optimized:  loop versioned for vectorization because of possible aliasing
split exit edge of scalar loop
tsvc.c:223:5: note:  ------>vectorizing phi: i_26 = PHI <i_19(7), 0(19)>
tsvc.c:223:5: note:  ------>vectorizing phi: .MEM_27 = PHI <.MEM_18(7), .MEM_14(D)(19)>
tsvc.c:223:5: note:  ------>vectorizing phi: ivtmp_32 = PHI <ivtmp_31(7), 65536(19)>
tsvc.c:223:5: note:  ------>vectorizing statement: _1 = (long unsigned int) i_26;
tsvc.c:223:5: note:  ------>vectorizing statement: patt_12 = i_26 w* 4;
tsvc.c:223:5: note:  ------>vectorizing statement: patt_42 = (long unsigned int) patt_12;
tsvc.c:223:5: note:  ------>vectorizing statement: _3 = a_15(D) + _2;
tsvc.c:223:5: note:  ------>vectorizing statement: _4 = *_3;
tsvc.c:223:5: note:  transform statement.
tsvc.c:223:5: note:  transform load. ncopies = 1
tsvc.c:223:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_15(D)
tsvc.c:223:5: note:  created a_15(D)
tsvc.c:223:5: note:  add new stmt: vect__4.798_56 = MEM <vector(8) int> [(int *)vectp_a.796_54];
tsvc.c:223:5: note:  ------>vectorizing statement: _5 = b_16(D) + _2;
tsvc.c:223:5: note:  ------>vectorizing statement: _6 = *_5;
tsvc.c:223:5: note:  transform statement.
tsvc.c:223:5: note:  transform load. ncopies = 1
tsvc.c:223:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *b_16(D)
tsvc.c:223:5: note:  created b_16(D)
tsvc.c:223:5: note:  add new stmt: vect__6.801_59 = MEM <vector(8) int> [(int *)vectp_b.799_57];
tsvc.c:223:5: note:  ------>vectorizing statement: _7 = c_17(D) + _2;
tsvc.c:223:5: note:  ------>vectorizing statement: _41 = _4 > _6;
tsvc.c:223:5: note:  transform statement.
tsvc.c:223:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:223:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _4 = *_3;
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:223:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _6 = *_5;
tsvc.c:223:5: note:  add new stmt: mask__41.802_60 = vect__4.798_56 > vect__6.801_59;
tsvc.c:223:5: note:  ------>vectorizing statement: _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:223:5: note:  transform statement.
tsvc.c:223:5: note:  vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:223:5: note:  transform load. ncopies = 1
tsvc.c:223:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *c_17(D)
tsvc.c:223:5: note:  created c_17(D)
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:223:5: note:  vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _41 = _4 > _6;
tsvc.c:223:5: note:  add new stmt: vect__8.805_63 = .MASK_LOAD (vectp_c.803_61, 32B, mask__41.802_60);
tsvc.c:223:5: note:  ------>vectorizing statement: _9 = _6 + _8;
tsvc.c:223:5: note:  transform statement.
tsvc.c:223:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:  transform binary/unary operation.
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _6
tsvc.c:223:5: note:  vect_is_simple_use: operand *_5, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _6 = *_5;
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _8
tsvc.c:223:5: note:  vect_is_simple_use: operand .MASK_LOAD (_7, 32B, _41), type of def: internal
tsvc.c:223:5: note:    def_stmt =  _8 = .MASK_LOAD (_7, 32B, _41);
tsvc.c:223:5: note:  add new stmt: vect__9.806_64 = vect__6.801_59 + vect__8.805_63;
tsvc.c:223:5: note:  ------>vectorizing statement: _10 = _4 + _9;
tsvc.c:223:5: note:  transform statement.
tsvc.c:223:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:  vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:  transform binary/unary operation.
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _4
tsvc.c:223:5: note:  vect_is_simple_use: operand *_3, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _4 = *_3;
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _9
tsvc.c:223:5: note:  vect_is_simple_use: operand _6 + _8, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _9 = _6 + _8;
tsvc.c:223:5: note:  add new stmt: vect__10.807_65 = vect__4.798_56 + vect__9.806_64;
tsvc.c:223:5: note:  ------>vectorizing statement: .MASK_STORE (_3, 32B, _41, _10);
tsvc.c:223:5: note:  transform statement.
tsvc.c:223:5: note:  vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) <unnamed type>
tsvc.c:223:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:223:5: note:  vect_is_simple_use: vectype vector(8) int
tsvc.c:223:5: note:  transform store. ncopies = 1
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _10
tsvc.c:223:5: note:  vect_is_simple_use: operand _4 + _9, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _10 = _4 + _9;
tsvc.c:223:5: note:  vect_get_vec_def_for_operand: _41
tsvc.c:223:5: note:  vect_is_simple_use: operand _4 > _6, type of def: internal
tsvc.c:223:5: note:    def_stmt =  _41 = _4 > _6;
tsvc.c:223:5: note:  create vector_type-pointer variable to type: vector(8) int  vectorizing a pointer ref: *a_15(D)
tsvc.c:223:5: note:  created a_15(D)
tsvc.c:223:5: note:  add new stmt: .MASK_STORE (vectp_a.808_66, 32B, mask__41.802_60, vect__10.807_65);
tsvc.c:223:5: note:  ------>vectorizing statement: i_19 = i_26 + 1;
tsvc.c:223:5: note:  ------>vectorizing statement: ivtmp_31 = ivtmp_32 - 1;
tsvc.c:223:5: note:  ------>vectorizing statement: vectp_a.796_55 = vectp_a.796_54 + 32;
tsvc.c:223:5: note:  ------>vectorizing statement: vectp_b.799_58 = vectp_b.799_57 + 32;
tsvc.c:223:5: note:  ------>vectorizing statement: vectp_c.803_62 = vectp_c.803_61 + 32;
tsvc.c:223:5: note:  ------>vectorizing statement: vectp_a.808_67 = vectp_a.808_66 + 32;
tsvc.c:223:5: note:  ------>vectorizing statement: if (ivtmp_31 != 0)
tsvc.c:223:5: note:  New loop exit condition: if (ivtmp_70 < 8192)
tsvc.c:223:5: note:  LOOP VECTORIZED

tsvc.c:221:6: note: vectorized 1 loops in function.
Removing basic block 15
;; basic block 15, loop depth 0
;;  pred:      
;;  succ:       19


fix_loop_structure: fixing up loops for function
s2712 (int * a, int * b, int * c, int * d, int * e, int[256] * ff, int[256] * gg, int[256] * hh)
{
  vector(8) int * vectp_a.809;
  vector(8) int * vectp_a.808;
  vector(8) int vect__10.807;
  vector(8) int vect__9.806;
  vector(8) int vect__8.805;
  vector(8) int * vectp_c.804;
  vector(8) int * vectp_c.803;
  vector(8) <unnamed type> mask__41.802;
  vector(8) int vect__6.801;
  vector(8) int * vectp_b.800;
  vector(8) int * vectp_b.799;
  vector(8) int vect__4.798;
  vector(8) int * vectp_a.797;
  vector(8) int * vectp_a.796;
  int i;
  long unsigned int _1;
  long unsigned int _2;
  int * _3;
  int _4;
  int * _5;
  int _6;
  int * _7;
  int _8;
  int _9;
  int _10;
  long unsigned int _11;
  long unsigned int _13;
  int * _20;
  int * _21;
  int _22;
  int _23;
  unsigned int ivtmp_24;
  int * _28;
  _Bool _30;
  unsigned int ivtmp_31;
  unsigned int ivtmp_32;
  int _33;
  int _34;
  int _35;
  unsigned int ivtmp_39;
  _Bool _41;
  int * _44;
  ssizetype _45;
  sizetype _46;
  _Bool _47;
  int * _48;
  ssizetype _49;
  sizetype _50;
  _Bool _51;
  _Bool _52;
  unsigned int ivtmp_69;
  unsigned int ivtmp_70;

  <bb 2> [local count: 10737416]:
  _44 = b_16(D) + 4;
  _45 = a_15(D) - _44;
  _46 = (sizetype) _45;
  _47 = _46 > 24;
  _48 = c_17(D) + 4;
  _49 = a_15(D) - _48;
  _50 = (sizetype) _49;
  _51 = _50 > 24;
  _52 = _47 & _51;
  _30 = 1;
  if (_52 != 0)
    goto <bb 19>; [80.00%]
  else
    goto <bb 16>; [20.00%]

  <bb 19> [local count: 10737416]:

  <bb 3> [local count: 107374159]:
  # i_26 = PHI <i_19(7), 0(19)>
  # ivtmp_32 = PHI <ivtmp_31(7), 65536(19)>
  # vectp_a.796_54 = PHI <vectp_a.796_55(7), a_15(D)(19)>
  # vectp_b.799_57 = PHI <vectp_b.799_58(7), b_16(D)(19)>
  # vectp_c.803_61 = PHI <vectp_c.803_62(7), c_17(D)(19)>
  # vectp_a.808_66 = PHI <vectp_a.808_67(7), a_15(D)(19)>
  # ivtmp_69 = PHI <ivtmp_70(7), 0(19)>
  _1 = (long unsigned int) i_26;
  _2 = _1 * 4;
  _3 = a_15(D) + _2;
  vect__4.798_56 = MEM <vector(8) int> [(int *)vectp_a.796_54];
  _4 = *_3;
  _5 = b_16(D) + _2;
  vect__6.801_59 = MEM <vector(8) int> [(int *)vectp_b.799_57];
  _6 = *_5;
  _7 = c_17(D) + _2;
  mask__41.802_60 = vect__4.798_56 > vect__6.801_59;
  _41 = _4 > _6;
  vect__8.805_63 = .MASK_LOAD (vectp_c.803_61, 32B, mask__41.802_60);
  _8 = 0;
  vect__9.806_64 = vect__6.801_59 + vect__8.805_63;
  _9 = _6 + _8;
  vect__10.807_65 = vect__4.798_56 + vect__9.806_64;
  _10 = _4 + _9;
  .MASK_STORE (vectp_a.808_66, 32B, mask__41.802_60, vect__10.807_65);
  i_19 = i_26 + 1;
  ivtmp_31 = ivtmp_32 - 1;
  vectp_a.796_55 = vectp_a.796_54 + 32;
  vectp_b.799_58 = vectp_b.799_57 + 32;
  vectp_c.803_62 = vectp_c.803_61 + 32;
  vectp_a.808_67 = vectp_a.808_66 + 32;
  ivtmp_70 = ivtmp_69 + 1;
  if (ivtmp_70 < 8192)
    goto <bb 7>; [90.00%]
  else
    goto <bb 17>; [10.00%]

  <bb 7> [local count: 96636743]:
  goto <bb 3>; [100.00%]

  <bb 16> [local count: 10737416]:

  <bb 9> [local count: 212600877]:
  # i_29 = PHI <i_38(13), 0(16)>
  # ivtmp_24 = PHI <ivtmp_39(13), 65536(16)>
  _13 = (long unsigned int) i_29;
  _11 = _13 * 4;
  _28 = a_15(D) + _11;
  _22 = *_28;
  _21 = b_16(D) + _11;
  _23 = *_21;
  if (_22 > _23)
    goto <bb 11>; [50.00%]
  else
    goto <bb 12>; [50.00%]

  <bb 11> [local count: 106300438]:
  _20 = c_17(D) + _11;
  _33 = *_20;
  _34 = _23 + _33;
  _35 = _22 + _34;
  *_28 = _35;

  <bb 12> [local count: 212600877]:
  i_38 = i_29 + 1;
  ivtmp_39 = ivtmp_24 - 1;
  if (ivtmp_39 != 0)
    goto <bb 13>; [98.99%]
  else
    goto <bb 18>; [1.01%]

  <bb 18> [local count: 10737413]:
  goto <bb 6>; [100.00%]

  <bb 13> [local count: 210453394]:
  goto <bb 9>; [100.00%]

  <bb 17> [local count: 10737413]:

  <bb 6> [local count: 10737416]:
  return;

}


